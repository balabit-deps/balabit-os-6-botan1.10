# SymbolsHelper-Confirmed: 1.10.12 amd64
libbotan-1.10.so.1 libbotan-1.10-1 #MINVER#
 (c++)"Botan::AES_128::clear()@Base" 1.10.10
 (c++)"Botan::AES_128::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_128::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_128::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_128::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AES_128::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::AES_128::~AES_128()@Base" 1.10.10
 (c++)"Botan::AES_192::clear()@Base" 1.10.10
 (c++)"Botan::AES_192::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_192::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_192::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_192::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AES_192::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::AES_192::~AES_192()@Base" 1.10.10
 (c++)"Botan::AES_256::clear()@Base" 1.10.10
 (c++)"Botan::AES_256::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_256::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_256::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AES_256::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AES_256::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::AES_256::~AES_256()@Base" 1.10.10
 (c++)"Botan::ANSI_X919_MAC::ANSI_X919_MAC(Botan::BlockCipher*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ANSI_X919_MAC::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ANSI_X919_MAC::clear()@Base" 1.10.10
 (c++)"Botan::ANSI_X919_MAC::clone() const@Base" 1.10.10
 (c++)"Botan::ANSI_X919_MAC::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ANSI_X919_MAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ANSI_X919_MAC::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ANSI_X919_MAC::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ANSI_X919_MAC::output_length() const@Base" 1.10.10
 (c++)"Botan::ANSI_X919_MAC::~ANSI_X919_MAC()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ANSI_X923_Padding::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ANSI_X923_Padding::pad(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ANSI_X923_Padding::unpad(unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ANSI_X923_Padding::valid_blocksize(unsigned int) const@Base" 1.10.10
 (c++)"Botan::ANSI_X923_Padding::~ANSI_X923_Padding()@Base" 1.10.10
 (c++)"Botan::ANSI_X931_RNG::ANSI_X931_RNG(Botan::BlockCipher*, Botan::RandomNumberGenerator*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ANSI_X931_RNG::add_entropy(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ANSI_X931_RNG::add_entropy_source(Botan::EntropySource*)@Base" 1.10.10
 (c++)"Botan::ANSI_X931_RNG::clear()@Base" 1.10.10
 (c++)"Botan::ANSI_X931_RNG::is_seeded() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ANSI_X931_RNG::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ANSI_X931_RNG::randomize(unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ANSI_X931_RNG::rekey()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ANSI_X931_RNG::reseed(unsigned int)@Base" 1.10.10
 (c++)"Botan::ANSI_X931_RNG::update_buffer()@Base" 1.10.10
 (c++)"Botan::ANSI_X931_RNG::~ANSI_X931_RNG()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ARC4::ARC4(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ARC4::cipher(unsigned char const*, unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ARC4::clear()@Base" 1.10.10
 (c++)"Botan::ARC4::clone() const@Base" 1.10.10
 (c++)"Botan::ARC4::generate()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ARC4::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ARC4::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ARC4::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ARC4::~ARC4()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ASN1_String::ASN1_String(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ASN1_String::ASN1_String(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::ASN1_String::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++)"Botan::ASN1_String::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ASN1_String::iso_8859[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ASN1_String::tagging() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ASN1_String::value[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ASN1_String::~ASN1_String()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Adler32::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Adler32::clear()@Base" 1.10.10
 (c++)"Botan::Adler32::clone() const@Base" 1.10.10
 (c++)"Botan::Adler32::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Adler32::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Adler32::output_length() const@Base" 1.10.10
 (c++)"Botan::Adler32::~Adler32()@Base" 1.10.10
 (c++)"Botan::AlgorithmIdentifier::AlgorithmIdentifier(Botan::OID const&, Botan::AlgorithmIdentifier::Encoding_Option)@Base" 1.10.10
 (c++)"Botan::AlgorithmIdentifier::AlgorithmIdentifier(Botan::OID const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AlgorithmIdentifier::AlgorithmIdentifier(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::AlgorithmIdentifier::Encoding_Option)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AlgorithmIdentifier::AlgorithmIdentifier(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::AlgorithmIdentifier::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++)"Botan::AlgorithmIdentifier::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++)"Botan::AlgorithmIdentifier::~AlgorithmIdentifier()@Base" 1.10.10
 (c++)"Botan::Algorithm_Factory::Algorithm_Factory(Botan::Mutex_Factory&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::add_block_cipher(Botan::BlockCipher*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Algorithm_Factory::add_engine(Botan::Engine*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::add_hash_function(Botan::HashFunction*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::add_mac(Botan::MessageAuthenticationCode*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::add_pbkdf(Botan::PBKDF*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::add_stream_cipher(Botan::StreamCipher*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Algorithm_Factory::clear_caches()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Algorithm_Factory::get_engine_n(unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::make_block_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::make_hash_function(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::make_mac(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::make_pbkdf(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::make_stream_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::prototype_block_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::prototype_hash_function(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::prototype_mac(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::prototype_pbkdf(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::prototype_stream_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::providers_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Factory::set_preferred_provider(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Algorithm_Factory::~Algorithm_Factory()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Algorithm_Not_Found::Algorithm_Not_Found(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Algorithm_Not_Found::~Algorithm_Not_Found()@Base" 1.10.10
 (c++)"Botan::Allocator::destroy()@Base" 1.10.10
 (c++)"Botan::Allocator::get(bool)@Base" 1.10.10
 (c++)"Botan::Allocator::init()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AlternativeName::AlternativeName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AlternativeName::add_attribute(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AlternativeName::add_othername(Botan::OID const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::ASN1_Tag)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AlternativeName::contents[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::AlternativeName::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++)"Botan::AlternativeName::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AlternativeName::get_attributes[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::AlternativeName::get_othernames() const@Base" 1.10.10
 (c++)"Botan::AlternativeName::has_items() const@Base" 1.10.10
 (c++)"Botan::AlternativeName::~AlternativeName()@Base" 1.10.10
 (c++)"Botan::Attribute::Attribute(Botan::OID const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Attribute::Attribute(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Attribute::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++)"Botan::Attribute::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++)"Botan::Attribute::~Attribute()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AutoSeeded_RNG::add_entropy(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::AutoSeeded_RNG::add_entropy_source(Botan::EntropySource*)@Base" 1.10.10
 (c++)"Botan::AutoSeeded_RNG::clear()@Base" 1.10.10
 (c++)"Botan::AutoSeeded_RNG::is_seeded() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::AutoSeeded_RNG::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AutoSeeded_RNG::randomize(unsigned char*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::AutoSeeded_RNG::reseed(unsigned int)@Base" 1.10.10
 (c++)"Botan::AutoSeeded_RNG::~AutoSeeded_RNG()@Base" 1.10.10
 (c++)"Botan::BER::decode(Botan::BER_Decoder&, Botan::Key_Constraints&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::BER_Bad_Tag::BER_Bad_Tag(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::ASN1_Tag)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::BER_Bad_Tag::BER_Bad_Tag(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::BER_Bad_Tag::~BER_Bad_Tag()@Base" 1.10.10
 (c++)"Botan::BER_Decoder& Botan::BER_Decoder::decode_list<Botan::OID>(std::vector<Botan::OID, std::allocator<Botan::OID> >&, bool)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::BER_Decoder(Botan::BER_Decoder const&)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::BER_Decoder(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::BER_Decoder(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BER_Decoder::BER_Decoder(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode(Botan::ASN1_Object&)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode(Botan::BigInt&)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode(Botan::BigInt&, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode(Botan::MemoryRegion<unsigned char>&, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode(Botan::MemoryRegion<unsigned char>&, Botan::ASN1_Tag, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode(bool&)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode(bool&, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BER_Decoder::decode(unsigned int&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BER_Decoder::decode(unsigned int&, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode_null()@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode_octet_string_bigint(Botan::BigInt&)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::decode_optional_string(Botan::MemoryRegion<unsigned char>&, Botan::ASN1_Tag, unsigned short)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::discard_remaining()@Base" 1.10.10
 (c++)"Botan::BER_Decoder::end_cons()@Base" 1.10.10
 (c++)"Botan::BER_Decoder::get_next_object()@Base" 1.10.10
 (c++)"Botan::BER_Decoder::more_items() const@Base" 1.10.10
 (c++)"Botan::BER_Decoder::push_back(Botan::BER_Object const&)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::raw_bytes(Botan::MemoryRegion<unsigned char>&)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::start_cons(Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::BER_Decoder::verify_end()@Base" 1.10.10
 (c++)"Botan::BER_Decoder::~BER_Decoder()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::BER_Decoding_Error::BER_Decoding_Error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::BER_Decoding_Error::~BER_Decoding_Error()@Base" 1.10.10
 (c++)"Botan::BER_Object::assert_is_a(Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::BMW_512::clear()@Base" 1.10.10
 (c++)"Botan::BMW_512::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BMW_512::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::BMW_512::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::BMW_512::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::BMW_512::output_length() const@Base" 1.10.10
 (c++)"Botan::BMW_512::~BMW_512()@Base" 1.10.10
 (c++)"Botan::Base64_Decoder::Base64_Decoder(Botan::Decoder_Checking)@Base" 1.10.10
 (c++)"Botan::Base64_Decoder::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Base64_Decoder::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Base64_Decoder::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Base64_Decoder::~Base64_Decoder()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Base64_Encoder::Base64_Encoder(bool, unsigned int, bool)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Base64_Encoder::do_output(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Base64_Encoder::encode_and_send(unsigned char const*, unsigned int, bool)@Base" 1.10.10
 (c++)"Botan::Base64_Encoder::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Base64_Encoder::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Base64_Encoder::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Base64_Encoder::~Base64_Encoder()@Base" 1.10.10
 (c++)"Botan::BigInt::BigInt(Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::BigInt(Botan::BigInt::NumberType, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::BigInt(Botan::BigInt::Sign, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::BigInt(Botan::RandomNumberGenerator&, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::BigInt::BigInt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::BigInt(unsigned char const*, unsigned int, Botan::BigInt::Base)@Base" 1.10.10
 (c++)"Botan::BigInt::BigInt(unsigned long long)@Base" 1.10.10
 (c++)"Botan::BigInt::DivideByZero::DivideByZero()@Base" 1.10.10
 (c++)"Botan::BigInt::DivideByZero::~DivideByZero()@Base" 1.10.10
 (c++)"Botan::BigInt::abs() const@Base" 1.10.10
 (c++)"Botan::BigInt::binary_decode(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::binary_decode(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::BigInt::binary_encode(unsigned char*) const@Base" 1.10.10
 (c++)"Botan::BigInt::bits() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::byte_at(unsigned int) const@Base" 1.10.10
 (c++)"Botan::BigInt::bytes() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::clear_bit(unsigned int)@Base" 1.10.10
 (c++)"Botan::BigInt::cmp(Botan::BigInt const&, bool) const@Base" 1.10.10
 (c++)"Botan::BigInt::decode(Botan::MemoryRegion<unsigned char> const&, Botan::BigInt::Base)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::decode(unsigned char const*, unsigned int, Botan::BigInt::Base)@Base" 1.10.10
 (c++)"Botan::BigInt::encode(Botan::BigInt const&, Botan::BigInt::Base)@Base" 1.10.10
 (c++)"Botan::BigInt::encode(unsigned char*, Botan::BigInt const&, Botan::BigInt::Base)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::encode_1363(Botan::BigInt const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::BigInt::encoded_size(Botan::BigInt::Base) const@Base" 1.10.10
 (c++)"Botan::BigInt::flip_sign()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::get_bit(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::get_substring(unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::grow_reg(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::grow_to(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::mask_bits(unsigned int)@Base" 1.10.10
 (c++)"Botan::BigInt::operator%=(Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !sparc64)"Botan::BigInt::operator%=(unsigned int)@Base" 1.10.10
 (c++)"Botan::BigInt::operator*=(Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::BigInt::operator+=(Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::BigInt::operator-() const@Base" 1.10.10
 (c++)"Botan::BigInt::operator-=(Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::BigInt::operator/=(Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::operator<<=(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::operator>>=(unsigned int)@Base" 1.10.10
 (c++)"Botan::BigInt::random_integer(Botan::RandomNumberGenerator&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::randomize(Botan::RandomNumberGenerator&, unsigned int)@Base" 1.10.10
 (c++)"Botan::BigInt::reverse_sign() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BigInt::set_bit(unsigned int)@Base" 1.10.10
 (c++)"Botan::BigInt::set_sign(Botan::BigInt::Sign)@Base" 1.10.10
 (c++)"Botan::BigInt::swap(Botan::BigInt&)@Base" 1.10.10
 (c++)"Botan::BigInt::to_u32bit() const@Base" 1.10.10
 (c++)"Botan::Blinder::Blinder(Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::Blinder::blind(Botan::BigInt const&) const@Base" 1.10.10
 (c++)"Botan::Blinder::unblind(Botan::BigInt const&) const@Base" 1.10.10
 (c++)"Botan::Blinder::~Blinder()@Base" 1.10.10
 (c++)"Botan::BlockCipher::parallelism() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::BlockCipherModePaddingMethod::pad_bytes(unsigned int, unsigned int) const@Base" 1.10.10
 (c++)"Botan::Blowfish::P_INIT@Base" 1.10.10
 (c++)"Botan::Blowfish::S_INIT@Base" 1.10.10
 (c++)"Botan::Blowfish::clear()@Base" 1.10.10
 (c++)"Botan::Blowfish::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Blowfish::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Blowfish::eks_key_schedule(unsigned char const*, unsigned int, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Blowfish::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Blowfish::generate_sbox(Botan::MemoryRegion<unsigned int>&, unsigned int&, unsigned int&, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Blowfish::key_expansion(unsigned char const*, unsigned int, unsigned char const*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Blowfish::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Blowfish::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Blowfish::~Blowfish()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Buffered_Filter::Buffered_Filter(unsigned int, unsigned int)@Base" 1.10.10
 (c++)"Botan::Buffered_Filter::end_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Buffered_Filter::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Bzip_Compression::Bzip_Compression(unsigned int)@Base" 1.10.10
 (c++)"Botan::Bzip_Compression::clear()@Base" 1.10.10
 (c++)"Botan::Bzip_Compression::end_msg()@Base" 1.10.10
 (c++)"Botan::Bzip_Compression::flush()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Bzip_Compression::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Bzip_Compression::start_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Bzip_Compression::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Bzip_Compression::~Bzip_Compression()@Base" 1.10.10
 (c++)"Botan::Bzip_Decompression::Bzip_Decompression(bool)@Base" 1.10.10
 (c++)"Botan::Bzip_Decompression::clear()@Base" 1.10.10
 (c++)"Botan::Bzip_Decompression::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Bzip_Decompression::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Bzip_Decompression::start_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Bzip_Decompression::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Bzip_Decompression::~Bzip_Decompression()@Base" 1.10.10
 (c++)"Botan::CAST_128::S5@Base" 1.10.10
 (c++)"Botan::CAST_128::S6@Base" 1.10.10
 (c++)"Botan::CAST_128::S7@Base" 1.10.10
 (c++)"Botan::CAST_128::S8@Base" 1.10.10
 (c++)"Botan::CAST_128::cast_ks(Botan::MemoryRegion<unsigned int>&, Botan::MemoryRegion<unsigned int>&)@Base" 1.10.10
 (c++)"Botan::CAST_128::clear()@Base" 1.10.10
 (c++)"Botan::CAST_128::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CAST_128::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CAST_128::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CAST_128::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CAST_128::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CAST_128::~CAST_128()@Base" 1.10.10
 (c++)"Botan::CAST_256::KEY_MASK@Base" 1.10.10
 (c++)"Botan::CAST_256::KEY_ROT@Base" 1.10.10
 (c++)"Botan::CAST_256::clear()@Base" 1.10.10
 (c++)"Botan::CAST_256::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CAST_256::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CAST_256::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CAST_256::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CAST_256::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CAST_256::~CAST_256()@Base" 1.10.10
 (c++)"Botan::CBC_Decryption::CBC_Decryption(Botan::BlockCipher*, Botan::BlockCipherModePaddingMethod*)@Base" 1.10.10
 (c++)"Botan::CBC_Decryption::CBC_Decryption(Botan::BlockCipher*, Botan::BlockCipherModePaddingMethod*, Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Decryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Decryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CBC_Decryption::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CBC_Decryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CBC_Decryption::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::CBC_Decryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Decryption::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Decryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Decryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CBC_Decryption::~CBC_Decryption()@Base" 1.10.10
 (c++)"Botan::CBC_Encryption::CBC_Encryption(Botan::BlockCipher*, Botan::BlockCipherModePaddingMethod*)@Base" 1.10.10
 (c++)"Botan::CBC_Encryption::CBC_Encryption(Botan::BlockCipher*, Botan::BlockCipherModePaddingMethod*, Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Encryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Encryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CBC_Encryption::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CBC_Encryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CBC_Encryption::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::CBC_Encryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Encryption::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Encryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_Encryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CBC_Encryption::~CBC_Encryption()@Base" 1.10.10
 (c++)"Botan::CBC_MAC::CBC_MAC(Botan::BlockCipher*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_MAC::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CBC_MAC::clear()@Base" 1.10.10
 (c++)"Botan::CBC_MAC::clone() const@Base" 1.10.10
 (c++)"Botan::CBC_MAC::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CBC_MAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CBC_MAC::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CBC_MAC::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CBC_MAC::output_length() const@Base" 1.10.10
 (c++)"Botan::CBC_MAC::~CBC_MAC()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Decryption::CFB_Decryption(Botan::BlockCipher*, Botan::OctetString const&, Botan::OctetString const&, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Decryption::CFB_Decryption(Botan::BlockCipher*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CFB_Decryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CFB_Decryption::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::CFB_Decryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Decryption::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Decryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Decryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CFB_Decryption::~CFB_Decryption()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Encryption::CFB_Encryption(Botan::BlockCipher*, Botan::OctetString const&, Botan::OctetString const&, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Encryption::CFB_Encryption(Botan::BlockCipher*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CFB_Encryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CFB_Encryption::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::CFB_Encryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Encryption::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Encryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CFB_Encryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CFB_Encryption::~CFB_Encryption()@Base" 1.10.10
 (c++)"Botan::CMAC::CMAC(Botan::BlockCipher*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CMAC::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CMAC::clear()@Base" 1.10.10
 (c++)"Botan::CMAC::clone() const@Base" 1.10.10
 (c++)"Botan::CMAC::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CMAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CMAC::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CMAC::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CMAC::output_length() const@Base" 1.10.10
 (c++)"Botan::CMAC::poly_double(Botan::MemoryRegion<unsigned char> const&, unsigned char)@Base" 1.10.10
 (c++)"Botan::CMAC::~CMAC()@Base" 1.10.10
 (c++)"Botan::CPUID::altivec_capable@Base" 1.10.10
 (c++)"Botan::CPUID::cache_line@Base" 1.10.10
 (c++)"Botan::CPUID::initialize()@Base" 1.10.10
 (c++)"Botan::CPUID::x86_processor_flags@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CRC24::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CRC24::clear()@Base" 1.10.10
 (c++)"Botan::CRC24::clone() const@Base" 1.10.10
 (c++)"Botan::CRC24::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CRC24::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CRC24::output_length() const@Base" 1.10.10
 (c++)"Botan::CRC24::~CRC24()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CRC32::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CRC32::clear()@Base" 1.10.10
 (c++)"Botan::CRC32::clone() const@Base" 1.10.10
 (c++)"Botan::CRC32::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CRC32::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CRC32::output_length() const@Base" 1.10.10
 (c++)"Botan::CRC32::~CRC32()@Base" 1.10.10
 (c++)"Botan::CRL_Entry::CRL_Entry(Botan::X509_Certificate const&, Botan::CRL_Code)@Base" 1.10.10
 (c++)"Botan::CRL_Entry::CRL_Entry(bool)@Base" 1.10.10
 (c++)"Botan::CRL_Entry::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++)"Botan::CRL_Entry::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++)"Botan::CRL_Entry::~CRL_Entry()@Base" 1.10.10
 (c++)"Botan::CTR_BE::CTR_BE(Botan::BlockCipher*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTR_BE::cipher(unsigned char const*, unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CTR_BE::clear()@Base" 1.10.10
 (c++)"Botan::CTR_BE::clone() const@Base" 1.10.10
 (c++)"Botan::CTR_BE::increment_counter()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTR_BE::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CTR_BE::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CTR_BE::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTR_BE::set_iv(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTR_BE::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++)"Botan::CTR_BE::~CTR_BE()@Base" 1.10.10
 (c++)"Botan::CTS_Decryption::CTS_Decryption(Botan::BlockCipher*)@Base" 1.10.10
 (c++)"Botan::CTS_Decryption::CTS_Decryption(Botan::BlockCipher*, Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::CTS_Decryption::decrypt(unsigned char const*)@Base" 1.10.10
 (c++)"Botan::CTS_Decryption::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CTS_Decryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CTS_Decryption::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::CTS_Decryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTS_Decryption::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTS_Decryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTS_Decryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CTS_Decryption::~CTS_Decryption()@Base" 1.10.10
 (c++)"Botan::CTS_Encryption::CTS_Encryption(Botan::BlockCipher*)@Base" 1.10.10
 (c++)"Botan::CTS_Encryption::CTS_Encryption(Botan::BlockCipher*, Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::CTS_Encryption::encrypt(unsigned char const*)@Base" 1.10.10
 (c++)"Botan::CTS_Encryption::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CTS_Encryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::CTS_Encryption::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::CTS_Encryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTS_Encryption::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTS_Encryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CTS_Encryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::CTS_Encryption::~CTS_Encryption()@Base" 1.10.10
 (c++)"Botan::Camellia_128::clear()@Base" 1.10.10
 (c++)"Botan::Camellia_128::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_128::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_128::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_128::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Camellia_128::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Camellia_128::~Camellia_128()@Base" 1.10.10
 (c++)"Botan::Camellia_192::clear()@Base" 1.10.10
 (c++)"Botan::Camellia_192::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_192::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_192::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_192::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Camellia_192::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Camellia_192::~Camellia_192()@Base" 1.10.10
 (c++)"Botan::Camellia_256::clear()@Base" 1.10.10
 (c++)"Botan::Camellia_256::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_256::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_256::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Camellia_256::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Camellia_256::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Camellia_256::~Camellia_256()@Base" 1.10.10
 (c++)"Botan::Cascade_Cipher::Cascade_Cipher(Botan::BlockCipher*, Botan::BlockCipher*)@Base" 1.10.10
 (c++)"Botan::Cascade_Cipher::block_size() const@Base" 1.10.10
 (c++)"Botan::Cascade_Cipher::clear()@Base" 1.10.10
 (c++)"Botan::Cascade_Cipher::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Cascade_Cipher::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Cascade_Cipher::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Cascade_Cipher::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Cascade_Cipher::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cascade_Cipher::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cascade_Cipher::~Cascade_Cipher()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Alternative_Name::Alternative_Name(Botan::AlternativeName const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Alternative_Name::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Alternative_Name::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Alternative_Name::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Alternative_Name::encode_inner() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Alternative_Name::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Alternative_Name::should_encode() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Authority_Key_ID::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Authority_Key_ID::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Authority_Key_ID::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Authority_Key_ID::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Authority_Key_ID::encode_inner() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Authority_Key_ID::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Authority_Key_ID::should_encode() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Authority_Key_ID::~Authority_Key_ID()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Basic_Constraints::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Basic_Constraints::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Basic_Constraints::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Basic_Constraints::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Basic_Constraints::encode_inner() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Basic_Constraints::get_path_limit() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Basic_Constraints::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Basic_Constraints::~Basic_Constraints()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::CRL_Number::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_Number::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_Number::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_Number::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_Number::encode_inner() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_Number::get_crl_number() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::CRL_Number::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_Number::should_encode() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_Number::~CRL_Number()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::CRL_ReasonCode::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_ReasonCode::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_ReasonCode::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_ReasonCode::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_ReasonCode::encode_inner() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::CRL_ReasonCode::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_ReasonCode::should_encode() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::CRL_ReasonCode::~CRL_ReasonCode()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Certificate_Policies::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Certificate_Policies::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Certificate_Policies::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Certificate_Policies::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Certificate_Policies::encode_inner() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Certificate_Policies::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Certificate_Policies::should_encode() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Certificate_Policies::~Certificate_Policies()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Extended_Key_Usage::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Extended_Key_Usage::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Extended_Key_Usage::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Extended_Key_Usage::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Extended_Key_Usage::encode_inner() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Extended_Key_Usage::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Extended_Key_Usage::should_encode() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Extended_Key_Usage::~Extended_Key_Usage()@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Issuer_Alternative_Name::Issuer_Alternative_Name(Botan::AlternativeName const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Issuer_Alternative_Name::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Issuer_Alternative_Name::~Issuer_Alternative_Name()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Key_Usage::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Key_Usage::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Key_Usage::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Key_Usage::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Key_Usage::encode_inner() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Key_Usage::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Key_Usage::should_encode() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Key_Usage::~Key_Usage()@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Alternative_Name::Subject_Alternative_Name(Botan::AlternativeName const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Alternative_Name::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Alternative_Name::~Subject_Alternative_Name()@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Key_ID::Subject_Key_ID(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Subject_Key_ID::config_id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Key_ID::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Key_ID::copy() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Key_ID::decode_inner(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Key_ID::encode_inner() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Cert_Extension::Subject_Key_ID::oid_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Key_ID::should_encode() const@Base" 1.10.10
 (c++)"Botan::Cert_Extension::Subject_Key_ID::~Subject_Key_ID()@Base" 1.10.10
 (c++)"Botan::Certificate_Extension::oid_of() const@Base" 1.10.10
 (c++)"Botan::Certificate_Extension::should_encode() const@Base" 1.10.10
 (c++)"Botan::Certificate_Store_Memory::add_certificate(Botan::X509_Certificate const&)@Base" 1.10.10
 (c++)"Botan::Certificate_Store_Memory::add_crl(Botan::X509_CRL const&)@Base" 1.10.10
 (c++)"Botan::Certificate_Store_Memory::clone() const@Base" 1.10.10
 (c++)"Botan::Certificate_Store_Memory::find_cert_by_subject_and_key_id(Botan::X509_DN const&, Botan::MemoryRegion<unsigned char> const&) const@Base" 1.10.10
 (c++)"Botan::Certificate_Store_Memory::find_crl_by_subject_and_key_id(Botan::X509_DN const&, Botan::MemoryRegion<unsigned char> const&) const@Base" 1.10.10
 (c++)"Botan::Certificate_Store_Memory::~Certificate_Store_Memory()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Chain::Chain(Botan::Filter**, unsigned int)@Base" 1.10.10
 (c++)"Botan::Chain::Chain(Botan::Filter*, Botan::Filter*, Botan::Filter*, Botan::Filter*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Chain::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Chain::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Chain::~Chain()@Base" 1.10.10
 (c++)"Botan::Charset::caseless_cmp(char, char)@Base" 1.10.10
 (c++)"Botan::Charset::char2digit(char)@Base" 1.10.10
 (c++)"Botan::Charset::digit2char(unsigned char)@Base" 1.10.10
 (c++)"Botan::Charset::is_digit(char)@Base" 1.10.10
 (c++)"Botan::Charset::is_space(char)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Charset::transcode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::Character_Set, Botan::Character_Set)@Base" 1.10.10
 (c++)"Botan::CipherSuite::CipherSuite(unsigned short)@Base" 1.10.10
 (c++)"Botan::CipherSuite::lookup_ciphersuite(unsigned short)@Base" 1.10.10
 (c++)"Botan::CipherSuite::~CipherSuite()@Base" 1.10.10
 (c++)"Botan::Comb4P::Comb4P(Botan::HashFunction*, Botan::HashFunction*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Comb4P::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Comb4P::clear()@Base" 1.10.10
 (c++)"Botan::Comb4P::clone() const@Base" 1.10.10
 (c++)"Botan::Comb4P::final_result(unsigned char*)@Base" 1.10.10
 (c++)"Botan::Comb4P::hash_block_size() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Comb4P::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Comb4P::output_length() const@Base" 1.10.10
 (c++)"Botan::Comb4P::~Comb4P()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::CryptoBox::decrypt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CryptoBox::decrypt(unsigned char const*, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::CryptoBox::encrypt(unsigned char const*, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::CurveGFp::~CurveGFp()@Base" 1.10.10
 (c++)"Botan::DER_Encoder::DER_Sequence::DER_Sequence(Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DER_Encoder::DER_Sequence::add_bytes(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::DER_Sequence::get_contents()@Base" 1.10.10
 (c++)"Botan::DER_Encoder::DER_Sequence::tag_of() const@Base" 1.10.10
 (c++)"Botan::DER_Encoder::DER_Sequence::~DER_Sequence()@Base" 1.10.10
 (c++)"Botan::DER_Encoder::add_object(Botan::ASN1_Tag, Botan::ASN1_Tag, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DER_Encoder::add_object(Botan::ASN1_Tag, Botan::ASN1_Tag, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DER_Encoder::add_object(Botan::ASN1_Tag, Botan::ASN1_Tag, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::add_object(Botan::ASN1_Tag, Botan::ASN1_Tag, unsigned char)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode(Botan::ASN1_Object const&)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode(Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode(Botan::BigInt const&, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode(Botan::MemoryRegion<unsigned char> const&, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode(Botan::MemoryRegion<unsigned char> const&, Botan::ASN1_Tag, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode(bool)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode(bool, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DER_Encoder::encode(unsigned char const*, unsigned int, Botan::ASN1_Tag)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DER_Encoder::encode(unsigned char const*, unsigned int, Botan::ASN1_Tag, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DER_Encoder::encode(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DER_Encoder::encode(unsigned int, Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode_if(bool, Botan::DER_Encoder&)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::encode_null()@Base" 1.10.10
 (c++)"Botan::DER_Encoder::end_cons()@Base" 1.10.10
 (c++)"Botan::DER_Encoder::end_explicit()@Base" 1.10.10
 (c++)"Botan::DER_Encoder::get_contents()@Base" 1.10.10
 (c++)"Botan::DER_Encoder::raw_bytes(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DER_Encoder::raw_bytes(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::start_cons(Botan::ASN1_Tag, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::start_explicit(unsigned short)@Base" 1.10.10
 (c++)"Botan::DER_Encoder::~DER_Encoder()@Base" 1.10.10
 (c++)"Botan::DES::DES()@Base" 1.10.10
 (c++)"Botan::DES::clear()@Base" 1.10.10
 (c++)"Botan::DES::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DES::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DES::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DES::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DES::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::DES::~DES()@Base" 1.10.10
 (c++)"Botan::DESX::DESX()@Base" 1.10.10
 (c++)"Botan::DESX::clear()@Base" 1.10.10
 (c++)"Botan::DESX::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DESX::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DESX::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DESX::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DESX::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::DESX::~DESX()@Base" 1.10.10
 (c++)"Botan::DH_KA_Operation::DH_KA_Operation(Botan::DH_PrivateKey const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DH_KA_Operation::agree(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::DH_KA_Operation::~DH_KA_Operation()@Base" 1.10.10
 (c++)"Botan::DH_PrivateKey::DH_PrivateKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::DH_PrivateKey::DH_PrivateKey(Botan::RandomNumberGenerator&, Botan::DL_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::DH_PrivateKey::public_value() const@Base" 1.10.10
 (c++)"Botan::DH_PrivateKey::~DH_PrivateKey()@Base" 1.10.10
 (c++)"Botan::DH_PublicKey::DH_PublicKey(Botan::DL_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DH_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::DH_PublicKey::group_format() const@Base" 1.10.10
 (c++)"Botan::DH_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::DH_PublicKey::public_value() const@Base" 1.10.10
 (c++)"Botan::DH_PublicKey::~DH_PublicKey()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DLIES_Decryptor::DLIES_Decryptor(Botan::PK_Key_Agreement_Key const&, Botan::KDF*, Botan::MessageAuthenticationCode*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DLIES_Decryptor::dec(unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++)"Botan::DLIES_Decryptor::~DLIES_Decryptor()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DLIES_Encryptor::DLIES_Encryptor(Botan::PK_Key_Agreement_Key const&, Botan::KDF*, Botan::MessageAuthenticationCode*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DLIES_Encryptor::enc(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++)"Botan::DLIES_Encryptor::maximum_input_size() const@Base" 1.10.10
 (c++)"Botan::DLIES_Encryptor::set_other_key(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::DLIES_Encryptor::~DLIES_Encryptor()@Base" 1.10.10
 (c++)"Botan::DL_Group::BER_decode(Botan::DataSource&, Botan::DL_Group::Format)@Base" 1.10.10
 (c++)"Botan::DL_Group::DER_encode(Botan::DL_Group::Format) const@Base" 1.10.10
 (c++)"Botan::DL_Group::DL_Group()@Base" 1.10.10
 (c++)"Botan::DL_Group::DL_Group(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::DL_Group::DL_Group(Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DL_Group::DL_Group(Botan::RandomNumberGenerator&, Botan::DL_Group::PrimeType, unsigned int, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DL_Group::DL_Group(Botan::RandomNumberGenerator&, Botan::MemoryRegion<unsigned char> const&, unsigned int, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DL_Group::DL_Group(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::DL_Group::PEM_decode(Botan::DataSource&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DL_Group::PEM_encode[abi:cxx11](Botan::DL_Group::Format) const@Base" 1.10.10
 (c++)"Botan::DL_Group::get_g() const@Base" 1.10.10
 (c++)"Botan::DL_Group::get_p() const@Base" 1.10.10
 (c++)"Botan::DL_Group::get_q() const@Base" 1.10.10
 (c++)"Botan::DL_Group::init_check() const@Base" 1.10.10
 (c++)"Botan::DL_Group::initialize(Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::DL_Group::make_dsa_generator(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::DL_Group::verify_group(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::DL_Group::~DL_Group()@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PrivateKey::DL_Scheme_PrivateKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&, Botan::DL_Group::Format)@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PrivateKey::pkcs8_private_key() const@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PrivateKey::~DL_Scheme_PrivateKey()@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PublicKey::DL_Scheme_PublicKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&, Botan::DL_Group::Format)@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PublicKey::algorithm_identifier() const@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PublicKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PublicKey::x509_subject_public_key() const@Base" 1.10.10
 (c++)"Botan::DL_Scheme_PublicKey::~DL_Scheme_PublicKey()@Base" 1.10.10
 (c++)"Botan::DSA_PrivateKey::DSA_PrivateKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::DSA_PrivateKey::DSA_PrivateKey(Botan::RandomNumberGenerator&, Botan::DL_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::DSA_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::DSA_PrivateKey::~DSA_PrivateKey()@Base" 1.10.10
 (c++)"Botan::DSA_PublicKey::DSA_PublicKey(Botan::DL_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DSA_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::DSA_PublicKey::group_format() const@Base" 1.10.10
 (c++)"Botan::DSA_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::DSA_PublicKey::message_part_size() const@Base" 1.10.10
 (c++)"Botan::DSA_PublicKey::message_parts() const@Base" 1.10.10
 (c++)"Botan::DSA_PublicKey::~DSA_PublicKey()@Base" 1.10.10
 (c++)"Botan::DSA_Signature_Operation::DSA_Signature_Operation(Botan::DSA_PrivateKey const&)@Base" 1.10.10
 (c++)"Botan::DSA_Signature_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::DSA_Signature_Operation::message_part_size() const@Base" 1.10.10
 (c++)"Botan::DSA_Signature_Operation::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DSA_Signature_Operation::sign(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::DSA_Signature_Operation::~DSA_Signature_Operation()@Base" 1.10.10
 (c++)"Botan::DSA_Verification_Operation::DSA_Verification_Operation(Botan::DSA_PublicKey const&)@Base" 1.10.10
 (c++)"Botan::DSA_Verification_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::DSA_Verification_Operation::message_part_size() const@Base" 1.10.10
 (c++)"Botan::DSA_Verification_Operation::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DSA_Verification_Operation::verify(unsigned char const*, unsigned int, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::DSA_Verification_Operation::with_recovery() const@Base" 1.10.10
 (c++)"Botan::DSA_Verification_Operation::~DSA_Verification_Operation()@Base" 1.10.10
 (c++)"Botan::DataSink::attachable()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DataSink_Stream::DataSink_Stream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DataSink_Stream::DataSink_Stream(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DataSink_Stream::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSink_Stream::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::DataSink_Stream::~DataSink_Stream()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSource::discard_next(unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DataSource::id[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::DataSource::peek_byte(unsigned char&) const@Base" 1.10.10
 (c++)"Botan::DataSource::read_byte(unsigned char&)@Base" 1.10.10
 (c++)"Botan::DataSource_Memory::DataSource_Memory(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DataSource_Memory::DataSource_Memory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSource_Memory::DataSource_Memory(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSource_Memory::check_available(unsigned int)@Base" 1.10.10
 (c++)"Botan::DataSource_Memory::end_of_data() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSource_Memory::peek(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSource_Memory::read(unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::DataSource_Memory::~DataSource_Memory()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DataSource_Stream::DataSource_Stream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DataSource_Stream::DataSource_Stream(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSource_Stream::check_available(unsigned int)@Base" 1.10.10
 (c++)"Botan::DataSource_Stream::end_of_data() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::DataSource_Stream::id[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSource_Stream::peek(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::DataSource_Stream::read(unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::DataSource_Stream::~DataSource_Stream()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::Matcher::transform(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::add(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::add(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::add(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::add(std::multimap<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::get1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::get1_memvec(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::get1_u32bit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::has_value(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++)"Botan::Data_Store::operator==(Botan::Data_Store const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Data_Store::search_with[abi:cxx11](Botan::Data_Store::Matcher const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Decoding_Error::Decoding_Error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Decoding_Error::~Decoding_Error()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Dynamically_Loaded_Engine::Dynamically_Loaded_Engine(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::find_block_cipher(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::find_hash(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::find_mac(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::find_pbkdf(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::find_stream_cipher(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Dynamically_Loaded_Engine::get_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::Cipher_Dir, Botan::Algorithm_Factory&)@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::get_decryption_op(Botan::Private_Key const&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::get_encryption_op(Botan::Public_Key const&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::get_key_agreement_op(Botan::Private_Key const&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::get_signature_op(Botan::Private_Key const&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::get_verify_op(Botan::Public_Key const&) const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::mod_exp(Botan::BigInt const&, Botan::Power_Mod::Usage_Hints) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Dynamically_Loaded_Engine::provider_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Dynamically_Loaded_Engine::~Dynamically_Loaded_Engine()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Base::EAX_Base(Botan::BlockCipher*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::EAX_Base::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Base::set_header(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::EAX_Base::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::EAX_Base::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::EAX_Base::start_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Base::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Base::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++)"Botan::EAX_Base::~EAX_Base()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Decryption::EAX_Decryption(Botan::BlockCipher*, Botan::OctetString const&, Botan::OctetString const&, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Decryption::EAX_Decryption(Botan::BlockCipher*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Decryption::do_write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::EAX_Decryption::end_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Decryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::EAX_Decryption::~EAX_Decryption()@Base" 1.10.10
 (c++)"Botan::EAX_Encryption::end_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EAX_Encryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::EAX_Encryption::~EAX_Encryption()@Base" 1.10.10
 (c++)"Botan::EC2OSP(Botan::PointGFp const&, unsigned char)@Base" 1.10.10
 (c++)"Botan::ECB_Decryption::ECB_Decryption(Botan::BlockCipher*, Botan::BlockCipherModePaddingMethod*)@Base" 1.10.10
 (c++)"Botan::ECB_Decryption::ECB_Decryption(Botan::BlockCipher*, Botan::BlockCipherModePaddingMethod*, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECB_Decryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECB_Decryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ECB_Decryption::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ECB_Decryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ECB_Decryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECB_Decryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECB_Decryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ECB_Decryption::~ECB_Decryption()@Base" 1.10.10
 (c++)"Botan::ECB_Encryption::ECB_Encryption(Botan::BlockCipher*, Botan::BlockCipherModePaddingMethod*)@Base" 1.10.10
 (c++)"Botan::ECB_Encryption::ECB_Encryption(Botan::BlockCipher*, Botan::BlockCipherModePaddingMethod*, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECB_Encryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECB_Encryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ECB_Encryption::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ECB_Encryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ECB_Encryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECB_Encryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECB_Encryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ECB_Encryption::~ECB_Encryption()@Base" 1.10.10
 (c++)"Botan::ECDH_KA_Operation::ECDH_KA_Operation(Botan::ECDH_PrivateKey const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECDH_KA_Operation::agree(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ECDH_KA_Operation::~ECDH_KA_Operation()@Base" 1.10.10
 (c++)"Botan::ECDH_PrivateKey::public_value() const@Base" 1.10.10
 (c++)"Botan::ECDH_PrivateKey::~ECDH_PrivateKey()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ECDH_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ECDH_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::ECDH_PublicKey::~ECDH_PublicKey()@Base" 1.10.10
 (c++)"Botan::ECDSA_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::ECDSA_PrivateKey::~ECDSA_PrivateKey()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ECDSA_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ECDSA_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::ECDSA_PublicKey::message_part_size() const@Base" 1.10.10
 (c++)"Botan::ECDSA_PublicKey::message_parts() const@Base" 1.10.10
 (c++)"Botan::ECDSA_PublicKey::~ECDSA_PublicKey()@Base" 1.10.10
 (c++)"Botan::ECDSA_Signature_Operation::ECDSA_Signature_Operation(Botan::ECDSA_PrivateKey const&)@Base" 1.10.10
 (c++)"Botan::ECDSA_Signature_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::ECDSA_Signature_Operation::message_part_size() const@Base" 1.10.10
 (c++)"Botan::ECDSA_Signature_Operation::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECDSA_Signature_Operation::sign(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::ECDSA_Signature_Operation::~ECDSA_Signature_Operation()@Base" 1.10.10
 (c++)"Botan::ECDSA_Verification_Operation::ECDSA_Verification_Operation(Botan::ECDSA_PublicKey const&)@Base" 1.10.10
 (c++)"Botan::ECDSA_Verification_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::ECDSA_Verification_Operation::message_part_size() const@Base" 1.10.10
 (c++)"Botan::ECDSA_Verification_Operation::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ECDSA_Verification_Operation::verify(unsigned char const*, unsigned int, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ECDSA_Verification_Operation::with_recovery() const@Base" 1.10.10
 (c++)"Botan::ECDSA_Verification_Operation::~ECDSA_Verification_Operation()@Base" 1.10.10
 (c++)"Botan::EC_Group::DER_encode(Botan::EC_Group_Encoding) const@Base" 1.10.10
 (c++)"Botan::EC_Group::EC_Group(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::EC_Group::EC_Group(Botan::OID const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::EC_Group::EC_Group(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::EC_Group::PEM_encode[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::EC_Group::operator=(Botan::EC_Group const&)@Base" 1.10.10
 (c++)"Botan::EC_Group::~EC_Group()@Base" 1.10.10
 (c++)"Botan::EC_PrivateKey::EC_PrivateKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::EC_PrivateKey::EC_PrivateKey(Botan::RandomNumberGenerator&, Botan::EC_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::EC_PrivateKey::pkcs8_private_key() const@Base" 1.10.10
 (c++)"Botan::EC_PrivateKey::private_value() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::EC_PublicKey::EC_PublicKey()@Base" 1.10.10
 (c++)"Botan::EC_PublicKey::EC_PublicKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::EC_PublicKey::EC_PublicKey(Botan::EC_Group const&, Botan::PointGFp const&)@Base" 1.10.10
 (c++)"Botan::EC_PublicKey::algorithm_identifier() const@Base" 1.10.10
 (c++)"Botan::EC_PublicKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::EC_PublicKey::set_parameter_encoding(Botan::EC_Group_Encoding)@Base" 1.10.10
 (c++)"Botan::EC_PublicKey::x509_subject_public_key() const@Base" 1.10.10
 (c++)"Botan::EC_PublicKey::~EC_PublicKey()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::EME1::EME1(Botan::HashFunction*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME1::maximum_input_size(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME1::pad(unsigned char const*, unsigned int, unsigned int, Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME1::unpad(unsigned char const*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++)"Botan::EME1::~EME1()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME::decode(Botan::MemoryRegion<unsigned char> const&, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME::decode(unsigned char const*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME::encode(Botan::MemoryRegion<unsigned char> const&, unsigned int, Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME::encode(unsigned char const*, unsigned int, unsigned int, Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME_PKCS1v15::maximum_input_size(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME_PKCS1v15::pad(unsigned char const*, unsigned int, unsigned int, Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EME_PKCS1v15::unpad(unsigned char const*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++)"Botan::EME_PKCS1v15::~EME_PKCS1v15()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA1::encoding_of(Botan::MemoryRegion<unsigned char> const&, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::EMSA1::raw_data()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA1::update(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA1::verify(Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::EMSA1::~EMSA1()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA1_BSI::encoding_of(Botan::MemoryRegion<unsigned char> const&, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::EMSA1_BSI::~EMSA1_BSI()@Base" 1.10.10
 (c++)"Botan::EMSA2::EMSA2(Botan::HashFunction*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA2::encoding_of(Botan::MemoryRegion<unsigned char> const&, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::EMSA2::raw_data()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA2::update(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA2::verify(Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::EMSA2::~EMSA2()@Base" 1.10.10
 (c++)"Botan::EMSA3::EMSA3(Botan::HashFunction*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA3::encoding_of(Botan::MemoryRegion<unsigned char> const&, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::EMSA3::raw_data()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA3::update(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA3::verify(Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::EMSA3::~EMSA3()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA3_Raw::encoding_of(Botan::MemoryRegion<unsigned char> const&, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::EMSA3_Raw::raw_data()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA3_Raw::update(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA3_Raw::verify(Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::EMSA3_Raw::~EMSA3_Raw()@Base" 1.10.10
 (c++)"Botan::EMSA4::EMSA4(Botan::HashFunction*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA4::EMSA4(Botan::HashFunction*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA4::encoding_of(Botan::MemoryRegion<unsigned char> const&, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::EMSA4::raw_data()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA4::update(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA4::verify(Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::EMSA4::~EMSA4()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA_Raw::encoding_of(Botan::MemoryRegion<unsigned char> const&, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::EMSA_Raw::raw_data()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA_Raw::update(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::EMSA_Raw::verify(Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::EMSA_Raw::~EMSA_Raw()@Base" 1.10.10
 (c++)"Botan::ElGamal_Decryption_Operation::ElGamal_Decryption_Operation(Botan::ElGamal_PrivateKey const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ElGamal_Decryption_Operation::decrypt(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::ElGamal_Decryption_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::ElGamal_Decryption_Operation::~ElGamal_Decryption_Operation()@Base" 1.10.10
 (c++)"Botan::ElGamal_Encryption_Operation::ElGamal_Encryption_Operation(Botan::ElGamal_PublicKey const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::ElGamal_Encryption_Operation::encrypt(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::ElGamal_Encryption_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::ElGamal_Encryption_Operation::~ElGamal_Encryption_Operation()@Base" 1.10.10
 (c++)"Botan::ElGamal_PrivateKey::ElGamal_PrivateKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::ElGamal_PrivateKey::ElGamal_PrivateKey(Botan::RandomNumberGenerator&, Botan::DL_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::ElGamal_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::ElGamal_PrivateKey::~ElGamal_PrivateKey()@Base" 1.10.10
 (c++)"Botan::ElGamal_PublicKey::ElGamal_PublicKey(Botan::DL_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ElGamal_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::ElGamal_PublicKey::group_format() const@Base" 1.10.10
 (c++)"Botan::ElGamal_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::ElGamal_PublicKey::~ElGamal_PublicKey()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Encoding_Error::Encoding_Error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Encoding_Error::~Encoding_Error()@Base" 1.10.10
 (c++)"Botan::Engine::find_block_cipher(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++)"Botan::Engine::find_hash(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++)"Botan::Engine::find_mac(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++)"Botan::Engine::find_pbkdf(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++)"Botan::Engine::find_stream_cipher(Botan::SCAN_Name const&, Botan::Algorithm_Factory&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Engine::get_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::Cipher_Dir, Botan::Algorithm_Factory&)@Base" 1.10.10
 (c++)"Botan::Engine::get_decryption_op(Botan::Private_Key const&) const@Base" 1.10.10
 (c++)"Botan::Engine::get_encryption_op(Botan::Public_Key const&) const@Base" 1.10.10
 (c++)"Botan::Engine::get_key_agreement_op(Botan::Private_Key const&) const@Base" 1.10.10
 (c++)"Botan::Engine::get_signature_op(Botan::Private_Key const&) const@Base" 1.10.10
 (c++)"Botan::Engine::get_verify_op(Botan::Public_Key const&) const@Base" 1.10.10
 (c++)"Botan::Engine::mod_exp(Botan::BigInt const&, Botan::Power_Mod::Usage_Hints) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Entropy_Accumulator_BufferedComputation::add_bytes(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Entropy_Accumulator_BufferedComputation::~Entropy_Accumulator_BufferedComputation()@Base" 1.10.10
 (c++)"Botan::Extensions::Extensions(Botan::Extensions const&)@Base" 1.10.10
 (c++)"Botan::Extensions::add(Botan::Certificate_Extension*, bool)@Base" 1.10.10
 (c++)"Botan::Extensions::contents_to(Botan::Data_Store&, Botan::Data_Store&) const@Base" 1.10.10
 (c++)"Botan::Extensions::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++)"Botan::Extensions::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++)"Botan::Extensions::get_extension(Botan::OID const&)@Base" 1.10.10
 (c++)"Botan::Extensions::operator=(Botan::Extensions const&)@Base" 1.10.10
 (c++)"Botan::Extensions::~Extensions()@Base" 1.10.10
 (c++)"Botan::FPE::fe1_decrypt(Botan::BigInt const&, Botan::BigInt const&, Botan::OctetString const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::FPE::fe1_encrypt(Botan::BigInt const&, Botan::BigInt const&, Botan::OctetString const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::Filter::Filter()@Base" 1.10.10
 (c++)"Botan::Filter::attach(Botan::Filter*)@Base" 1.10.10
 (c++)"Botan::Filter::attachable()@Base" 1.10.10
 (c++)"Botan::Filter::end_msg()@Base" 1.10.10
 (c++)"Botan::Filter::finish_msg()@Base" 1.10.10
 (c++)"Botan::Filter::get_next() const@Base" 1.10.10
 (c++)"Botan::Filter::new_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Filter::send(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Filter::set_next(Botan::Filter**, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Filter::set_port(unsigned int)@Base" 1.10.10
 (c++)"Botan::Filter::start_msg()@Base" 1.10.10
 (c++)"Botan::Filter::total_ports() const@Base" 1.10.10
 (c++)"Botan::Filter::~Filter()@Base" 1.10.10
 (c++)"Botan::Fixed_Base_Power_Mod::Fixed_Base_Power_Mod(Botan::BigInt const&, Botan::BigInt const&, Botan::Power_Mod::Usage_Hints)@Base" 1.10.10
 (c++)"Botan::Fixed_Base_Power_Mod::~Fixed_Base_Power_Mod()@Base" 1.10.10
 (c++)"Botan::Fixed_Exponent_Power_Mod::Fixed_Exponent_Power_Mod(Botan::BigInt const&, Botan::BigInt const&, Botan::Power_Mod::Usage_Hints)@Base" 1.10.10
 (c++)"Botan::Fixed_Exponent_Power_Mod::~Fixed_Exponent_Power_Mod()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Fork::Fork(Botan::Filter**, unsigned int)@Base" 1.10.10
 (c++)"Botan::Fork::Fork(Botan::Filter*, Botan::Filter*, Botan::Filter*, Botan::Filter*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Fork::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Fork::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Fork::~Fork()@Base" 1.10.10
 (c++)"Botan::GOST_28147_89::GOST_28147_89(Botan::GOST_28147_89_Params const&)@Base" 1.10.10
 (c++)"Botan::GOST_28147_89::clear()@Base" 1.10.10
 (c++)"Botan::GOST_28147_89::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::GOST_28147_89::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::GOST_28147_89::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::GOST_28147_89::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::GOST_28147_89::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::GOST_28147_89::~GOST_28147_89()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::GOST_28147_89_Params::GOST_28147_89_Params(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::GOST_28147_89_Params::sbox_entry(unsigned int, unsigned int) const@Base" 1.10.10
 (c++)"Botan::GOST_3410_PrivateKey::pkcs8_algorithm_identifier() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_PrivateKey::~GOST_3410_PrivateKey()@Base" 1.10.10
 (c++)"Botan::GOST_3410_PublicKey::GOST_3410_PublicKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::GOST_3410_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_PublicKey::algorithm_identifier() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_PublicKey::message_part_size() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_PublicKey::message_parts() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_PublicKey::x509_subject_public_key() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_PublicKey::~GOST_3410_PublicKey()@Base" 1.10.10
 (c++)"Botan::GOST_3410_Signature_Operation::GOST_3410_Signature_Operation(Botan::GOST_3410_PrivateKey const&)@Base" 1.10.10
 (c++)"Botan::GOST_3410_Signature_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_Signature_Operation::message_part_size() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_Signature_Operation::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::GOST_3410_Signature_Operation::sign(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::GOST_3410_Signature_Operation::~GOST_3410_Signature_Operation()@Base" 1.10.10
 (c++)"Botan::GOST_3410_Verification_Operation::GOST_3410_Verification_Operation(Botan::GOST_3410_PublicKey const&)@Base" 1.10.10
 (c++)"Botan::GOST_3410_Verification_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_Verification_Operation::message_part_size() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_Verification_Operation::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::GOST_3410_Verification_Operation::verify(unsigned char const*, unsigned int, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::GOST_3410_Verification_Operation::with_recovery() const@Base" 1.10.10
 (c++)"Botan::GOST_3410_Verification_Operation::~GOST_3410_Verification_Operation()@Base" 1.10.10
 (c++)"Botan::GOST_34_11::GOST_34_11()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::GOST_34_11::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::GOST_34_11::clear()@Base" 1.10.10
 (c++)"Botan::GOST_34_11::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::GOST_34_11::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::GOST_34_11::final_result(unsigned char*)@Base" 1.10.10
 (c++)"Botan::GOST_34_11::hash_block_size() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::GOST_34_11::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::GOST_34_11::output_length() const@Base" 1.10.10
 (c++)"Botan::GOST_34_11::~GOST_34_11()@Base" 1.10.10
 (c++)"Botan::Global_State_Management::global_state()@Base" 1.10.10
 (c++)"Botan::Global_State_Management::global_state_exists()@Base" 1.10.10
 (c++)"Botan::Global_State_Management::set_global_state(Botan::Library_State*)@Base" 1.10.10
 (c++)"Botan::Global_State_Management::set_global_state_unless_set(Botan::Library_State*)@Base" 1.10.10
 (c++)"Botan::Global_State_Management::swap_global_state(Botan::Library_State*)@Base" 1.10.10
 (c++)"Botan::HAS_160::clear()@Base" 1.10.10
 (c++)"Botan::HAS_160::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::HAS_160::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::HAS_160::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::HAS_160::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::HAS_160::output_length() const@Base" 1.10.10
 (c++)"Botan::HAS_160::~HAS_160()@Base" 1.10.10
 (c++)"Botan::HMAC::HMAC(Botan::HashFunction*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::HMAC::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::HMAC::clear()@Base" 1.10.10
 (c++)"Botan::HMAC::clone() const@Base" 1.10.10
 (c++)"Botan::HMAC::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::HMAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::HMAC::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::HMAC::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::HMAC::output_length() const@Base" 1.10.10
 (c++)"Botan::HMAC::~HMAC()@Base" 1.10.10
 (c++)"Botan::HMAC_RNG::HMAC_RNG(Botan::MessageAuthenticationCode*, Botan::MessageAuthenticationCode*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::HMAC_RNG::add_entropy(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::HMAC_RNG::add_entropy_source(Botan::EntropySource*)@Base" 1.10.10
 (c++)"Botan::HMAC_RNG::clear()@Base" 1.10.10
 (c++)"Botan::HMAC_RNG::is_seeded() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::HMAC_RNG::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::HMAC_RNG::randomize(unsigned char*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::HMAC_RNG::reseed(unsigned int)@Base" 1.10.10
 (c++)"Botan::HMAC_RNG::~HMAC_RNG()@Base" 1.10.10
 (c++)"Botan::HashFunction::hash_block_size() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Hash_Filter::Hash_Filter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::Hash_Filter::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Hash_Filter::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Hash_Filter::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Hash_Filter::~Hash_Filter()@Base" 1.10.10
 (c++)"Botan::Hex_Decoder::Hex_Decoder(Botan::Decoder_Checking)@Base" 1.10.10
 (c++)"Botan::Hex_Decoder::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Hex_Decoder::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Hex_Decoder::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Hex_Decoder::~Hex_Decoder()@Base" 1.10.10
 (c++)"Botan::Hex_Encoder::Hex_Encoder(Botan::Hex_Encoder::Case)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Hex_Encoder::Hex_Encoder(bool, unsigned int, Botan::Hex_Encoder::Case)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Hex_Encoder::encode_and_send(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Hex_Encoder::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Hex_Encoder::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Hex_Encoder::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Hex_Encoder::~Hex_Encoder()@Base" 1.10.10
 (c++)"Botan::IDEA::IDEA()@Base" 1.10.10
 (c++)"Botan::IDEA::clear()@Base" 1.10.10
 (c++)"Botan::IDEA::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::IDEA::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::IDEA::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::IDEA::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::IDEA::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::IDEA::~IDEA()@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::IDEA_SSE2::clone() const@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::IDEA_SSE2::decrypt_n(unsigned char const*, unsigned char*, unsigned long) const@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::IDEA_SSE2::encrypt_n(unsigned char const*, unsigned char*, unsigned long) const@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::IDEA_SSE2::parallelism() const@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::IDEA_SSE2::~IDEA_SSE2()@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PrivateKey::IF_Scheme_PrivateKey(Botan::RandomNumberGenerator&, Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PrivateKey::IF_Scheme_PrivateKey(Botan::RandomNumberGenerator&, Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PrivateKey::pkcs8_private_key() const@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PrivateKey::~IF_Scheme_PrivateKey()@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PublicKey::IF_Scheme_PublicKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PublicKey::algorithm_identifier() const@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PublicKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PublicKey::x509_subject_public_key() const@Base" 1.10.10
 (c++)"Botan::IF_Scheme_PublicKey::~IF_Scheme_PublicKey()@Base" 1.10.10
 (c++)"Botan::Illegal_Point::~Illegal_Point()@Base" 1.10.10
 (c++)"Botan::Illegal_Transformation::~Illegal_Transformation()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Integrity_Failure::Integrity_Failure(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Integrity_Failure::~Integrity_Failure()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Internal_Error::Internal_Error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Internal_Error::~Internal_Error()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Invalid_Algorithm_Name::Invalid_Algorithm_Name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Invalid_Algorithm_Name::~Invalid_Algorithm_Name()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Invalid_Block_Size::Invalid_Block_Size(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Invalid_Block_Size::~Invalid_Block_Size()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Invalid_IV_Length::Invalid_IV_Length(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::Invalid_IV_Length::~Invalid_IV_Length()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Invalid_Key_Length::Invalid_Key_Length(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::Invalid_Key_Length::~Invalid_Key_Length()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Invalid_OID::Invalid_OID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Invalid_OID::~Invalid_OID()@Base" 1.10.10
 (c++)"Botan::Invalid_State::~Invalid_State()@Base" 1.10.10
 (c++)"Botan::KASUMI::KASUMI()@Base" 1.10.10
 (c++)"Botan::KASUMI::clear()@Base" 1.10.10
 (c++)"Botan::KASUMI::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KASUMI::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KASUMI::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KASUMI::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::KASUMI::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::KASUMI::~KASUMI()@Base" 1.10.10
 (c++)"Botan::KDF1::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KDF1::derive(unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::KDF1::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::KDF1::~KDF1()@Base" 1.10.10
 (c++)"Botan::KDF2::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KDF2::derive(unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::KDF2::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::KDF2::~KDF2()@Base" 1.10.10
 (c++)"Botan::KDF::clear()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KDF::derive_key(unsigned int, Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KDF::derive_key(unsigned int, Botan::MemoryRegion<unsigned char> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KDF::derive_key(unsigned int, Botan::MemoryRegion<unsigned char> const&, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KDF::derive_key(unsigned int, unsigned char const*, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::KDF::derive_key(unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Keccak_1600::Keccak_1600(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Keccak_1600::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Keccak_1600::clear()@Base" 1.10.10
 (c++)"Botan::Keccak_1600::clone() const@Base" 1.10.10
 (c++)"Botan::Keccak_1600::final_result(unsigned char*)@Base" 1.10.10
 (c++)"Botan::Keccak_1600::hash_block_size() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Keccak_1600::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Keccak_1600::output_length() const@Base" 1.10.10
 (c++)"Botan::Keccak_1600::~Keccak_1600()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::KeyPair::encryption_consistency_check(Botan::RandomNumberGenerator&, Botan::Private_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::KeyPair::signature_consistency_check(Botan::RandomNumberGenerator&, Botan::Private_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Keyed_Filter::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Keyed_Filter::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++)"Botan::LibraryInitializer::deinitialize()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::LibraryInitializer::initialize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Library_State::Library_State()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Library_State::add_alias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Library_State::add_allocator(Botan::Allocator*)@Base" 1.10.10
 (c++)"Botan::Library_State::algorithm_factory() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Library_State::deref_alias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Library_State::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Library_State::get_allocator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++)"Botan::Library_State::get_mutex() const@Base" 1.10.10
 (c++)"Botan::Library_State::global_rng()@Base" 1.10.10
 (c++)"Botan::Library_State::initialize(bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Library_State::is_set(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++)"Botan::Library_State::load_default_config()@Base" 1.10.10
 (c++)"Botan::Library_State::make_global_rng(Botan::Algorithm_Factory&, Botan::Mutex*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Library_State::set(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Library_State::set_default_allocator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Library_State::~Library_State()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Lion::Lion(Botan::HashFunction*, Botan::StreamCipher*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Lion::block_size() const@Base" 1.10.10
 (c++)"Botan::Lion::clear()@Base" 1.10.10
 (c++)"Botan::Lion::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Lion::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Lion::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Lion::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Lion::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Lion::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Lion::~Lion()@Base" 1.10.10
 (c++)"Botan::Lookup_Error::~Lookup_Error()@Base" 1.10.10
 (c++)"Botan::LubyRackoff::LubyRackoff(Botan::HashFunction*)@Base" 1.10.10
 (c++)"Botan::LubyRackoff::block_size() const@Base" 1.10.10
 (c++)"Botan::LubyRackoff::clear()@Base" 1.10.10
 (c++)"Botan::LubyRackoff::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::LubyRackoff::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::LubyRackoff::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::LubyRackoff::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::LubyRackoff::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::LubyRackoff::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::LubyRackoff::~LubyRackoff()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MAC_Filter::MAC_Filter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::OctetString const&, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MAC_Filter::MAC_Filter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::MAC_Filter::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::MAC_Filter::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::MAC_Filter::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MAC_Filter::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MAC_Filter::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::MAC_Filter::~MAC_Filter()@Base" 1.10.10
 (c++)"Botan::MARS::MARS()@Base" 1.10.10
 (c++)"Botan::MARS::clear()@Base" 1.10.10
 (c++)"Botan::MARS::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MARS::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MARS::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MARS::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::MARS::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::MARS::~MARS()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MD2::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::MD2::clear()@Base" 1.10.10
 (c++)"Botan::MD2::clone() const@Base" 1.10.10
 (c++)"Botan::MD2::final_result(unsigned char*)@Base" 1.10.10
 (c++)"Botan::MD2::hash(unsigned char const*)@Base" 1.10.10
 (c++)"Botan::MD2::hash_block_size() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::MD2::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::MD2::output_length() const@Base" 1.10.10
 (c++)"Botan::MD2::~MD2()@Base" 1.10.10
 (c++)"Botan::MD4::clear()@Base" 1.10.10
 (c++)"Botan::MD4::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MD4::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::MD4::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::MD4::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::MD4::output_length() const@Base" 1.10.10
 (c++)"Botan::MD4::~MD4()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::MD4_X86_32::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::MD4_X86_32::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)Botan::MD4_X86_32::~MD4_X86_32()@Base 1.10.10
 (c++)"Botan::MD5::MD5()@Base" 1.10.10
 (c++)"Botan::MD5::clear()@Base" 1.10.10
 (c++)"Botan::MD5::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MD5::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::MD5::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::MD5::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::MD5::output_length() const@Base" 1.10.10
 (c++)"Botan::MD5::~MD5()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::MD5_X86_32::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::MD5_X86_32::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)Botan::MD5_X86_32::~MD5_X86_32()@Base 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MDx_HashFunction::MDx_HashFunction(unsigned int, bool, bool, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MDx_HashFunction::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::MDx_HashFunction::clear()@Base" 1.10.10
 (c++)"Botan::MDx_HashFunction::final_result(unsigned char*)@Base" 1.10.10
 (c++)"Botan::MDx_HashFunction::hash_block_size() const@Base" 1.10.10
 (c++)"Botan::MDx_HashFunction::write_count(unsigned char*)@Base" 1.10.10
 (c++)"Botan::MGF1::MGF1(Botan::HashFunction*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MGF1::mask(unsigned char const*, unsigned int, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++)"Botan::MGF1::~MGF1()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MISTY1::MISTY1(unsigned int)@Base" 1.10.10
 (c++)"Botan::MISTY1::clear()@Base" 1.10.10
 (c++)"Botan::MISTY1::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MISTY1::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MISTY1::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MISTY1::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::MISTY1::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::MISTY1::~MISTY1()@Base" 1.10.10
 (c++)"Botan::Memory_Exhaustion::what() const@Base" 1.10.10
 (c++)"Botan::Memory_Exhaustion::~Memory_Exhaustion()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::MessageAuthenticationCode::verify_mac(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Modular_Reducer::Modular_Reducer(Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::Modular_Reducer::reduce(Botan::BigInt const&) const@Base" 1.10.10
 (c++)"Botan::Modular_Reducer::~Modular_Reducer()@Base" 1.10.10
 (c++)"Botan::NR_PrivateKey::NR_PrivateKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::NR_PrivateKey::NR_PrivateKey(Botan::RandomNumberGenerator&, Botan::DL_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::NR_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::NR_PrivateKey::~NR_PrivateKey()@Base" 1.10.10
 (c++)"Botan::NR_PublicKey::NR_PublicKey(Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::NR_PublicKey::NR_PublicKey(Botan::DL_Group const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::NR_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::NR_PublicKey::group_format() const@Base" 1.10.10
 (c++)"Botan::NR_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::NR_PublicKey::message_part_size() const@Base" 1.10.10
 (c++)"Botan::NR_PublicKey::message_parts() const@Base" 1.10.10
 (c++)"Botan::NR_PublicKey::~NR_PublicKey()@Base" 1.10.10
 (c++)"Botan::NR_Signature_Operation::NR_Signature_Operation(Botan::NR_PrivateKey const&)@Base" 1.10.10
 (c++)"Botan::NR_Signature_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::NR_Signature_Operation::message_part_size() const@Base" 1.10.10
 (c++)"Botan::NR_Signature_Operation::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::NR_Signature_Operation::sign(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::NR_Signature_Operation::~NR_Signature_Operation()@Base" 1.10.10
 (c++)"Botan::NR_Verification_Operation::NR_Verification_Operation(Botan::NR_PublicKey const&)@Base" 1.10.10
 (c++)"Botan::NR_Verification_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::NR_Verification_Operation::message_part_size() const@Base" 1.10.10
 (c++)"Botan::NR_Verification_Operation::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::NR_Verification_Operation::verify_mr(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::NR_Verification_Operation::with_recovery() const@Base" 1.10.10
 (c++)"Botan::NR_Verification_Operation::~NR_Verification_Operation()@Base" 1.10.10
 (c++)"Botan::Noekeon::Noekeon()@Base" 1.10.10
 (c++)"Botan::Noekeon::RC@Base" 1.10.10
 (c++)"Botan::Noekeon::clear()@Base" 1.10.10
 (c++)"Botan::Noekeon::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Noekeon::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Noekeon::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Noekeon::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Noekeon::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Noekeon::~Noekeon()@Base" 1.10.10
 (c++)"Botan::Noekeon_SIMD::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Noekeon_SIMD::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Noekeon_SIMD::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++)"Botan::Noekeon_SIMD::parallelism() const@Base" 1.10.10
 (c++)"Botan::Noekeon_SIMD::~Noekeon_SIMD()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Null_Padding::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Null_Padding::pad(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Null_Padding::pad_bytes(unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Null_Padding::unpad(unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Null_Padding::valid_blocksize(unsigned int) const@Base" 1.10.10
 (c++)"Botan::Null_Padding::~Null_Padding()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Null_RNG::add_entropy(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Null_RNG::add_entropy_source(Botan::EntropySource*)@Base" 1.10.10
 (c++)"Botan::Null_RNG::clear()@Base" 1.10.10
 (c++)"Botan::Null_RNG::is_seeded() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Null_RNG::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Null_RNG::randomize(unsigned char*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Null_RNG::reseed(unsigned int)@Base" 1.10.10
 (c++)"Botan::Null_RNG::~Null_RNG()@Base" 1.10.10
 (c++)"Botan::OFB::OFB(Botan::BlockCipher*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OFB::cipher(unsigned char const*, unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::OFB::clear()@Base" 1.10.10
 (c++)"Botan::OFB::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OFB::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::OFB::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OFB::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OFB::set_iv(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OFB::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++)"Botan::OFB::~OFB()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OID::OID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OID::as_string[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::OID::clear()@Base" 1.10.10
 (c++)"Botan::OID::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++)"Botan::OID::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++)"Botan::OID::operator+=(unsigned int)@Base" 1.10.10
 (c++)"Botan::OID::operator==(Botan::OID const&) const@Base" 1.10.10
 (c++)"Botan::OID::~OID()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OIDS::add_oid(Botan::OID const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OIDS::have_oid(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OIDS::lookup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OIDS::lookup[abi:cxx11](Botan::OID const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OIDS::name_of(Botan::OID const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OS2ECP(unsigned char const*, unsigned int, Botan::CurveGFp const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OctetString::OctetString(Botan::RandomNumberGenerator&, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OctetString::as_string[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OctetString::change(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OctetString::change(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::OctetString::operator^=(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::OctetString::set_odd_parity()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OneAndZeros_Padding::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OneAndZeros_Padding::pad(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OneAndZeros_Padding::unpad(unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OneAndZeros_Padding::valid_blocksize(unsigned int) const@Base" 1.10.10
 (c++)"Botan::OneAndZeros_Padding::~OneAndZeros_Padding()@Base" 1.10.10
 (c++)"Botan::OpenPGP_S2K::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::OpenPGP_S2K::derive_key(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned char const*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::OpenPGP_S2K::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::OpenPGP_S2K::~OpenPGP_S2K()@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::PBE_PKCS5v15(Botan::BlockCipher*, Botan::HashFunction*, Botan::Cipher_Dir)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::decode_params(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::encode_params() const@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::end_msg()@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::flush_pipe(bool)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::get_oid() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PBE_PKCS5v15::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::new_params(Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PBE_PKCS5v15::set_key(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::start_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PBE_PKCS5v15::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v15::~PBE_PKCS5v15()@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::PBE_PKCS5v20(Botan::BlockCipher*, Botan::HashFunction*)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::PBE_PKCS5v20(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::decode_params(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::encode_params() const@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::end_msg()@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::flush_pipe(bool)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::get_oid() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PBE_PKCS5v20::known_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PBE_PKCS5v20::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::new_params(Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PBE_PKCS5v20::set_key(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::start_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PBE_PKCS5v20::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PBE_PKCS5v20::~PBE_PKCS5v20()@Base" 1.10.10
 (c++)"Botan::PBKDF::clear()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PEM_Code::decode(Botan::DataSource&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PEM_Code::decode_check_label(Botan::DataSource&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PEM_Code::encode(Botan::MemoryRegion<unsigned char> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PEM_Code::encode(unsigned char const*, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PEM_Code::matches(Botan::DataSource&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PGP_decode(Botan::DataSource&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PGP_decode(Botan::DataSource&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PGP_encode(unsigned char const*, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PGP_encode(unsigned char const*, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::PKCS10_Request(Botan::DataSource&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS10_Request::PKCS10_Request(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS10_Request::challenge_password[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::constraints() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::ex_constraints() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::force_decode()@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::handle_attribute(Botan::Attribute const&)@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::is_CA() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::path_limit() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::raw_public_key() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::subject_alt_name() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::subject_dn() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::subject_public_key() const@Base" 1.10.10
 (c++)"Botan::PKCS10_Request::~PKCS10_Request()@Base" 1.10.10
 (c++)"Botan::PKCS5_PBKDF1::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PKCS5_PBKDF1::derive_key(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned char const*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS5_PBKDF1::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::PKCS5_PBKDF1::~PKCS5_PBKDF1()@Base" 1.10.10
 (c++)"Botan::PKCS5_PBKDF2::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PKCS5_PBKDF2::derive_key(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned char const*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS5_PBKDF2::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::PKCS5_PBKDF2::~PKCS5_PBKDF2()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS7_Padding::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PKCS7_Padding::pad(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PKCS7_Padding::unpad(unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PKCS7_Padding::valid_blocksize(unsigned int) const@Base" 1.10.10
 (c++)"Botan::PKCS7_Padding::~PKCS7_Padding()@Base" 1.10.10
 (c++)"Botan::PKCS8::BER_encode(Botan::Private_Key const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS8::BER_encode(Botan::Private_Key const&, Botan::RandomNumberGenerator&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS8::PEM_encode(Botan::Private_Key const&, Botan::RandomNumberGenerator&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS8::PEM_encode[abi:cxx11](Botan::Private_Key const&)@Base" 1.10.10
 (c++)"Botan::PKCS8::copy_key(Botan::Private_Key const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::PKCS8::load_key(Botan::DataSource&, Botan::RandomNumberGenerator&, Botan::User_Interface const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS8::load_key(Botan::DataSource&, Botan::RandomNumberGenerator&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS8::load_key(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::RandomNumberGenerator&, Botan::User_Interface const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS8::load_key(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::RandomNumberGenerator&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PKCS8_Exception::PKCS8_Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::PKCS8_Exception::~PKCS8_Exception()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Decryptor_EME::PK_Decryptor_EME(Botan::Private_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Decryptor_EME::dec(unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++)"Botan::PK_Decryptor_EME::~PK_Decryptor_EME()@Base" 1.10.10
 (c++)"Botan::PK_Decryptor_Filter::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Decryptor_Filter::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Decryptor_Filter::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PK_Decryptor_Filter::~PK_Decryptor_Filter()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Encryptor_EME::PK_Encryptor_EME(Botan::Public_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Encryptor_EME::enc(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++)"Botan::PK_Encryptor_EME::maximum_input_size() const@Base" 1.10.10
 (c++)"Botan::PK_Encryptor_EME::~PK_Encryptor_EME()@Base" 1.10.10
 (c++)"Botan::PK_Encryptor_Filter::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Encryptor_Filter::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Encryptor_Filter::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PK_Encryptor_Filter::~PK_Encryptor_Filter()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Key_Agreement::PK_Key_Agreement(Botan::PK_Key_Agreement_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Key_Agreement::derive_key(unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++)"Botan::PK_Key_Agreement::~PK_Key_Agreement()@Base" 1.10.10
 (c++)"Botan::PK_Ops::Signature::message_part_size() const@Base" 1.10.10
 (c++)"Botan::PK_Ops::Signature::message_parts() const@Base" 1.10.10
 (c++)"Botan::PK_Ops::Verification::message_part_size() const@Base" 1.10.10
 (c++)"Botan::PK_Ops::Verification::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Ops::Verification::verify(unsigned char const*, unsigned int, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Ops::Verification::verify_mr(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Signer::PK_Signer(Botan::Private_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::Signature_Format, Botan::Fault_Protection)@Base" 1.10.10
 (c++)"Botan::PK_Signer::self_test_signature(Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Signer::sign_message(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::PK_Signer::signature(Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Signer::update(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PK_Signer_Filter::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Signer_Filter::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Signer_Filter::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PK_Signer_Filter::~PK_Signer_Filter()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Verifier::PK_Verifier(Botan::Public_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::Signature_Format)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Verifier::check_signature(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PK_Verifier::set_input_format(Botan::Signature_Format)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Verifier::update(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Verifier::validate_signature(Botan::MemoryRegion<unsigned char> const&, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Verifier::verify_message(unsigned char const*, unsigned int, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PK_Verifier_Filter::PK_Verifier_Filter(Botan::PK_Verifier*, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Verifier_Filter::PK_Verifier_Filter(Botan::PK_Verifier*, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PK_Verifier_Filter::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PK_Verifier_Filter::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::PK_Verifier_Filter::set_signature(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Verifier_Filter::set_signature(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::PK_Verifier_Filter::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::PK_Verifier_Filter::~PK_Verifier_Filter()@Base" 1.10.10
 (c++)"Botan::PRIMES@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::PRNG_Unseeded::PRNG_Unseeded(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::PRNG_Unseeded::~PRNG_Unseeded()@Base" 1.10.10
 (c++)"Botan::Parallel::Parallel(std::vector<Botan::HashFunction*, std::allocator<Botan::HashFunction*> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Parallel::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Parallel::clear()@Base" 1.10.10
 (c++)"Botan::Parallel::clone() const@Base" 1.10.10
 (c++)"Botan::Parallel::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Parallel::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Parallel::output_length() const@Base" 1.10.10
 (c++)"Botan::Parallel::~Parallel()@Base" 1.10.10
 (c++)"Botan::Pipe::DEFAULT_MESSAGE@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::Invalid_Message_Number::Invalid_Message_Number(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::Pipe::Invalid_Message_Number::~Invalid_Message_Number()@Base" 1.10.10
 (c++)"Botan::Pipe::LAST_MESSAGE@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::Pipe(Botan::Filter**, unsigned int)@Base" 1.10.10
 (c++)"Botan::Pipe::Pipe(Botan::Filter*, Botan::Filter*, Botan::Filter*, Botan::Filter*)@Base" 1.10.10
 (c++)"Botan::Pipe::append(Botan::Filter*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::check_available(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::check_available_msg(unsigned int, unsigned int)@Base" 1.10.10
 (c++)"Botan::Pipe::clear_endpoints(Botan::Filter*)@Base" 1.10.10
 (c++)"Botan::Pipe::destruct(Botan::Filter*)@Base" 1.10.10
 (c++)"Botan::Pipe::end_msg()@Base" 1.10.10
 (c++)"Botan::Pipe::end_of_data() const@Base" 1.10.10
 (c++)"Botan::Pipe::find_endpoints(Botan::Filter*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::get_message_no(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const@Base" 1.10.10
 (c++)"Botan::Pipe::init()@Base" 1.10.10
 (c++)"Botan::Pipe::message_count() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::peek(unsigned char&, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::peek(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::peek(unsigned char*, unsigned int, unsigned int, unsigned int) const@Base" 1.10.10
 (c++)"Botan::Pipe::pop()@Base" 1.10.10
 (c++)"Botan::Pipe::prepend(Botan::Filter*)@Base" 1.10.10
 (c++)"Botan::Pipe::process_msg(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::Pipe::process_msg(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Pipe::process_msg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::process_msg(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::read(unsigned char&, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::read(unsigned char*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::read(unsigned char*, unsigned int, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::read_all(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::read_all_as_string[abi:cxx11](unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::remaining(unsigned int) const@Base" 1.10.10
 (c++)"Botan::Pipe::reset()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::set_default_msg(unsigned int)@Base" 1.10.10
 (c++)"Botan::Pipe::start_msg()@Base" 1.10.10
 (c++)"Botan::Pipe::write(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::Pipe::write(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Pipe::write(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Pipe::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Pipe::write(unsigned char)@Base" 1.10.10
 (c++)"Botan::Pipe::~Pipe()@Base" 1.10.10
 (c++)"Botan::PointGFp::PointGFp(Botan::CurveGFp const&)@Base" 1.10.10
 (c++)"Botan::PointGFp::PointGFp(Botan::CurveGFp const&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::PointGFp::add(Botan::PointGFp const&, std::vector<Botan::BigInt, std::allocator<Botan::BigInt> >&)@Base" 1.10.10
 (c++)"Botan::PointGFp::get_affine_x() const@Base" 1.10.10
 (c++)"Botan::PointGFp::get_affine_y() const@Base" 1.10.10
 (c++)"Botan::PointGFp::monty_mult(Botan::BigInt&, Botan::BigInt const&, Botan::BigInt const&) const@Base" 1.10.10
 (c++)"Botan::PointGFp::monty_sqr(Botan::BigInt&, Botan::BigInt const&) const@Base" 1.10.10
 (c++)"Botan::PointGFp::mult2(std::vector<Botan::BigInt, std::allocator<Botan::BigInt> >&)@Base" 1.10.10
 (c++)"Botan::PointGFp::on_the_curve() const@Base" 1.10.10
 (c++)"Botan::PointGFp::operator*=(Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::PointGFp::operator+=(Botan::PointGFp const&)@Base" 1.10.10
 (c++)"Botan::PointGFp::operator-=(Botan::PointGFp const&)@Base" 1.10.10
 (c++)"Botan::PointGFp::operator==(Botan::PointGFp const&) const@Base" 1.10.10
 (c++)"Botan::PointGFp::swap(Botan::PointGFp&)@Base" 1.10.10
 (c++)"Botan::PointGFp::~PointGFp()@Base" 1.10.10
 (c++)"Botan::Power_Mod::Power_Mod(Botan::BigInt const&, Botan::Power_Mod::Usage_Hints)@Base" 1.10.10
 (c++)"Botan::Power_Mod::Power_Mod(Botan::Power_Mod const&)@Base" 1.10.10
 (c++)"Botan::Power_Mod::execute() const@Base" 1.10.10
 (c++)"Botan::Power_Mod::operator=(Botan::Power_Mod const&)@Base" 1.10.10
 (c++)"Botan::Power_Mod::set_base(Botan::BigInt const&) const@Base" 1.10.10
 (c++)"Botan::Power_Mod::set_exponent(Botan::BigInt const&) const@Base" 1.10.10
 (c++)"Botan::Power_Mod::set_modulus(Botan::BigInt const&, Botan::Power_Mod::Usage_Hints) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Power_Mod::window_bits(unsigned int, unsigned int, Botan::Power_Mod::Usage_Hints)@Base" 1.10.10
 (c++)"Botan::Power_Mod::~Power_Mod()@Base" 1.10.10
 (c++)"Botan::Private_Key::gen_check(Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++)"Botan::Private_Key::load_check(Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++)"Botan::Private_Key::pkcs8_algorithm_identifier() const@Base" 1.10.10
 (c++)"Botan::Public_Key::get_oid() const@Base" 1.10.10
 (c++)"Botan::Public_Key::load_check(Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++)"Botan::Public_Key::message_part_size() const@Base" 1.10.10
 (c++)"Botan::Public_Key::message_parts() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC2::EKB_code(unsigned int)@Base" 1.10.10
 (c++)"Botan::RC2::RC2()@Base" 1.10.10
 (c++)"Botan::RC2::clear()@Base" 1.10.10
 (c++)"Botan::RC2::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC2::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC2::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC2::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RC2::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::RC2::~RC2()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC5::RC5(unsigned int)@Base" 1.10.10
 (c++)"Botan::RC5::clear()@Base" 1.10.10
 (c++)"Botan::RC5::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC5::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC5::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC5::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RC5::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::RC5::~RC5()@Base" 1.10.10
 (c++)"Botan::RC6::RC6()@Base" 1.10.10
 (c++)"Botan::RC6::clear()@Base" 1.10.10
 (c++)"Botan::RC6::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC6::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC6::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RC6::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RC6::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::RC6::~RC6()@Base" 1.10.10
 (c++)"Botan::RIPEMD_128::RIPEMD_128()@Base" 1.10.10
 (c++)"Botan::RIPEMD_128::clear()@Base" 1.10.10
 (c++)"Botan::RIPEMD_128::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RIPEMD_128::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::RIPEMD_128::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RIPEMD_128::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::RIPEMD_128::output_length() const@Base" 1.10.10
 (c++)"Botan::RIPEMD_128::~RIPEMD_128()@Base" 1.10.10
 (c++)"Botan::RIPEMD_160::RIPEMD_160()@Base" 1.10.10
 (c++)"Botan::RIPEMD_160::clear()@Base" 1.10.10
 (c++)"Botan::RIPEMD_160::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RIPEMD_160::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::RIPEMD_160::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RIPEMD_160::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::RIPEMD_160::output_length() const@Base" 1.10.10
 (c++)"Botan::RIPEMD_160::~RIPEMD_160()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RSA_PrivateKey::RSA_PrivateKey(Botan::RandomNumberGenerator&, unsigned int, unsigned int)@Base" 1.10.10
 (c++)"Botan::RSA_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::RSA_PrivateKey::~RSA_PrivateKey()@Base" 1.10.10
 (c++)"Botan::RSA_Private_Operation::RSA_Private_Operation(Botan::RSA_PrivateKey const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RSA_Private_Operation::decrypt(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::RSA_Private_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"Botan::RSA_Private_Operation::private_op(Botan::BigInt const&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RSA_Private_Operation::sign(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::RSA_Private_Operation::~RSA_Private_Operation()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RSA_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::RSA_PublicKey::~RSA_PublicKey()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RSA_Public_Operation::encrypt(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::RSA_Public_Operation::max_input_bits() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RSA_Public_Operation::verify_mr(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::RSA_Public_Operation::with_recovery() const@Base" 1.10.10
 (c++)"Botan::RSA_Public_Operation::~RSA_Public_Operation()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RTSS_Share::RTSS_Share(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::RTSS_Share::reconstruct(std::vector<Botan::RTSS_Share, std::allocator<Botan::RTSS_Share> > const&)@Base" 1.10.10
 (c++)"Botan::RTSS_Share::share_id() const@Base" 1.10.10
 (c++)"Botan::RTSS_Share::split(unsigned char, unsigned char, unsigned char const*, unsigned short, unsigned char const*, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RTSS_Share::to_string[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RW_PrivateKey::RW_PrivateKey(Botan::RandomNumberGenerator&, unsigned int, unsigned int)@Base" 1.10.10
 (c++)"Botan::RW_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"Botan::RW_PrivateKey::~RW_PrivateKey()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::RW_PublicKey::algo_name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::RW_PublicKey::~RW_PublicKey()@Base" 1.10.10
 (c++)"Botan::RW_Signature_Operation::RW_Signature_Operation(Botan::RW_PrivateKey const&)@Base" 1.10.10
 (c++)"Botan::RW_Signature_Operation::max_input_bits() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RW_Signature_Operation::sign(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::RW_Signature_Operation::~RW_Signature_Operation()@Base" 1.10.10
 (c++)"Botan::RW_Verification_Operation::max_input_bits() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RW_Verification_Operation::verify_mr(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::RW_Verification_Operation::with_recovery() const@Base" 1.10.10
 (c++)"Botan::RW_Verification_Operation::~RW_Verification_Operation()@Base" 1.10.10
 (c++)"Botan::RandomNumberGenerator::is_seeded() const@Base" 1.10.10
 (c++)"Botan::RandomNumberGenerator::make_rng()@Base" 1.10.10
 (c++)"Botan::RandomNumberGenerator::next_byte()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::RandomNumberGenerator::random_vec(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Randpool::Randpool(Botan::BlockCipher*, Botan::MessageAuthenticationCode*, unsigned int, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Randpool::add_entropy(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Randpool::add_entropy_source(Botan::EntropySource*)@Base" 1.10.10
 (c++)"Botan::Randpool::clear()@Base" 1.10.10
 (c++)"Botan::Randpool::is_seeded() const@Base" 1.10.10
 (c++)"Botan::Randpool::mix_pool()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Randpool::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Randpool::randomize(unsigned char*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Randpool::reseed(unsigned int)@Base" 1.10.10
 (c++)"Botan::Randpool::update_buffer()@Base" 1.10.10
 (c++)"Botan::Randpool::~Randpool()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Record_Reader::add_input(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Record_Reader::get_record(unsigned char&, Botan::MemoryRegion<unsigned char>&)@Base" 1.10.10
 (c++)"Botan::Record_Reader::reset()@Base" 1.10.10
 (c++)"Botan::Record_Reader::set_keys(Botan::CipherSuite const&, Botan::SessionKeys const&, Botan::Connection_Side)@Base" 1.10.10
 (c++)"Botan::Record_Reader::set_version(Botan::Version_Code)@Base" 1.10.10
 (c++)"Botan::Record_Reader::~Record_Reader()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Record_Writer::Record_Writer(std::tr1::function<void (unsigned char const*, unsigned int)>)@Base" 1.10.10
 (c++)"Botan::Record_Writer::alert(Botan::Alert_Level, Botan::Alert_Type)@Base" 1.10.10
 (c++)"Botan::Record_Writer::flush()@Base" 1.10.10
 (c++)"Botan::Record_Writer::reset()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Record_Writer::send(unsigned char, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Record_Writer::send_record(unsigned char, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Record_Writer::send_record(unsigned char, unsigned char, unsigned char, unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Record_Writer::set_keys(Botan::CipherSuite const&, Botan::SessionKeys const&, Botan::Connection_Side)@Base" 1.10.10
 (c++)"Botan::Record_Writer::set_version(Botan::Version_Code)@Base" 1.10.10
 (c++)"Botan::Record_Writer::~Record_Writer()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SAFER_SK::SAFER_SK(unsigned int)@Base" 1.10.10
 (c++)"Botan::SAFER_SK::clear()@Base" 1.10.10
 (c++)"Botan::SAFER_SK::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SAFER_SK::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SAFER_SK::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SAFER_SK::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SAFER_SK::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SAFER_SK::~SAFER_SK()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SCAN_Name::SCAN_Name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SCAN_Name::algo_name_and_args[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SCAN_Name::arg(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SCAN_Name::arg[abi:cxx11](unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SCAN_Name::arg_as_integer(unsigned int, unsigned int) const@Base" 1.10.10
 (c++)"Botan::SCAN_Name::~SCAN_Name()@Base" 1.10.10
 (c++)"Botan::SEED::G_FUNC::S0@Base" 1.10.10
 (c++)"Botan::SEED::G_FUNC::S1@Base" 1.10.10
 (c++)"Botan::SEED::G_FUNC::S2@Base" 1.10.10
 (c++)"Botan::SEED::G_FUNC::S3@Base" 1.10.10
 (c++)"Botan::SEED::G_FUNC::operator()(unsigned int) const@Base" 1.10.10
 (c++)"Botan::SEED::SEED()@Base" 1.10.10
 (c++)"Botan::SEED::clear()@Base" 1.10.10
 (c++)"Botan::SEED::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SEED::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SEED::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SEED::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SEED::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SEED::~SEED()@Base" 1.10.10
 (c++)"Botan::SHA_160::SHA_160()@Base" 1.10.10
 (c++)"Botan::SHA_160::clear()@Base" 1.10.10
 (c++)"Botan::SHA_160::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SHA_160::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SHA_160::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SHA_160::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SHA_160::output_length() const@Base" 1.10.10
 (c++)"Botan::SHA_160::~SHA_160()@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::SHA_160_SSE2::clone() const@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::SHA_160_SSE2::compress_n(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::SHA_160_SSE2::~SHA_160_SSE2()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::SHA_160_X86_32::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::SHA_160_X86_32::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)Botan::SHA_160_X86_32::~SHA_160_X86_32()@Base 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::SHA_160_X86_64::clone() const@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::SHA_160_X86_64::compress_n(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"Botan::SHA_160_X86_64::~SHA_160_X86_64()@Base" 1.10.10
 (c++)"Botan::SHA_224::SHA_224()@Base" 1.10.10
 (c++)"Botan::SHA_224::clear()@Base" 1.10.10
 (c++)"Botan::SHA_224::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SHA_224::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SHA_224::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SHA_224::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SHA_224::output_length() const@Base" 1.10.10
 (c++)"Botan::SHA_224::~SHA_224()@Base" 1.10.10
 (c++)"Botan::SHA_256::SHA_256()@Base" 1.10.10
 (c++)"Botan::SHA_256::clear()@Base" 1.10.10
 (c++)"Botan::SHA_256::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SHA_256::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SHA_256::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SHA_256::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SHA_256::output_length() const@Base" 1.10.10
 (c++)"Botan::SHA_256::~SHA_256()@Base" 1.10.10
 (c++)"Botan::SHA_384::SHA_384()@Base" 1.10.10
 (c++)"Botan::SHA_384::clear()@Base" 1.10.10
 (c++)"Botan::SHA_384::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SHA_384::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SHA_384::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SHA_384::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SHA_384::output_length() const@Base" 1.10.10
 (c++)"Botan::SHA_384::~SHA_384()@Base" 1.10.10
 (c++)"Botan::SHA_512::SHA_512()@Base" 1.10.10
 (c++)"Botan::SHA_512::clear()@Base" 1.10.10
 (c++)"Botan::SHA_512::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SHA_512::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SHA_512::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SHA_512::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SHA_512::output_length() const@Base" 1.10.10
 (c++)"Botan::SHA_512::~SHA_512()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SRP6_Server_Session::step1(Botan::BigInt const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::SRP6_Server_Session::step2(Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::SSL3_MAC::SSL3_MAC(Botan::HashFunction*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SSL3_MAC::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SSL3_MAC::clear()@Base" 1.10.10
 (c++)"Botan::SSL3_MAC::clone() const@Base" 1.10.10
 (c++)"Botan::SSL3_MAC::final_result(unsigned char*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SSL3_MAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SSL3_MAC::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SSL3_MAC::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SSL3_MAC::output_length() const@Base" 1.10.10
 (c++)"Botan::SSL3_MAC::~SSL3_MAC()@Base" 1.10.10
 (c++)"Botan::SSL3_PRF::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SSL3_PRF::derive(unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SSL3_PRF::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SSL3_PRF::~SSL3_PRF()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Salsa20::cipher(unsigned char const*, unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Salsa20::clear()@Base" 1.10.10
 (c++)"Botan::Salsa20::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Salsa20::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Salsa20::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Salsa20::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Salsa20::set_iv(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Salsa20::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++)"Botan::Salsa20::~Salsa20()@Base" 1.10.10
 (c++)"Botan::SecureQueue::SecureQueue()@Base" 1.10.10
 (c++)"Botan::SecureQueue::SecureQueue(Botan::SecureQueue const&)@Base" 1.10.10
 (c++)"Botan::SecureQueue::attachable()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SecureQueue::check_available(unsigned int)@Base" 1.10.10
 (c++)"Botan::SecureQueue::destroy()@Base" 1.10.10
 (c++)"Botan::SecureQueue::end_of_data() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::SecureQueue::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::SecureQueue::operator=(Botan::SecureQueue const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SecureQueue::peek(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SecureQueue::read(unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SecureQueue::size() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SecureQueue::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::SecureQueue::~SecureQueue()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Self_Test_Failure::Self_Test_Failure(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Self_Test_Failure::~Self_Test_Failure()@Base" 1.10.10
 (c++)"Botan::Serpent::Serpent()@Base" 1.10.10
 (c++)"Botan::Serpent::clear()@Base" 1.10.10
 (c++)"Botan::Serpent::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Serpent::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Serpent::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Serpent::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Serpent::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Serpent::~Serpent()@Base" 1.10.10
 (c++)"Botan::Serpent_SIMD::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Serpent_SIMD::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Serpent_SIMD::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++)"Botan::Serpent_SIMD::parallelism() const@Base" 1.10.10
 (c++)"Botan::Serpent_SIMD::~Serpent_SIMD()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::Serpent_X86_32::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::Serpent_X86_32::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::Serpent_X86_32::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"Botan::Serpent_X86_32::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)Botan::Serpent_X86_32::~Serpent_X86_32()@Base 1.10.10
 (c++)"Botan::SessionKeys::SessionKeys()@Base" 1.10.10
 (c++)"Botan::SessionKeys::SessionKeys(Botan::CipherSuite const&, Botan::Version_Code, Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::SessionKeys::client_cipher_key() const@Base" 1.10.10
 (c++)"Botan::SessionKeys::client_iv() const@Base" 1.10.10
 (c++)"Botan::SessionKeys::client_mac_key() const@Base" 1.10.10
 (c++)"Botan::SessionKeys::master_secret() const@Base" 1.10.10
 (c++)"Botan::SessionKeys::server_cipher_key() const@Base" 1.10.10
 (c++)"Botan::SessionKeys::server_iv() const@Base" 1.10.10
 (c++)"Botan::SessionKeys::server_mac_key() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SessionKeys::ssl3_keygen(unsigned int, Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SessionKeys::tls1_keygen(unsigned int, Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::SessionKeys::~SessionKeys()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Skein_512::Skein_512(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Skein_512::add_data(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Skein_512::clear()@Base" 1.10.10
 (c++)"Botan::Skein_512::clone() const@Base" 1.10.10
 (c++)"Botan::Skein_512::final_result(unsigned char*)@Base" 1.10.10
 (c++)"Botan::Skein_512::hash_block_size() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Skein_512::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Skein_512::output_length() const@Base" 1.10.10
 (c++)"Botan::Skein_512::~Skein_512()@Base" 1.10.10
 (c++)"Botan::Skipjack::Skipjack()@Base" 1.10.10
 (c++)"Botan::Skipjack::clear()@Base" 1.10.10
 (c++)"Botan::Skipjack::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Skipjack::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Skipjack::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Skipjack::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Skipjack::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Skipjack::~Skipjack()@Base" 1.10.10
 (c++)"Botan::Square::ALog@Base" 1.10.10
 (c++)"Botan::Square::Log@Base" 1.10.10
 (c++)"Botan::Square::SD@Base" 1.10.10
 (c++)"Botan::Square::SE@Base" 1.10.10
 (c++)"Botan::Square::Square()@Base" 1.10.10
 (c++)"Botan::Square::TD0@Base" 1.10.10
 (c++)"Botan::Square::TD1@Base" 1.10.10
 (c++)"Botan::Square::TD2@Base" 1.10.10
 (c++)"Botan::Square::TD3@Base" 1.10.10
 (c++)"Botan::Square::TE0@Base" 1.10.10
 (c++)"Botan::Square::TE1@Base" 1.10.10
 (c++)"Botan::Square::TE2@Base" 1.10.10
 (c++)"Botan::Square::TE3@Base" 1.10.10
 (c++)"Botan::Square::clear()@Base" 1.10.10
 (c++)"Botan::Square::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Square::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Square::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Square::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Square::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Square::transform(unsigned int*)@Base" 1.10.10
 (c++)"Botan::Square::~Square()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::StreamCipher::set_iv(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::StreamCipher::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++)"Botan::StreamCipher_Filter::StreamCipher_Filter(Botan::StreamCipher*)@Base" 1.10.10
 (c++)"Botan::StreamCipher_Filter::StreamCipher_Filter(Botan::StreamCipher*, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::StreamCipher_Filter::StreamCipher_Filter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::StreamCipher_Filter::StreamCipher_Filter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::StreamCipher_Filter::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::StreamCipher_Filter::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::StreamCipher_Filter::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::StreamCipher_Filter::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::StreamCipher_Filter::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::StreamCipher_Filter::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::StreamCipher_Filter::~StreamCipher_Filter()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Stream_IO_Error::Stream_IO_Error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::Stream_IO_Error::~Stream_IO_Error()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::SymmetricAlgorithm::set_key(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::TEA::TEA()@Base" 1.10.10
 (c++)"Botan::TEA::clear()@Base" 1.10.10
 (c++)"Botan::TEA::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TEA::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TEA::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TEA::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::TEA::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::TEA::~TEA()@Base" 1.10.10
 (c++)"Botan::TLS_12_PRF::TLS_12_PRF(Botan::MessageAuthenticationCode*)@Base" 1.10.10
 (c++)"Botan::TLS_12_PRF::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TLS_12_PRF::derive(unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::TLS_12_PRF::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::TLS_12_PRF::~TLS_12_PRF()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TLS_Client::TLS_Client(std::tr1::function<unsigned int (unsigned char*, unsigned int)>, std::tr1::function<void (unsigned char const*, unsigned int)>, Botan::TLS_Policy const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::TLS_Client::add_client_cert(Botan::X509_Certificate const&, Botan::Private_Key*)@Base" 1.10.10
 (c++)"Botan::TLS_Client::close()@Base" 1.10.10
 (c++)"Botan::TLS_Client::close(Botan::Alert_Level, Botan::Alert_Type)@Base" 1.10.10
 (c++)"Botan::TLS_Client::do_handshake()@Base" 1.10.10
 (c++)"Botan::TLS_Client::initialize()@Base" 1.10.10
 (c++)"Botan::TLS_Client::is_closed() const@Base" 1.10.10
 (c++)"Botan::TLS_Client::peer_cert_chain() const@Base" 1.10.10
 (c++)"Botan::TLS_Client::process_handshake_msg(Botan::Handshake_Type, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TLS_Client::read(unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::TLS_Client::read_handshake(unsigned char, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::TLS_Client::state_machine()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TLS_Client::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::TLS_Client::~TLS_Client()@Base" 1.10.10
 (c++)"Botan::TLS_Exception::~TLS_Exception()@Base" 1.10.10
 (c++)"Botan::TLS_PRF::TLS_PRF()@Base" 1.10.10
 (c++)"Botan::TLS_PRF::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TLS_PRF::derive(unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::TLS_PRF::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::TLS_PRF::~TLS_PRF()@Base" 1.10.10
 (c++)"Botan::TLS_Policy::allow_edh_dsa() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::allow_edh_rsa() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::allow_static_rsa() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::choose_compression(std::vector<unsigned char, std::allocator<unsigned char> > const&) const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::choose_suite(std::vector<unsigned short, std::allocator<unsigned short> > const&, bool, bool) const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::ciphersuites() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::compression() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::dh_group() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::min_version() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::pref_version() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::require_client_auth() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::rsa_export_keysize() const@Base" 1.10.10
 (c++)"Botan::TLS_Policy::suite_list(bool, bool, bool) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TLS_Server::TLS_Server(std::tr1::function<unsigned int (unsigned char*, unsigned int)>, std::tr1::function<void (unsigned char const*, unsigned int)>, Botan::TLS_Policy const&, Botan::RandomNumberGenerator&, Botan::X509_Certificate const&, Botan::Private_Key const&)@Base" 1.10.10
 (c++)"Botan::TLS_Server::close()@Base" 1.10.10
 (c++)"Botan::TLS_Server::close(Botan::Alert_Level, Botan::Alert_Type)@Base" 1.10.10
 (c++)"Botan::TLS_Server::do_handshake()@Base" 1.10.10
 (c++)"Botan::TLS_Server::is_closed() const@Base" 1.10.10
 (c++)"Botan::TLS_Server::peer_cert_chain() const@Base" 1.10.10
 (c++)"Botan::TLS_Server::process_handshake_msg(Botan::Handshake_Type, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TLS_Server::read(unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::TLS_Server::read_handshake(unsigned char, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::TLS_Server::state_machine()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TLS_Server::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::TLS_Server::~TLS_Server()@Base" 1.10.10
 (c++)"Botan::Tiger::SBOX1@Base" 1.10.10
 (c++)"Botan::Tiger::SBOX2@Base" 1.10.10
 (c++)"Botan::Tiger::SBOX3@Base" 1.10.10
 (c++)"Botan::Tiger::SBOX4@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Tiger::Tiger(unsigned int, unsigned int)@Base" 1.10.10
 (c++)"Botan::Tiger::clear()@Base" 1.10.10
 (c++)"Botan::Tiger::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Tiger::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Tiger::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Tiger::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Tiger::output_length() const@Base" 1.10.10
 (c++)"Botan::Tiger::pass(unsigned long long&, unsigned long long&, unsigned long long&, Botan::MemoryRegion<unsigned long long> const&, unsigned char)@Base" 1.10.10
 (c++)"Botan::Tiger::~Tiger()@Base" 1.10.10
 (c++)"Botan::TripleDES::TripleDES()@Base" 1.10.10
 (c++)"Botan::TripleDES::clear()@Base" 1.10.10
 (c++)"Botan::TripleDES::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TripleDES::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TripleDES::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::TripleDES::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::TripleDES::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::TripleDES::~TripleDES()@Base" 1.10.10
 (c++)"Botan::Turing::Q_BOX@Base" 1.10.10
 (c++)"Botan::Turing::SBOX@Base" 1.10.10
 (c++)"Botan::Turing::Turing()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Turing::cipher(unsigned char const*, unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Turing::clear()@Base" 1.10.10
 (c++)"Botan::Turing::clone() const@Base" 1.10.10
 (c++)"Botan::Turing::fixedS(unsigned int)@Base" 1.10.10
 (c++)"Botan::Turing::generate()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Turing::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Turing::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Turing::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Turing::set_iv(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Turing::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++)"Botan::Turing::~Turing()@Base" 1.10.10
 (c++)"Botan::Twofish::EXP_TO_POLY@Base" 1.10.10
 (c++)"Botan::Twofish::MDS0@Base" 1.10.10
 (c++)"Botan::Twofish::MDS1@Base" 1.10.10
 (c++)"Botan::Twofish::MDS2@Base" 1.10.10
 (c++)"Botan::Twofish::MDS3@Base" 1.10.10
 (c++)"Botan::Twofish::POLY_TO_EXP@Base" 1.10.10
 (c++)"Botan::Twofish::Q0@Base" 1.10.10
 (c++)"Botan::Twofish::Q1@Base" 1.10.10
 (c++)"Botan::Twofish::RS@Base" 1.10.10
 (c++)"Botan::Twofish::Twofish()@Base" 1.10.10
 (c++)"Botan::Twofish::clear()@Base" 1.10.10
 (c++)"Botan::Twofish::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Twofish::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Twofish::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Twofish::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Twofish::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Twofish::rs_mul(unsigned char*, unsigned char, unsigned int)@Base" 1.10.10
 (c++)"Botan::Twofish::~Twofish()@Base" 1.10.10
 (c++)"Botan::Unexpected_Message::~Unexpected_Message()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::User_Interface::User_Interface(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::User_Interface::get_passphrase(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::User_Interface::UI_Result&) const@Base" 1.10.10
 (c++)"Botan::User_Interface::~User_Interface()@Base" 1.10.10
 (c++)"Botan::Whirlpool::C0@Base" 1.10.10
 (c++)"Botan::Whirlpool::C1@Base" 1.10.10
 (c++)"Botan::Whirlpool::C2@Base" 1.10.10
 (c++)"Botan::Whirlpool::C3@Base" 1.10.10
 (c++)"Botan::Whirlpool::C4@Base" 1.10.10
 (c++)"Botan::Whirlpool::C5@Base" 1.10.10
 (c++)"Botan::Whirlpool::C6@Base" 1.10.10
 (c++)"Botan::Whirlpool::C7@Base" 1.10.10
 (c++)"Botan::Whirlpool::Whirlpool()@Base" 1.10.10
 (c++)"Botan::Whirlpool::clear()@Base" 1.10.10
 (c++)"Botan::Whirlpool::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Whirlpool::compress_n(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Whirlpool::copy_out(unsigned char*)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Whirlpool::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Whirlpool::output_length() const@Base" 1.10.10
 (c++)"Botan::Whirlpool::~Whirlpool()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::WiderWake_41_BE::cipher(unsigned char const*, unsigned char*, unsigned int)@Base" 1.10.10
 (c++)"Botan::WiderWake_41_BE::clear()@Base" 1.10.10
 (c++)"Botan::WiderWake_41_BE::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::WiderWake_41_BE::generate(unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::WiderWake_41_BE::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::WiderWake_41_BE::key_spec() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::WiderWake_41_BE::name[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::WiderWake_41_BE::set_iv(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::WiderWake_41_BE::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++)"Botan::WiderWake_41_BE::~WiderWake_41_BE()@Base" 1.10.10
 (c++)"Botan::X509::BER_encode(Botan::Public_Key const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509::PEM_encode[abi:cxx11](Botan::Public_Key const&)@Base" 1.10.10
 (c++)"Botan::X509::copy_key(Botan::Public_Key const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509::create_cert_req(Botan::X509_Cert_Options const&, Botan::Private_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509::create_self_signed_cert(Botan::X509_Cert_Options const&, Botan::Private_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"Botan::X509::find_constraints(Botan::Public_Key const&, Botan::Key_Constraints)@Base" 1.10.10
 (c++)"Botan::X509::load_key(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::X509::load_key(Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509::load_key(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_CA::X509_CA(Botan::X509_Certificate const&, Botan::Private_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::X509_CA::ca_certificate() const@Base" 1.10.10
 (c++)"Botan::X509_CA::make_cert(Botan::PK_Signer*, Botan::RandomNumberGenerator&, Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&, Botan::X509_Time const&, Botan::X509_Time const&, Botan::X509_DN const&, Botan::X509_DN const&, Botan::Extensions const&)@Base" 1.10.10
 (c++)"Botan::X509_CA::make_crl(std::vector<Botan::CRL_Entry, std::allocator<Botan::CRL_Entry> > const&, unsigned int, unsigned int, Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++)"Botan::X509_CA::new_crl(Botan::RandomNumberGenerator&, unsigned int) const@Base" 1.10.10
 (c++)"Botan::X509_CA::sign_request(Botan::PKCS10_Request const&, Botan::RandomNumberGenerator&, Botan::X509_Time const&, Botan::X509_Time const&)@Base" 1.10.10
 (c++)"Botan::X509_CA::update_crl(Botan::X509_CRL const&, std::vector<Botan::CRL_Entry, std::allocator<Botan::CRL_Entry> > const&, Botan::RandomNumberGenerator&, unsigned int) const@Base" 1.10.10
 (c++)"Botan::X509_CA::~X509_CA()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_CRL* std::__uninitialized_copy<false>::__uninit_copy<Botan::X509_CRL*, Botan::X509_CRL*>(Botan::X509_CRL*, Botan::X509_CRL*, Botan::X509_CRL*)@Base" 1.10.10
 (c++)"Botan::X509_CRL::X509_CRL(Botan::DataSource&, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_CRL::X509_CRL(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_CRL::X509_CRL_Error::X509_CRL_Error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::X509_CRL::X509_CRL_Error::~X509_CRL_Error()@Base" 1.10.10
 (c++)"Botan::X509_CRL::authority_key_id() const@Base" 1.10.10
 (c++)"Botan::X509_CRL::crl_number() const@Base" 1.10.10
 (c++)"Botan::X509_CRL::force_decode()@Base" 1.10.10
 (c++)"Botan::X509_CRL::get_revoked() const@Base" 1.10.10
 (c++)"Botan::X509_CRL::issuer_dn() const@Base" 1.10.10
 (c++)"Botan::X509_CRL::next_update() const@Base" 1.10.10
 (c++)"Botan::X509_CRL::this_update() const@Base" 1.10.10
 (c++)"Botan::X509_CRL::~X509_CRL()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::X509_Cert_Options::CA_key(unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Cert_Options::X509_Cert_Options(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::X509_Cert_Options::add_constraints(Botan::Key_Constraints)@Base" 1.10.10
 (c++)"Botan::X509_Cert_Options::add_ex_constraint(Botan::OID const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Cert_Options::add_ex_constraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Cert_Options::not_after(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Cert_Options::not_before(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::X509_Cert_Options::sanity_check() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::X509_Certificate(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::X509_Certificate::X509_Certificate(Botan::X509_Certificate const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Certificate::X509_Certificate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::X509_Certificate::authority_key_id() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::constraints() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Certificate::end_time[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Certificate::ex_constraints[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::force_decode()@Base" 1.10.10
 (c++)"Botan::X509_Certificate::is_CA_cert() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::issuer_dn() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Certificate::issuer_info(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::operator==(Botan::X509_Certificate const&) const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::path_limit() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Certificate::policies[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::serial_number() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Certificate::start_time[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::subject_dn() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Certificate::subject_info(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::subject_key_id() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::subject_public_key() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Certificate::to_string[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::x509_version() const@Base" 1.10.10
 (c++)"Botan::X509_Certificate::~X509_Certificate()@Base" 1.10.10
 (c++)"Botan::X509_DN::X509_DN()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_DN::X509_DN(std::multimap<Botan::OID, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_DN::X509_DN(std::multimap<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_DN::add_attribute(Botan::OID const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_DN::add_attribute(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_DN::contents[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X509_DN::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_DN::deref_info_field(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::X509_DN::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_DN::get_attribute(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_DN::get_attributes[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X509_DN::get_bits() const@Base" 1.10.10
 (c++)"Botan::X509_DN::~X509_DN()@Base" 1.10.10
 (c++)"Botan::X509_Object::BER_encode() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Object::PEM_encode[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Object::X509_Object(Botan::DataSource&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Object::X509_Object(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::X509_Object::check_signature(Botan::Public_Key&) const@Base" 1.10.10
 (c++)"Botan::X509_Object::check_signature(Botan::Public_Key*) const@Base" 1.10.10
 (c++)"Botan::X509_Object::decode_info(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::X509_Object::do_decode()@Base" 1.10.10
 (c++)"Botan::X509_Object::encode(Botan::Pipe&, Botan::X509_Encoding) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Object::hash_used_for_signature[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Object::init(Botan::DataSource&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::X509_Object::make_signed(Botan::PK_Signer*, Botan::RandomNumberGenerator&, Botan::AlgorithmIdentifier const&, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++)"Botan::X509_Object::signature() const@Base" 1.10.10
 (c++)"Botan::X509_Object::signature_algorithm() const@Base" 1.10.10
 (c++)"Botan::X509_Object::tbs_data() const@Base" 1.10.10
 (c++)"Botan::X509_Object::~X509_Object()@Base" 1.10.10
 (c++)"Botan::X509_Store::CRL_Data* std::__uninitialized_copy<false>::__uninit_copy<Botan::X509_Store::CRL_Data*, Botan::X509_Store::CRL_Data*>(Botan::X509_Store::CRL_Data*, Botan::X509_Store::CRL_Data*, Botan::X509_Store::CRL_Data*)@Base" 1.10.10
 (c++)"Botan::X509_Store::CRL_Data::CRL_Data(Botan::X509_Store::CRL_Data const&)@Base" 1.10.10
 (c++)"Botan::X509_Store::CRL_Data::operator!=(Botan::X509_Store::CRL_Data const&) const@Base" 1.10.10
 (c++)"Botan::X509_Store::CRL_Data::operator<(Botan::X509_Store::CRL_Data const&) const@Base" 1.10.10
 (c++)"Botan::X509_Store::CRL_Data::operator=(Botan::X509_Store::CRL_Data const&)@Base" 1.10.10
 (c++)"Botan::X509_Store::CRL_Data::operator==(Botan::X509_Store::CRL_Data const&) const@Base" 1.10.10
 (c++)"Botan::X509_Store::CRL_Data::~CRL_Data()@Base" 1.10.10
 (c++)"Botan::X509_Store::Cert_Info* std::__uninitialized_copy<false>::__uninit_copy<Botan::X509_Store::Cert_Info*, Botan::X509_Store::Cert_Info*>(Botan::X509_Store::Cert_Info*, Botan::X509_Store::Cert_Info*, Botan::X509_Store::Cert_Info*)@Base" 1.10.10
 (c++)"Botan::X509_Store::Cert_Info::Cert_Info(Botan::X509_Certificate const&, bool)@Base" 1.10.10
 (c++)"Botan::X509_Store::Cert_Info::is_trusted() const@Base" 1.10.10
 (c++)"Botan::X509_Store::Cert_Info::is_verified(unsigned int) const@Base" 1.10.10
 (c++)"Botan::X509_Store::Cert_Info::set_result(Botan::X509_Code) const@Base" 1.10.10
 (c++)"Botan::X509_Store::Cert_Info::verify_result() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Store::PEM_encode[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X509_Store::X509_Store(Botan::X509_Store const&)@Base" 1.10.10
 (c++)"Botan::X509_Store::X509_Store(unsigned int, unsigned int)@Base" 1.10.10
 (c++)"Botan::X509_Store::add_cert(Botan::X509_Certificate const&, bool)@Base" 1.10.10
 (c++)"Botan::X509_Store::add_certs(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::X509_Store::add_crl(Botan::X509_CRL const&)@Base" 1.10.10
 (c++)"Botan::X509_Store::add_new_certstore(Botan::Certificate_Store*)@Base" 1.10.10
 (c++)"Botan::X509_Store::add_trusted_certs(Botan::DataSource&)@Base" 1.10.10
 (c++)"Botan::X509_Store::check_sig(Botan::X509_Object const&, Botan::Public_Key*)@Base" 1.10.10
 (c++)"Botan::X509_Store::check_sig(Botan::X509_Store::Cert_Info const&, Botan::X509_Store::Cert_Info const&) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::X509_Store::construct_cert_chain(Botan::X509_Certificate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, bool)@Base" 1.10.10
 (c++)"Botan::X509_Store::do_add_certs(Botan::DataSource&, bool)@Base" 1.10.10
 (c++)"Botan::X509_Store::find_cert(Botan::X509_DN const&, Botan::MemoryRegion<unsigned char> const&) const@Base" 1.10.10
 (c++)"Botan::X509_Store::find_parent_of(Botan::X509_Certificate const&)@Base" 1.10.10
 (c++)"Botan::X509_Store::get_cert_chain(Botan::X509_Certificate const&)@Base" 1.10.10
 (c++)"Botan::X509_Store::is_revoked(Botan::X509_Certificate const&) const@Base" 1.10.10
 (c++)"Botan::X509_Store::recompute_revoked_info() const@Base" 1.10.10
 (c++)"Botan::X509_Store::validate_cert(Botan::X509_Certificate const&, Botan::X509_Store::Cert_Usage)@Base" 1.10.10
 (c++)"Botan::X509_Store::~X509_Store()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Time::X509_Time(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Time::X509_Time(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::X509_Time::X509_Time(unsigned long long)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Time::as_string[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X509_Time::cmp(Botan::X509_Time const&) const@Base" 1.10.10
 (c++)"Botan::X509_Time::decode_from(Botan::BER_Decoder&)@Base" 1.10.10
 (c++)"Botan::X509_Time::encode_into(Botan::DER_Encoder&) const@Base" 1.10.10
 (c++)"Botan::X509_Time::passes_sanity_check() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Time::readable_string[abi:cxx11]() const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Time::set_to(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X509_Time::set_to(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::ASN1_Tag)@Base" 1.10.10
 (c++)"Botan::X509_Time::time_is_set() const@Base" 1.10.10
 (c++)"Botan::X509_Time::~X509_Time()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X942_PRF::X942_PRF(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::X942_PRF::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::X942_PRF::derive(unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int) const@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::X942_PRF::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::X942_PRF::~X942_PRF()@Base" 1.10.10
 (c++)"Botan::XTEA::XTEA()@Base" 1.10.10
 (c++)"Botan::XTEA::clear()@Base" 1.10.10
 (c++)"Botan::XTEA::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTEA::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTEA::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTEA::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::XTEA::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::XTEA::~XTEA()@Base" 1.10.10
 (c++)"Botan::XTEA_SIMD::clone() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTEA_SIMD::decrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTEA_SIMD::encrypt_n(unsigned char const*, unsigned char*, unsigned int) const@Base" 1.10.10
 (c++)"Botan::XTEA_SIMD::parallelism() const@Base" 1.10.10
 (c++)"Botan::XTEA_SIMD::~XTEA_SIMD()@Base" 1.10.10
 (c++)"Botan::XTS_Decryption::XTS_Decryption(Botan::BlockCipher*)@Base" 1.10.10
 (c++)"Botan::XTS_Decryption::XTS_Decryption(Botan::BlockCipher*, Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Decryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Decryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::XTS_Decryption::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::XTS_Decryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::XTS_Decryption::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::XTS_Decryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Decryption::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Decryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Decryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::XTS_Decryption::~XTS_Decryption()@Base" 1.10.10
 (c++)"Botan::XTS_Encryption::XTS_Encryption(Botan::BlockCipher*)@Base" 1.10.10
 (c++)"Botan::XTS_Encryption::XTS_Encryption(Botan::BlockCipher*, Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Encryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Encryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::XTS_Encryption::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::XTS_Encryption::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::XTS_Encryption::set_iv(Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::XTS_Encryption::set_key(Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Encryption::valid_iv_length(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Encryption::valid_keylength(unsigned int) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::XTS_Encryption::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::XTS_Encryption::~XTS_Encryption()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Zlib_Compression::Zlib_Compression(unsigned int)@Base" 1.10.10
 (c++)"Botan::Zlib_Compression::clear()@Base" 1.10.10
 (c++)"Botan::Zlib_Compression::end_msg()@Base" 1.10.10
 (c++)"Botan::Zlib_Compression::flush()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Zlib_Compression::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Zlib_Compression::start_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Zlib_Compression::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Zlib_Compression::~Zlib_Compression()@Base" 1.10.10
 (c++)"Botan::Zlib_Decompression::Zlib_Decompression()@Base" 1.10.10
 (c++)"Botan::Zlib_Decompression::clear()@Base" 1.10.10
 (c++)"Botan::Zlib_Decompression::end_msg()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::Zlib_Decompression::name[abi:cxx11]() const@Base" 1.10.10
 (c++)"Botan::Zlib_Decompression::start_msg()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::Zlib_Decompression::write(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++)"Botan::Zlib_Decompression::~Zlib_Decompression()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::algorithm_benchmark(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::Algorithm_Factory&, Botan::RandomNumberGenerator&, unsigned int, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::algorithm_kat(Botan::SCAN_Name const&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, Botan::Algorithm_Factory&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::aont_package(Botan::RandomNumberGenerator&, Botan::BlockCipher*, unsigned char const*, unsigned int, unsigned char*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::aont_unpackage(Botan::BlockCipher*, unsigned char const*, unsigned int, unsigned char*)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::base64_decode(char const*, unsigned int, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::base64_decode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::base64_decode(unsigned char*, char const*, unsigned int, bool)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::base64_decode(unsigned char*, char const*, unsigned int, unsigned int&, bool, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::base64_decode(unsigned char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::base64_encode(char*, unsigned char const*, unsigned int, unsigned int&, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::base64_encode[abi:cxx11](Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::base64_encode[abi:cxx11](unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::block_size_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::calendar_value(unsigned long long)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::check_bcrypt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::check_passhash9(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::choose_sig_format(Botan::Private_Key const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::AlgorithmIdentifier&)@Base" 1.10.10
 (c++)"Botan::confirm_startup_self_tests(Botan::Algorithm_Factory&)@Base" 1.10.10
 (c++)"Botan::create_alt_name(Botan::Data_Store const&)@Base" 1.10.10
 (c++)"Botan::create_dn(Botan::Data_Store const&)@Base" 1.10.10
 (c++)"Botan::divide(Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt&, Botan::BigInt&)@Base" 1.10.10
 (c++)"Botan::gcd(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::generate_bcrypt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::RandomNumberGenerator&, unsigned short)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::generate_dsa_primes(Botan::RandomNumberGenerator&, Botan::Algorithm_Factory&, Botan::BigInt&, Botan::BigInt&, unsigned int, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::generate_dsa_primes(Botan::RandomNumberGenerator&, Botan::Algorithm_Factory&, Botan::BigInt&, Botan::BigInt&, unsigned int, unsigned int, Botan::MemoryRegion<unsigned char> const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::generate_passhash9(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::RandomNumberGenerator&, unsigned short, unsigned char)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::generate_srp6_verifier(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::MemoryRegion<unsigned char> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::get_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::Cipher_Dir)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::get_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::OctetString const&, Botan::Cipher_Dir)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::get_cipher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::OctetString const&, Botan::OctetString const&, Botan::Cipher_Dir)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::get_eme(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::get_emsa(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::get_kdf(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::get_nanoseconds_clock()@Base" 1.10.10
 (c++)"Botan::get_pbe(Botan::OID const&, Botan::DataSource&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::get_pbe(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::get_pbkdf(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::have_algorithm(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::hex_decode(char const*, unsigned int, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::hex_decode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::hex_decode(unsigned char*, char const*, unsigned int, bool)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::hex_decode(unsigned char*, char const*, unsigned int, unsigned int&, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::hex_decode(unsigned char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::hex_encode(char*, unsigned char const*, unsigned int, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::hex_encode[abi:cxx11](Botan::MemoryRegion<unsigned char> const&, bool)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::hex_encode[abi:cxx11](unsigned char const*, unsigned int, bool)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ieee1363_hash_id(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::inverse_mod(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::ipv4_to_string[abi:cxx11](unsigned int)@Base" 1.10.10
 (c++)"Botan::jacobi(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::keylength_multiple_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::lcm(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::low_zero_bits(Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::max_keylength_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::min_keylength_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::mul_add(Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::multi_exponentiate(Botan::PointGFp const&, Botan::BigInt const&, Botan::PointGFp const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::operator!=(Botan::AlgorithmIdentifier const&, Botan::AlgorithmIdentifier const&)@Base" 1.10.10
 (c++)"Botan::operator!=(Botan::CRL_Entry const&, Botan::CRL_Entry const&)@Base" 1.10.10
 (c++)"Botan::operator!=(Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::operator!=(Botan::X509_Certificate const&, Botan::X509_Certificate const&)@Base" 1.10.10
 (c++)"Botan::operator!=(Botan::X509_DN const&, Botan::X509_DN const&)@Base" 1.10.10
 (c++)"Botan::operator!=(Botan::X509_Time const&, Botan::X509_Time const&)@Base" 1.10.10
 (c++)"Botan::operator%(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !sparc64)"Botan::operator%(Botan::BigInt const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::operator*(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::operator*(Botan::BigInt const&, Botan::PointGFp const&)@Base" 1.10.10
 (c++)"Botan::operator+(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::operator+(Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::operator-(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::operator/(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::operator<(Botan::X509_DN const&, Botan::X509_DN const&)@Base" 1.10.10
 (c++)"Botan::operator<(Botan::X509_Time const&, Botan::X509_Time const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::operator<<(Botan::BigInt const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::operator<<(int, Botan::Pipe&)@Base" 1.10.10
 (c++)"Botan::operator<<(std::basic_ostream<char, std::char_traits<char> >&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::operator<<(std::basic_ostream<char, std::char_traits<char> >&, Botan::Pipe&)@Base" 1.10.10
 (c++)"Botan::operator<=(Botan::X509_Time const&, Botan::X509_Time const&)@Base" 1.10.10
 (c++)"Botan::operator==(Botan::AlgorithmIdentifier const&, Botan::AlgorithmIdentifier const&)@Base" 1.10.10
 (c++)"Botan::operator==(Botan::CRL_Entry const&, Botan::CRL_Entry const&)@Base" 1.10.10
 (c++)"Botan::operator==(Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++)"Botan::operator==(Botan::X509_DN const&, Botan::X509_DN const&)@Base" 1.10.10
 (c++)"Botan::operator==(Botan::X509_Time const&, Botan::X509_Time const&)@Base" 1.10.10
 (c++)"Botan::operator>(Botan::X509_Time const&, Botan::X509_Time const&)@Base" 1.10.10
 (c++)"Botan::operator>=(Botan::X509_Time const&, Botan::X509_Time const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::operator>>(Botan::BigInt const&, unsigned int)@Base" 1.10.10
 (c++)"Botan::operator>>(int, Botan::Pipe&)@Base" 1.10.10
 (c++)"Botan::operator>>(std::basic_istream<char, std::char_traits<char> >&, Botan::BigInt&)@Base" 1.10.10
 (c++)"Botan::operator>>(std::basic_istream<char, std::char_traits<char> >&, Botan::Pipe&)@Base" 1.10.10
 (c++)"Botan::operator^(Botan::OctetString const&, Botan::OctetString const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::output_length_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::parse_algorithm_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::parse_asn1_oid(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::passes_self_tests(Botan::Algorithm_Factory&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::pkcs_hash_id(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::power_mod(Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::primality_test(Botan::BigInt const&, Botan::RandomNumberGenerator&, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::random_prime(Botan::RandomNumberGenerator&, unsigned int, Botan::BigInt const&, unsigned int, unsigned int)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::random_safe_prime(Botan::RandomNumberGenerator&, unsigned int)@Base" 1.10.10
 (c++)"Botan::ressol(Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::rfc3394_keyunwrap(Botan::MemoryRegion<unsigned char> const&, Botan::OctetString const&, Botan::Algorithm_Factory&)@Base" 1.10.10
 (c++)"Botan::rfc3394_keywrap(Botan::MemoryRegion<unsigned char> const&, Botan::OctetString const&, Botan::Algorithm_Factory&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::split_on(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)@Base" 1.10.10
 (c++)"Botan::square(Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::srp6_client_agree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Botan::MemoryRegion<unsigned char> const&, Botan::BigInt const&, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::srp6_group_identifier[abi:cxx11](Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::string_to_ipv4(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::sub_mul(Botan::BigInt const&, Botan::BigInt const&, Botan::BigInt const&)@Base" 1.10.10
 (c++)"Botan::system_time()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::timespec_to_u32bit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"Botan::to_string[abi:cxx11](unsigned long long, unsigned int)@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::to_u32bit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"Botan::version_datestamp()@Base" 1.10.10
 (c++)"Botan::version_major()@Base" 1.10.10
 (c++)"Botan::version_minor()@Base" 1.10.10
 (c++)"Botan::version_patch()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::version_string[abi:cxx11]()@Base" 1.10.10
 (c++|arch=!sparc64)"Botan::x500_name_cmp(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++)"VTT for Botan::DH_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::DH_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::DL_Scheme_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::DL_Scheme_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::DSA_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::DSA_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::ECDH_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::ECDH_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::ECDSA_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::ECDSA_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::EC_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::EC_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::ElGamal_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::ElGamal_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::GOST_3410_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::GOST_3410_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::IF_Scheme_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::IF_Scheme_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::NR_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::NR_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::Private_Key@Base" 1.10.10
 (c++)"VTT for Botan::RSA_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::RSA_PublicKey@Base" 1.10.10
 (c++)"VTT for Botan::RW_PrivateKey@Base" 1.10.10
 (c++)"VTT for Botan::RW_PublicKey@Base" 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10DataSource12discard_nextEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan10Data_Store3addERKSsRKNS_12MemoryRegionIhEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan10Data_Store3addERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan10Data_Store3addERKSsj@Base 1.10.10
 (arch=sparc64)_ZN5Botan10Data_Store3addERKSt8multimapISsSsSt4lessISsESaISt4pairIKSsSsEEE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan10GOST_34_1110compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10GOST_34_118add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan10MAC_Filter5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan10MAC_FilterC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_11OctetStringEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan10MAC_FilterC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan10MAC_FilterC1ERKSsRKNS_11OctetStringEm@Base 1.10.10
 (arch=sparc64)_ZN5Botan10MAC_FilterC1ERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan10MAC_FilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_11OctetStringEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan10MAC_FilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan10MAC_FilterC2ERKSsRKNS_11OctetStringEm@Base 1.10.10
 (arch=sparc64)_ZN5Botan10MAC_FilterC2ERKSsm@Base 1.10.10
 (arch=sparc64)_ZN5Botan10PGP_decodeERNS_10DataSourceERSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan10PGP_decodeERNS_10DataSourceERSsRSt3mapISsSsSt4lessISsESaISt4pairIKSsSsEEE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan10PGP_encodeEPKhmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan10PGP_encodeEPKhmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt3mapIS7_S7_St4lessIS7_ESaISt4pairIS8_S7_EEE@Base 1.10.12
 (arch=sparc64)_ZN5Botan10PGP_encodeEPKhmRKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan10PGP_encodeEPKhmRKSsRKSt3mapISsSsSt4lessISsESaISt4pairIS2_SsEEE@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10RIPEMD_12810compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10RIPEMD_16010compress_nEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan10RTSS_ShareC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan10RTSS_ShareC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10TLS_Client4readEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan10TLS_Client5writeEPKhm@Base 1.10.12
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10TLS_ClientC1ENSt3tr18functionIFmPhmEEENS2_IFvPKhmEEERKNS_10TLS_PolicyERNS_21RandomNumberGeneratorE@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10TLS_ClientC2ENSt3tr18functionIFmPhmEEENS2_IFvPKhmEEERKNS_10TLS_PolicyERNS_21RandomNumberGeneratorE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan10TLS_Server4readEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan10TLS_Server5writeEPKhm@Base 1.10.12
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10TLS_ServerC1ENSt3tr18functionIFmPhmEEENS2_IFvPKhmEEERKNS_10TLS_PolicyERNS_21RandomNumberGeneratorERKNS_16X509_CertificateERKNS_11Private_KeyE@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10TLS_ServerC2ENSt3tr18functionIFmPhmEEENS2_IFvPKhmEEERKNS_10TLS_PolicyERNS_21RandomNumberGeneratorERKNS_16X509_CertificateERKNS_11Private_KeyE@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10X509_Store20construct_cert_chainERKNS_16X509_CertificateERSt6vectorImSaImEEb@Base 1.10.12
 (arch=mips mipsel powerpc ppc64el s390x)_ZN5Botan10X509_Store8CRL_DataC1Ev@Base 1.10.10
 (arch=mips mipsel powerpc ppc64el s390x)_ZN5Botan10X509_Store8CRL_DataC2Ev@Base 1.10.10
 (arch=sparc64)_ZN5Botan10get_cipherERKSsNS_10Cipher_DirE@Base 1.10.10
 (arch=sparc64)_ZN5Botan10get_cipherERKSsRKNS_11OctetStringENS_10Cipher_DirE@Base 1.10.10
 (arch=sparc64)_ZN5Botan10get_cipherERKSsRKNS_11OctetStringES4_NS_10Cipher_DirE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan10hex_decodeEPKcmb@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan10hex_decodeEPhPKcmRmb@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10hex_decodeEPhPKcmb@Base 1.10.12
 (arch=sparc64)_ZN5Botan10hex_decodeEPhRKSsb@Base 1.10.10
 (arch=sparc64)_ZN5Botan10hex_decodeERKSsb@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan10hex_encodeB5cxx11EPKhmb@Base 1.10.12
 (arch=sparc64)_ZN5Botan10hex_encodeEPKhmb@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan10hex_encodeEPcPKhmb@Base 1.10.12
 (arch=sparc64)_ZN5Botan10hex_encodeERKNS_12MemoryRegionIhEEb@Base 1.10.10
 (arch=sparc64)_ZN5Botan11ASN1_StringC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan11ASN1_StringC1ERKSsNS_8ASN1_TagE@Base 1.10.10
 (arch=sparc64)_ZN5Botan11ASN1_StringC2ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan11ASN1_StringC2ERKSsNS_8ASN1_TagE@Base 1.10.10
 (arch=sparc64)_ZN5Botan11BER_Bad_TagC1ERKSsNS_8ASN1_TagE@Base 1.10.10
 (arch=sparc64)_ZN5Botan11BER_Bad_TagC1ERKSsNS_8ASN1_TagES3_@Base 1.10.10
 (arch=sparc64)_ZN5Botan11BER_Bad_TagC2ERKSsNS_8ASN1_TagE@Base 1.10.10
 (arch=sparc64)_ZN5Botan11BER_Bad_TagC2ERKSsNS_8ASN1_TagES3_@Base 1.10.10
 (optional=templinst|arch=mips mipsel powerpc ppc64el s390x|subst)_ZN5Botan11BER_Decoder15decode_optionalI{size_t}EERS0_RT_NS_8ASN1_TagES5_RKS3_@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11BER_Decoder6decodeERm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11BER_Decoder6decodeERmNS_8ASN1_TagES2_@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11BER_DecoderC1EPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11BER_DecoderC2EPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11DER_Encoder10add_objectENS_8ASN1_TagES1_PKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan11DER_Encoder10add_objectENS_8ASN1_TagES1_RKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11DER_Encoder12DER_Sequence9add_bytesEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11DER_Encoder6encodeEPKhmNS_8ASN1_TagE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11DER_Encoder6encodeEPKhmNS_8ASN1_TagES3_S3_@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11DER_Encoder6encodeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11DER_Encoder6encodeEmNS_8ASN1_TagES1_@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11DER_Encoder9raw_bytesEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11Hash_Filter5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan11Hash_FilterC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan11Hash_FilterC1ERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan11Hash_FilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan11Hash_FilterC2ERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11Hex_Decoder5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11Hex_Encoder15encode_and_sendEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11Hex_Encoder5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11Hex_EncoderC1EbmNS0_4CaseE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11Hex_EncoderC2EbmNS0_4CaseE@Base 1.10.12
 (arch=sparc64)_ZN5Botan11Invalid_OIDC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan11Invalid_OIDC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11Keccak_16008add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11Keccak_1600C1Em@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11Keccak_1600C2Em@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11LubyRackoff12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11OctetString6changeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan11OctetString6changeERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11OctetStringC1ERNS_21RandomNumberGeneratorEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11OctetStringC2ERNS_21RandomNumberGeneratorEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11PK_Verifier14verify_messageEPKhmS2_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11PK_Verifier15check_signatureEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11PK_Verifier18validate_signatureERKNS_12MemoryRegionIhEEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11PK_Verifier6updateEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan11PK_VerifierC1ERKNS_10Public_KeyERKSsNS_16Signature_FormatE@Base 1.10.10
 (arch=sparc64)_ZN5Botan11PK_VerifierC2ERKNS_10Public_KeyERKSsNS_16Signature_FormatE@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11SecureQueue15check_availableEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11SecureQueue4readEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan11SecureQueue5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11SessionKeys11ssl3_keygenEmRKNS_12MemoryRegionIhEES4_S4_@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan11SessionKeys11tls1_keygenEmRKNS_12MemoryRegionIhEES4_S4_@Base 1.10.12
 (arch=sparc64)_ZN5Botan11X509_Object4initERNS_10DataSourceERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan11X509_ObjectC1ERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan11X509_ObjectC1ERNS_10DataSourceERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan11X509_ObjectC2ERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan11X509_ObjectC2ERNS_10DataSourceERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan12Camellia_12812key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan12Camellia_19212key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan12Camellia_25612key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan12PBE_PKCS5v155writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan12PBE_PKCS5v157set_keyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan12PBE_PKCS5v2012known_cipherERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan12PBE_PKCS5v205writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan12PBE_PKCS5v207set_keyERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan12StreamCipher6set_ivEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan12aont_packageERNS_21RandomNumberGeneratorEPNS_11BlockCipherEPKhmPh@Base 1.10.12
 (arch=sparc64)_ZN5Botan12check_bcryptERKSsS1_@Base 1.10.10
 (arch=sparc64)_ZN5Botan12pkcs_hash_idERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan12random_primeERNS_21RandomNumberGeneratorEmRKNS_6BigIntEmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13ANSI_X919_MAC12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13ANSI_X919_MAC8add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13ANSI_X931_RNG11add_entropyEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13ANSI_X931_RNG6reseedEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan13ANSI_X931_RNG9randomizeEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13GOST_28147_8912key_scheduleEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan13Library_State21set_default_allocatorERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan13Library_State3setERKSsS2_S2_b@Base 1.10.10
 (arch=sparc64)_ZN5Botan13Library_State9add_aliasERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan13PRNG_UnseededC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan13PRNG_UnseededC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13RW_PrivateKeyC1ERNS_21RandomNumberGeneratorEmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13RW_PrivateKeyC2ERNS_21RandomNumberGeneratorEmm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan13Record_Reader9add_inputEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan13Record_Writer11send_recordEhPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13Record_Writer11send_recordEhhhPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13Record_Writer4sendEhPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan13Record_WriterC1ENSt3tr18functionIFvPKhmEEE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan13Record_WriterC2ENSt3tr18functionIFvPKhmEEE@Base 1.10.12
 (arch=sparc64)_ZN5Botan13algorithm_katERKNS_9SCAN_NameERKSt3mapISsSsSt4lessISsESaISt4pairIKSsSsEEERNS_17Algorithm_FactoryE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan13base64_decodeEPKcmb@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan13base64_decodeEPhPKcmRmbb@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan13base64_decodeEPhPKcmb@Base 1.10.12
 (arch=sparc64)_ZN5Botan13base64_decodeEPhRKSsb@Base 1.10.10
 (arch=sparc64)_ZN5Botan13base64_decodeERKSsb@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan13base64_encodeB5cxx11EPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan13base64_encodeEPKhm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan13base64_encodeEPcPKhmRmb@Base 1.10.12
 (arch=sparc64)_ZN5Botan13base64_encodeERKNS_12MemoryRegionIhEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan13block_size_ofERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan13x500_name_cmpERKSsS1_@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14AutoSeeded_RNG11add_entropyEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14AutoSeeded_RNG6reseedEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14AutoSeeded_RNG9randomizeEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14Base64_Decoder5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14Base64_Encoder15encode_and_sendEPKhmb@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14Base64_Encoder5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14Base64_Encoder9do_outputEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14Base64_EncoderC1Ebmb@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14Base64_EncoderC2Ebmb@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CBC_Decryption14buffered_blockEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CBC_Decryption14buffered_finalEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CBC_Decryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CBC_Encryption14buffered_blockEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CBC_Encryption14buffered_finalEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CBC_Encryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CFB_Decryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CFB_DecryptionC1EPNS_11BlockCipherERKNS_11OctetStringES5_m@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CFB_DecryptionC1EPNS_11BlockCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CFB_DecryptionC2EPNS_11BlockCipherERKNS_11OctetStringES5_m@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14CFB_DecryptionC2EPNS_11BlockCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CFB_Encryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CFB_EncryptionC1EPNS_11BlockCipherERKNS_11OctetStringES5_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CFB_EncryptionC1EPNS_11BlockCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CFB_EncryptionC2EPNS_11BlockCipherERKNS_11OctetStringES5_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CFB_EncryptionC2EPNS_11BlockCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CTS_Decryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14CTS_Encryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14Cascade_Cipher12key_scheduleEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan14Cert_Extension16Alternative_NameC1ERKNS_15AlternativeNameERKSsS6_@Base 1.10.10
 (arch=sparc64)_ZN5Botan14Cert_Extension16Alternative_NameC2ERKNS_15AlternativeNameERKSsS6_@Base 1.10.10
 (arch=sparc64)_ZN5Botan14Decoding_ErrorC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14Decoding_ErrorC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14EAX_Decryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14EAX_Decryption8do_writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14EAX_DecryptionC1EPNS_11BlockCipherERKNS_11OctetStringES5_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14EAX_DecryptionC1EPNS_11BlockCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14EAX_DecryptionC2EPNS_11BlockCipherERKNS_11OctetStringES5_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14EAX_DecryptionC2EPNS_11BlockCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14EAX_Encryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14ECB_Decryption14buffered_blockEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14ECB_Decryption14buffered_finalEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14ECB_Decryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14ECB_Encryption14buffered_blockEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14ECB_Encryption14buffered_finalEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14ECB_Encryption5writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan14Encoding_ErrorC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14Encoding_ErrorC2ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14Internal_ErrorC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14Internal_ErrorC2ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14PKCS10_RequestC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14PKCS10_RequestC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14RSA_PrivateKeyC1ERNS_21RandomNumberGeneratorEmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14RSA_PrivateKeyC2ERNS_21RandomNumberGeneratorEmm@Base 1.10.12
 (arch=sparc64)_ZN5Botan14User_InterfaceC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14User_InterfaceC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14XTS_Decryption14buffered_blockEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14XTS_Decryption14buffered_finalEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14XTS_Decryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14XTS_Encryption14buffered_blockEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14XTS_Encryption14buffered_finalEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14XTS_Encryption5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan14aont_unpackageEPNS_11BlockCipherEPKhmPh@Base 1.10.12
 (arch=sparc64)_ZN5Botan14have_algorithmERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14ipv4_to_stringEj@Base 1.10.10
 (arch=sparc64)_ZN5Botan14parse_asn1_oidERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan14primality_testERKNS_6BigIntERNS_21RandomNumberGeneratorEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan14string_to_ipv4ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan14version_stringEv@Base 1.10.10
 (arch=sparc64)_ZN5Botan15AlternativeName13add_attributeERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan15AlternativeName13add_othernameERKNS_3OIDERKSsNS_8ASN1_TagE@Base 1.10.10
 (arch=sparc64)_ZN5Botan15AlternativeNameC1ERKSsS2_S2_S2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan15AlternativeNameC2ERKSsS2_S2_S2_@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan15Buffered_Filter5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan15Buffered_FilterC1Emm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan15Buffered_FilterC2Emm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan15DH_KA_Operation5agreeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan15DLIES_DecryptorC1ERKNS_20PK_Key_Agreement_KeyEPNS_3KDFEPNS_25MessageAuthenticationCodeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan15DLIES_DecryptorC2ERKNS_20PK_Key_Agreement_KeyEPNS_3KDFEPNS_25MessageAuthenticationCodeEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan15DLIES_EncryptorC1ERKNS_20PK_Key_Agreement_KeyEPNS_3KDFEPNS_25MessageAuthenticationCodeEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan15DLIES_EncryptorC2ERKNS_20PK_Key_Agreement_KeyEPNS_3KDFEPNS_25MessageAuthenticationCodeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan15DataSink_Stream5writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan15DataSink_StreamC1ERKSsb@Base 1.10.10
 (arch=sparc64)_ZN5Botan15DataSink_StreamC1ERSoRKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan15DataSink_StreamC2ERKSsb@Base 1.10.10
 (arch=sparc64)_ZN5Botan15DataSink_StreamC2ERSoRKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan15ECDH_PrivateKeyC1ERKNS_19AlgorithmIdentifierERKNS_12MemoryRegionIhEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan15PKCS8_ExceptionC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan15PKCS8_ExceptionC2ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan15Stream_IO_ErrorC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan15Stream_IO_ErrorC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan15WiderWake_41_BE12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan15WiderWake_41_BE6cipherEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan15WiderWake_41_BE6set_ivEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan15WiderWake_41_BE8generateEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan15check_passhash9ERKSsS1_@Base 1.10.10
 (arch=sparc64)_ZN5Botan15generate_bcryptERKSsRNS_21RandomNumberGeneratorEt@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16Bzip_Compression5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16Bzip_CompressionC1Em@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16Bzip_CompressionC2Em@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan16MDx_HashFunction8add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16MDx_HashFunctionC1Embbm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16MDx_HashFunctionC2Embbm@Base 1.10.12
 (arch=mips mipsel powerpc ppc64el s390x sparc64)_ZN5Botan16MDx_HashFunctionD0Ev@Base 1.10.10
 (arch=mips mipsel powerpc ppc64el s390x sparc64)_ZN5Botan16MDx_HashFunctionD1Ev@Base 1.10.10
 (arch=mips mipsel powerpc ppc64el s390x sparc64)_ZN5Botan16MDx_HashFunctionD2Ev@Base 1.10.10
 (arch=sparc64)_ZN5Botan16PK_Decryptor_EMEC1ERKNS_11Private_KeyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16PK_Decryptor_EMEC2ERKNS_11Private_KeyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16PK_Encryptor_EMEC1ERKNS_10Public_KeyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16PK_Encryptor_EMEC2ERKNS_10Public_KeyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16PK_Key_AgreementC1ERKNS_20PK_Key_Agreement_KeyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16PK_Key_AgreementC2ERKNS_20PK_Key_Agreement_KeyERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16PK_Signer_Filter5writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan16X509_CertificateC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16X509_CertificateC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16Zlib_Compression5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16Zlib_CompressionC1Em@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan16Zlib_CompressionC2Em@Base 1.10.12
 (arch=sparc64)_ZN5Botan16ieee1363_hash_idERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16max_keylength_ofERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16min_keylength_ofERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan16output_length_ofERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory10make_pbkdfERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory12providers_ofERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory13prototype_macERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory15prototype_pbkdfERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory16add_block_cipherEPNS_11BlockCipherERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory17add_hash_functionEPNS_12HashFunctionERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory17add_stream_cipherEPNS_12StreamCipherERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory17make_block_cipherERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory18make_hash_functionERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory18make_stream_cipherERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory22prototype_block_cipherERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory22set_preferred_providerERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory23prototype_hash_functionERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory23prototype_stream_cipherERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory7add_macEPNS_25MessageAuthenticationCodeERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory8make_macERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Algorithm_Factory9add_pbkdfEPNS_5PBKDFERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan17DataSource_Memory15check_availableEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan17DataSource_Memory4readEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan17DataSource_MemoryC1EPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan17DataSource_MemoryC1ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan17DataSource_MemoryC2EPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan17DataSource_MemoryC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan17DataSource_Stream15check_availableEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan17DataSource_Stream4readEPhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan17DataSource_StreamC1ERKSsb@Base 1.10.10
 (arch=sparc64)_ZN5Botan17DataSource_StreamC1ERSiRKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17DataSource_StreamC2ERKSsb@Base 1.10.10
 (arch=sparc64)_ZN5Botan17DataSource_StreamC2ERSiRKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan17ECDH_KA_Operation5agreeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan17Integrity_FailureC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Integrity_FailureC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan17Invalid_IV_LengthC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan17Invalid_IV_LengthC1ERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan17Invalid_IV_LengthC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan17Invalid_IV_LengthC2ERKSsm@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Self_Test_FailureC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17Self_Test_FailureC2ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17X509_Cert_Options10not_beforeERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17X509_Cert_Options17add_ex_constraintERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan17X509_Cert_Options6CA_keyEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan17X509_Cert_Options9not_afterERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan17X509_Cert_OptionsC1ERKSsj@Base 1.10.10
 (arch=sparc64)_ZN5Botan17X509_Cert_OptionsC2ERKSsj@Base 1.10.10
 (arch=sparc64)_ZN5Botan17choose_sig_formatERKNS_11Private_KeyERKSsRNS_19AlgorithmIdentifierE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan17random_safe_primeERNS_21RandomNumberGeneratorEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan17srp6_client_agreeERKSsS1_S1_S1_RKNS_12MemoryRegionIhEERKNS_6BigIntERNS_21RandomNumberGeneratorE@Base 1.10.10
 (arch=sparc64)_ZN5Botan18BER_Decoding_ErrorC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan18BER_Decoding_ErrorC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan18Bzip_Decompression5writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan18Invalid_Block_SizeC1ERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan18Invalid_Block_SizeC2ERKSsS2_@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan18Invalid_Key_LengthC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan18Invalid_Key_LengthC1ERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan18Invalid_Key_LengthC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan18Invalid_Key_LengthC2ERKSsm@Base 1.10.10
 (arch=sparc64)_ZN5Botan18LibraryInitializer10initializeERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan18PK_Verifier_Filter13set_signatureEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan18PK_Verifier_Filter5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan18PK_Verifier_FilterC1EPNS_11PK_VerifierEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan18PK_Verifier_FilterC2EPNS_11PK_VerifierEPKhm@Base 1.10.12
 (arch=alpha amd64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan18SymmetricAlgorithm7set_keyEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan18Zlib_Decompression5writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan18generate_passhash9ERKSsRNS_21RandomNumberGeneratorEth@Base 1.10.10
 (arch=sparc64)_ZN5Botan18timespec_to_u32bitERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan19AlgorithmIdentifierC1ERKSsNS0_15Encoding_OptionE@Base 1.10.10
 (arch=sparc64)_ZN5Botan19AlgorithmIdentifierC1ERKSsRKNS_12MemoryRegionIhEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan19AlgorithmIdentifierC2ERKSsNS0_15Encoding_OptionE@Base 1.10.10
 (arch=sparc64)_ZN5Botan19AlgorithmIdentifierC2ERKSsRKNS_12MemoryRegionIhEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan19Algorithm_Not_FoundC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan19Algorithm_Not_FoundC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan19PK_Decryptor_Filter5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan19PK_Encryptor_Filter5writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan19SRP6_Server_Session5step1ERKNS_6BigIntERKSsS5_RNS_21RandomNumberGeneratorE@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan19StreamCipher_Filter5writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan19StreamCipher_FilterC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan19StreamCipher_FilterC1ERKSsRKNS_11OctetStringE@Base 1.10.10
 (arch=sparc64)_ZN5Botan19StreamCipher_FilterC2ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan19StreamCipher_FilterC2ERKSsRKNS_11OctetStringE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan19algorithm_benchmarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_17Algorithm_FactoryERNS_21RandomNumberGeneratorEjm@Base 1.10.12
 (arch=sparc64)_ZN5Botan19algorithm_benchmarkERKSsRNS_17Algorithm_FactoryERNS_21RandomNumberGeneratorEjm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan19generate_dsa_primesERNS_21RandomNumberGeneratorERNS_17Algorithm_FactoryERNS_6BigIntES5_mm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan19generate_dsa_primesERNS_21RandomNumberGeneratorERNS_17Algorithm_FactoryERNS_6BigIntES5_mmRKNS_12MemoryRegionIhEE@Base 1.10.12
 (arch=mips mipsel powerpc ppc64el s390x sparc64)_ZN5Botan20Buffered_Computation5finalEv@Base 1.10.10
 (arch=sparc64)_ZN5Botan20GOST_28147_89_ParamsC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan20GOST_28147_89_ParamsC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan20RSA_Public_Operation7encryptEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan20RSA_Public_Operation9verify_mrEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan20parse_algorithm_nameERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan21RSA_Private_Operation4signEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan21RSA_Private_Operation7decryptEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan21RandomNumberGenerator10random_vecEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan21keylength_multiple_ofERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan21srp6_group_identifierERKNS_6BigIntES2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan22Invalid_Algorithm_NameC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan22Invalid_Algorithm_NameC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan22NR_Signature_Operation4signEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan22RW_Signature_Operation4signEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=sparc64)_ZN5Botan22generate_srp6_verifierERKSsS1_RKNS_12MemoryRegionIhEES1_S1_@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan23DSA_Signature_Operation4signEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=sparc64)_ZN5Botan25Dynamically_Loaded_Engine10get_cipherERKSsNS_10Cipher_DirERNS_17Algorithm_FactoryE@Base 1.10.10
 (arch=sparc64)_ZN5Botan25Dynamically_Loaded_EngineC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan25Dynamically_Loaded_EngineC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan25ECDSA_Signature_Operation4signEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan25MessageAuthenticationCode10verify_macEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan25NR_Verification_Operation9verify_mrEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan25RW_Verification_Operation9verify_mrEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan26DSA_Verification_Operation6verifyEPKhmS2_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan28ECDSA_Verification_Operation6verifyEPKhmS2_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan28ElGamal_Decryption_Operation7decryptEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan28ElGamal_Encryption_Operation7encryptEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan29GOST_3410_Signature_Operation4signEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan32GOST_3410_Verification_Operation6verifyEPKhmS2_m@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan39Entropy_Accumulator_BufferedComputation9add_bytesEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan3DES12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan3MD28add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan3MD410compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan3MD510compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan3OFB12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan3OFB6cipherEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan3OFB6set_ivEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan3OIDC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan3OIDC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan3RC212key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan3RC28EKB_codeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan3RC512key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan3RC5C1Em@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan3RC5C2Em@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan3RC612key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan3TEA12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4ARC412key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4ARC46cipherEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4ARC4C1Em@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4ARC4C2Em@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4CMAC12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4CMAC8add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4DESX12key_scheduleEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan4EME1C1EPNS_12HashFunctionERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan4EME1C2EPNS_12HashFunctionERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4Fork5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4ForkC1EPPNS_6FilterEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4ForkC2EPPNS_6FilterEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4HMAC12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4HMAC8add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4IDEA12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4Lion12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4LionC1EPNS_12HashFunctionEPNS_12StreamCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4LionC2EPNS_12HashFunctionEPNS_12StreamCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4MARS12key_scheduleEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan4OIDS6lookupERKNS_3OIDE@Base 1.10.10
 (arch=sparc64)_ZN5Botan4OIDS6lookupERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan4OIDS7add_oidERKNS_3OIDERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan4OIDS7name_ofERKNS_3OIDERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan4OIDS8have_oidERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4Pipe11process_msgEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan4Pipe11process_msgERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4Pipe15check_availableEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4Pipe15set_default_msgEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan4Pipe18read_all_as_stringB5cxx11Em@Base 1.10.12
 (arch=sparc64)_ZN5Botan4Pipe18read_all_as_stringEm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4Pipe19check_available_msgEmm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan4Pipe22Invalid_Message_NumberC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan4Pipe22Invalid_Message_NumberC1ERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan4Pipe22Invalid_Message_NumberC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan4Pipe22Invalid_Message_NumberC2ERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4Pipe4readEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4Pipe4readEPhmm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4Pipe4readERhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4Pipe5writeEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan4Pipe5writeERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4Pipe8read_allEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4PipeC1EPPNS_6FilterEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4PipeC2EPPNS_6FilterEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan4SEED12key_scheduleEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan4X50910PEM_encodeERKNS_10Public_KeyE@Base 1.10.10
 (arch=sparc64)_ZN5Botan4X50915create_cert_reqERKNS_17X509_Cert_OptionsERKNS_11Private_KeyERKSsRNS_21RandomNumberGeneratorE@Base 1.10.10
 (arch=sparc64)_ZN5Botan4X50923create_self_signed_certERKNS_17X509_Cert_OptionsERKNS_11Private_KeyERKSsRNS_21RandomNumberGeneratorE@Base 1.10.10
 (arch=sparc64)_ZN5Botan4X5098load_keyERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan4XTEA12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5CRC248add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5CRC328add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5Chain5writeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5ChainC1EPPNS_6FilterEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5ChainC2EPPNS_6FilterEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5EMSA111encoding_ofERKNS_12MemoryRegionIhEEmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5EMSA16updateEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5EMSA16verifyERKNS_12MemoryRegionIhEES4_m@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5EMSA211encoding_ofERKNS_12MemoryRegionIhEEmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5EMSA26updateEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5EMSA26verifyERKNS_12MemoryRegionIhEES4_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5EMSA311encoding_ofERKNS_12MemoryRegionIhEEmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5EMSA36updateEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5EMSA36verifyERKNS_12MemoryRegionIhEES4_m@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5EMSA411encoding_ofERKNS_12MemoryRegionIhEEmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5EMSA46updateEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5EMSA46verifyERKNS_12MemoryRegionIhEES4_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5EMSA4C1EPNS_12HashFunctionEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5EMSA4C2EPNS_12HashFunctionEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan5PKCS810BER_encodeERKNS_11Private_KeyERNS_21RandomNumberGeneratorERKSsS7_@Base 1.10.10
 (arch=sparc64)_ZN5Botan5PKCS810PEM_encodeERKNS_11Private_KeyE@Base 1.10.10
 (arch=sparc64)_ZN5Botan5PKCS810PEM_encodeERKNS_11Private_KeyERNS_21RandomNumberGeneratorERKSsS7_@Base 1.10.10
 (arch=sparc64)_ZN5Botan5PKCS88load_keyERKSsRNS_21RandomNumberGeneratorERKNS_14User_InterfaceE@Base 1.10.10
 (arch=sparc64)_ZN5Botan5PKCS88load_keyERKSsRNS_21RandomNumberGeneratorES2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan5PKCS88load_keyERNS_10DataSourceERNS_21RandomNumberGeneratorERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan5Tiger10compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5TigerC1Emm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan5TigerC2Emm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6BigInt11encode_1363ERKS0_m@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6BigInt13binary_decodeEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6BigInt6decodeEPKhmNS0_4BaseE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigInt7grow_toEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigInt7set_bitEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigInt8grow_regEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6BigInt9clear_bitEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6BigInt9mask_bitsEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigInt9randomizeERNS_21RandomNumberGeneratorEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigIntC1ENS0_10NumberTypeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigIntC1ENS0_4SignEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigIntC1EPKhmNS0_4BaseE@Base 1.10.12
 (arch=sparc64)_ZN5Botan6BigIntC1ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6BigIntC1ERNS_21RandomNumberGeneratorEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigIntC2ENS0_10NumberTypeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigIntC2ENS0_4SignEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigIntC2EPKhmNS0_4BaseE@Base 1.10.12
 (arch=sparc64)_ZN5Botan6BigIntC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6BigIntC2ERNS_21RandomNumberGeneratorEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6BigIntlSEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el sparc64)_ZN5Botan6BigIntrMEy@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6BigIntrSEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6CTR_BE12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6CTR_BE6cipherEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6CTR_BE6set_ivEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6Comb4P8add_dataEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan6Engine10get_cipherERKSsNS_10Cipher_DirERNS_17Algorithm_FactoryE@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6Filter4sendEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6Filter8set_nextEPPS0_m@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6Filter8set_portEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6KASUMI12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6MISTY112key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6MISTY1C1Em@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6MISTY1C2Em@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6OS2ECPEPKhmRKNS_8CurveGFpE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6PK_Ops12Verification6verifyEPKhmS3_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6PK_Ops12Verification9verify_mrEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6Square12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan6Turing12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6Turing6cipherEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan6Turing6set_ivEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7AES_12812key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan7AES_19212key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7AES_25612key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7Adler328add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7BMW_51210compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7CBC_MAC12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7CBC_MAC8add_dataEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan7Charset9transcodeERKSsNS_13Character_SetES3_@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7HAS_16010compress_nEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan7KeyPair27signature_consistency_checkERNS_21RandomNumberGeneratorERKNS_11Private_KeyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan7KeyPair28encryption_consistency_checkERNS_21RandomNumberGeneratorERKNS_11Private_KeyERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan7Noekeon12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan7SHA_16010compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7SHA_22410compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7SHA_25610compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan7SHA_38410compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7SHA_51210compress_nEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7Salsa2012key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7Salsa206cipherEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7Salsa206set_ivEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan7Serpent12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7Twofish12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan7Twofish6rs_mulEPhhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan7X509_CAC1ERKNS_16X509_CertificateERKNS_11Private_KeyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan7X509_CAC2ERKNS_16X509_CertificateERKNS_11Private_KeyERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan7X509_DN13add_attributeERKNS_3OIDERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan7X509_DN13add_attributeERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZN5Botan7X509_DN16deref_info_fieldERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan7X509_DNC1ERKSt8multimapINS_3OIDESsSt4lessIS2_ESaISt4pairIKS2_SsEEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan7X509_DNC1ERKSt8multimapISsSsSt4lessISsESaISt4pairIKSsSsEEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan7X509_DNC2ERKSt8multimapINS_3OIDESsSt4lessIS2_ESaISt4pairIKS2_SsEEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan7X509_DNC2ERKSt8multimapISsSsSt4lessISsESaISt4pairIKSsSsEEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan7get_emeERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan7get_kdfERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan7get_pbeERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8Blowfish12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8Blowfish13key_expansionEPKhmS2_@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8Blowfish16eks_key_scheduleEPKhmS2_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8CAST_12812key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8CAST_25612key_scheduleEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8CurveGFpC1ERKNS_6BigIntES3_S3_@Base 1.10.10
 (arch=sparc64)_ZN5Botan8CurveGFpC2ERKNS_6BigIntES3_S3_@Base 1.10.10
 (arch=sparc64)_ZN5Botan8DL_GroupC1ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8DL_GroupC1ERNS_21RandomNumberGeneratorENS0_9PrimeTypeEmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8DL_GroupC1ERNS_21RandomNumberGeneratorERKNS_12MemoryRegionIhEEmm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8DL_GroupC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8DL_GroupC2ERNS_21RandomNumberGeneratorENS0_9PrimeTypeEmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8DL_GroupC2ERNS_21RandomNumberGeneratorERKNS_12MemoryRegionIhEEmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8EAX_Base10set_headerEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8EAX_BaseC1EPNS_11BlockCipherEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8EAX_BaseC2EPNS_11BlockCipherEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8EC_GroupC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan8EC_GroupC2ERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8EMSA_Raw11encoding_ofERKNS_12MemoryRegionIhEEmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8EMSA_Raw6updateEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8EMSA_Raw6verifyERKNS_12MemoryRegionIhEES4_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8HMAC_RNG11add_entropyEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8HMAC_RNG6reseedEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8HMAC_RNG9randomizeEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8Null_RNG11add_entropyEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8Null_RNG6reseedEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8Null_RNG9randomizeEPhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8PEM_Code18decode_check_labelERNS_10DataSourceERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan8PEM_Code6decodeERNS_10DataSourceERSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan8PEM_Code6encodeEPKhmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8PEM_Code6encodeEPKhmRKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan8PEM_Code6encodeERKNS_12MemoryRegionIhEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8PEM_Code6encodeERKNS_12MemoryRegionIhEERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan8PEM_Code7matchesERNS_10DataSourceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8PEM_Code7matchesERNS_10DataSourceERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8Parallel8add_dataEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8PointGFp6negateEv@Base 1.10.10
 (arch=sparc64)_ZN5Botan8PointGFpC1ERKS0_@Base 1.10.10
 (arch=sparc64)_ZN5Botan8PointGFpC2ERKS0_@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8Randpool11add_entropyEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8Randpool6reseedEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8Randpool9randomizeEPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8RandpoolC1EPNS_11BlockCipherEPNS_25MessageAuthenticationCodeEmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8RandpoolC2EPNS_11BlockCipherEPNS_25MessageAuthenticationCodeEmm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8SAFER_SK12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8SAFER_SKC1Em@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8SAFER_SKC2Em@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan8SSL3_MAC12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8SSL3_MAC8add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan8Skipjack12key_scheduleEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan8X509_CRL14X509_CRL_ErrorC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan8X509_CRL14X509_CRL_ErrorC2ERKSs@Base 1.10.10
 (arch=mips mipsel powerpc ppc64el s390x)_ZN5Botan8X509_CRLC1ERKS0_@Base 1.10.10
 (arch=sparc64)_ZN5Botan8X509_CRLC1ERKSsb@Base 1.10.10
 (arch=mips mipsel powerpc ppc64el s390x)_ZN5Botan8X509_CRLC2ERKS0_@Base 1.10.10
 (arch=sparc64)_ZN5Botan8X509_CRLC2ERKSsb@Base 1.10.10
 (arch=sparc64)_ZN5Botan8X942_PRFC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan8X942_PRFC2ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan8get_emsaERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan8split_onERKSsc@Base 1.10.10
 (arch=sparc64)_ZN5Botan9AttributeC1ERKSsRKNS_12MemoryRegionIhEE@Base 1.10.10
 (arch=sparc64)_ZN5Botan9AttributeC2ERKSsRKNS_12MemoryRegionIhEE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan9CryptoBox7decryptEPKhmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base 1.10.12
 (arch=sparc64)_ZN5Botan9CryptoBox7decryptEPKhmRKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan9CryptoBox7decryptERKSsS2_@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan9CryptoBox7encryptEPKhmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=sparc64)_ZN5Botan9CryptoBox7encryptEPKhmRKSsRNS_21RandomNumberGeneratorE@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan9EMSA1_BSI11encoding_ofERKNS_12MemoryRegionIhEEmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan9EMSA3_Raw11encoding_ofERKNS_12MemoryRegionIhEEmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan9EMSA3_Raw6updateEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan9EMSA3_Raw6verifyERKNS_12MemoryRegionIhEES4_m@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan9PK_Signer12sign_messageEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan9PK_Signer6updateEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan9PK_SignerC1ERKNS_11Private_KeyERKSsNS_16Signature_FormatENS_16Fault_ProtectionE@Base 1.10.10
 (arch=sparc64)_ZN5Botan9PK_SignerC2ERKNS_11Private_KeyERKSsNS_16Signature_FormatENS_16Fault_ProtectionE@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan9Power_Mod11window_bitsEmmNS0_11Usage_HintsE@Base 1.10.12
 (arch=sparc64)_ZN5Botan9SCAN_NameC1ESs@Base 1.10.10
 (arch=sparc64)_ZN5Botan9SCAN_NameC2ESs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5Botan9Skein_5128add_dataEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan9Skein_512C1EmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base 1.10.12
 (arch=sparc64)_ZN5Botan9Skein_512C1EmRKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZN5Botan9Skein_512C2EmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base 1.10.12
 (arch=sparc64)_ZN5Botan9Skein_512C2EmRKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan9TripleDES12key_scheduleEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZN5Botan9Whirlpool10compress_nEPKhm@Base 1.10.12
 (arch=sparc64)_ZN5Botan9X509_Time6set_toERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan9X509_Time6set_toERKSsNS_8ASN1_TagE@Base 1.10.10
 (arch=sparc64)_ZN5Botan9X509_TimeC1ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan9X509_TimeC1ERKSsNS_8ASN1_TagE@Base 1.10.10
 (arch=sparc64)_ZN5Botan9X509_TimeC2ERKSs@Base 1.10.10
 (arch=sparc64)_ZN5Botan9X509_TimeC2ERKSsNS_8ASN1_TagE@Base 1.10.10
 (arch=sparc64)_ZN5Botan9get_pbkdfERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x)_ZN5Botan9to_stringB5cxx11Eym@Base 1.10.12
 (arch=sparc64)_ZN5Botan9to_stringEym@Base 1.10.10
 (arch=sparc64)_ZN5Botan9to_u32bitERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5BotanlsERKNS_6BigIntEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el sparc64)_ZN5BotanrmERKNS_6BigIntEy@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZN5BotanrsERKNS_6BigIntEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan10DataSource2idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10Data_Store11get1_memvecERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10Data_Store11get1_u32bitERKSsj@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10Data_Store11search_withERKNS0_7MatcherE@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10Data_Store3getERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10Data_Store4get1ERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10Data_Store7Matcher9transformERKSsS3_@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10Data_Store9has_valueERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10GOST_34_114nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan10MAC_Filter15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan10MAC_Filter4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10RIPEMD_1284nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10RIPEMD_1604nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10RTSS_Share9to_stringEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan10TLS_12_PRF4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan10TLS_12_PRF6deriveEmPKhmS2_m@Base 1.10.12
 (arch=sparc64)_ZNK5Botan10X509_Store10PEM_encodeEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11ASN1_String5valueEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11ASN1_String8iso_8859Ev@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11Hash_Filter4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11Hex_Decoder4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11Hex_Encoder4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11Keccak_16004nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11LubyRackoff4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan11LubyRackoff9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan11LubyRackoff9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan11OctetString9as_stringEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZNK5Botan11OpenPGP_S2K10derive_keyEmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan11OpenPGP_S2K10derive_keyEmRKSsPKhmm@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11OpenPGP_S2K4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11SecureQueue4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan11SecureQueue4peekEPhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan11X509_Object10PEM_encodeEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan11X509_Object23hash_used_for_signatureEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan12Camellia_1284nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan12Camellia_1289decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan12Camellia_1289encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan12Camellia_1924nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Camellia_1929decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan12Camellia_1929encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan12Camellia_2564nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan12Camellia_2569decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Camellia_2569encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan12DH_PublicKey9algo_nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12EME_PKCS1v1518maximum_input_sizeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12EME_PKCS1v153padEPKhmmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12EME_PKCS1v155unpadEPKhmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Keyed_Filter15valid_iv_lengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan12NR_PublicKey9algo_nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan12Noekeon_SIMD9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Noekeon_SIMD9encrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan12Null_Padding15valid_blocksizeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Null_Padding3padEPhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan12Null_Padding4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Null_Padding5unpadEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Null_Padding9pad_bytesEmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan12PBE_PKCS5v154nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan12PBE_PKCS5v204nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZNK5Botan12PKCS5_PBKDF110derive_keyEmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan12PKCS5_PBKDF110derive_keyEmRKSsPKhmm@Base 1.10.10
 (arch=sparc64)_ZNK5Botan12PKCS5_PBKDF14nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x)_ZNK5Botan12PKCS5_PBKDF210derive_keyEmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan12PKCS5_PBKDF210derive_keyEmRKSsPKhmm@Base 1.10.10
 (arch=sparc64)_ZNK5Botan12PKCS5_PBKDF24nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan12RW_PublicKey9algo_nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Serpent_SIMD9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan12Serpent_SIMD9encrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan12StreamCipher15valid_iv_lengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan13ANSI_X919_MAC4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan13ANSI_X931_RNG4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan13DSA_PublicKey9algo_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan13GOST_28147_894nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan13GOST_28147_899decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan13GOST_28147_899encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan13Library_State11deref_aliasERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan13Library_State13get_allocatorERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan13Library_State3getERKSsS2_@Base 1.10.10
 (arch=sparc64)_ZNK5Botan13Library_State6is_setERKSsS2_@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan13PKCS7_Padding15valid_blocksizeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan13PKCS7_Padding3padEPhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan13PKCS7_Padding4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan13PKCS7_Padding5unpadEPKhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan13RSA_PublicKey9algo_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14AutoSeeded_RNG4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Base64_Decoder4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Base64_Encoder4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14CBC_Decryption15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14CBC_Decryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14CBC_Decryption4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14CBC_Encryption15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14CBC_Encryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14CBC_Encryption4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14CFB_Decryption15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14CFB_Decryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14CFB_Decryption4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14CFB_Encryption15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14CFB_Encryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14CFB_Encryption4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14CTS_Decryption15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14CTS_Decryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14CTS_Decryption4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14CTS_Encryption15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14CTS_Encryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14CTS_Encryption4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cascade_Cipher4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14Cascade_Cipher9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14Cascade_Cipher9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14Cert_Extension10CRL_Number8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension10CRL_Number9config_idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension14CRL_ReasonCode8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension14CRL_ReasonCode9config_idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension14Subject_Key_ID8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension14Subject_Key_ID9config_idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension16Alternative_Name8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension16Alternative_Name9config_idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension16Authority_Key_ID8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension16Authority_Key_ID9config_idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension17Basic_Constraints8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension17Basic_Constraints9config_idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension18Extended_Key_Usage8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension18Extended_Key_Usage9config_idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension20Certificate_Policies8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension20Certificate_Policies9config_idEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension9Key_Usage8oid_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14Cert_Extension9Key_Usage9config_idEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14ECB_Decryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14ECB_Decryption4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14ECB_Encryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14ECB_Encryption4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14ECDH_PublicKey9algo_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14PKCS10_Request18challenge_passwordEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan14User_Interface14get_passphraseERKSsS2_RNS0_9UI_ResultE@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14XTS_Decryption15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14XTS_Decryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14XTS_Decryption4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan14XTS_Encryption15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan14XTS_Encryption15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan14XTS_Encryption4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan15AlternativeName14get_attributesEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan15AlternativeName8contentsEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan15DLIES_Decryptor3decEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan15DLIES_Encryptor3encEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=sparc64)_ZNK5Botan15DataSink_Stream4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan15ECDSA_PublicKey9algo_nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan15WiderWake_41_BE15valid_iv_lengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan15WiderWake_41_BE4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16Bzip_Compression4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan16PK_Decryptor_EME3decEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan16PK_Encryptor_EME3encEPKhmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan16PK_Key_Agreement10derive_keyEmPKhmS2_m@Base 1.10.12
 (arch=sparc64)_ZNK5Botan16PK_Signer_Filter4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16X509_Certificate10start_timeEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16X509_Certificate11issuer_infoERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16X509_Certificate12subject_infoERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16X509_Certificate14ex_constraintsEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16X509_Certificate8end_timeEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16X509_Certificate8policiesEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16X509_Certificate9to_stringEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan16Zlib_Compression4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan17ANSI_X923_Padding15valid_blocksizeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan17ANSI_X923_Padding3padEPhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan17ANSI_X923_Padding4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan17ANSI_X923_Padding5unpadEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan17Algorithm_Factory12get_engine_nEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan17DataSource_Memory4peekEPhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan17DataSource_Stream2idEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan17DataSource_Stream4peekEPhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan17ElGamal_PublicKey9algo_nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan18Bzip_Decompression4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan18PK_Verifier_Filter4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan18Zlib_Decompression4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan19GOST_3410_PublicKey9algo_nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan19OneAndZeros_Padding15valid_blocksizeEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan19OneAndZeros_Padding3padEPhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan19OneAndZeros_Padding4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan19OneAndZeros_Padding5unpadEPKhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan19PK_Decryptor_Filter4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan19PK_Encryptor_Filter4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan19StreamCipher_Filter15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan19StreamCipher_Filter15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan19StreamCipher_Filter4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan20GOST_28147_89_Params10sbox_entryEmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan25Dynamically_Loaded_Engine13provider_nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan28BlockCipherModePaddingMethod9pad_bytesEmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan3DES4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan3DES9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3DES9encrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3EME6decodeEPKhmm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan3EME6decodeERKNS_12MemoryRegionIhEEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan3EME6encodeEPKhmmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan3EME6encodeERKNS_12MemoryRegionIhEEmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZNK5Botan3KDF10derive_keyEmPKhmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base 1.10.12
 (arch=sparc64)_ZNK5Botan3KDF10derive_keyEmPKhmRKSs@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan3KDF10derive_keyEmPKhmS2_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3KDF10derive_keyEmRKNS_12MemoryRegionIhEEPKhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x)_ZNK5Botan3KDF10derive_keyEmRKNS_12MemoryRegionIhEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base 1.10.12
 (arch=sparc64)_ZNK5Botan3KDF10derive_keyEmRKNS_12MemoryRegionIhEERKSs@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3KDF10derive_keyEmRKNS_12MemoryRegionIhEES4_@Base 1.10.12
 (arch=sparc64)_ZNK5Botan3MD24nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan3MD44nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan3MD54nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan3OFB15valid_iv_lengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan3OFB4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan3OID9as_stringEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan3RC24nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3RC29decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3RC29encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan3RC54nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan3RC59decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan3RC59encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan3RC64nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3RC69decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3RC69encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan3TEA4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3TEA9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan3TEA9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4ARC44nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan4CMAC4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan4DESX4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4DESX9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4DESX9encrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4EME118maximum_input_sizeEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4EME13padEPKhmmRNS_21RandomNumberGeneratorE@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4EME15unpadEPKhmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4Fork4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan4HMAC4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan4IDEA4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4IDEA9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4IDEA9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4KDF14nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4KDF16deriveEmPKhmS2_m@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4KDF24nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4KDF26deriveEmPKhmS2_m@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4Lion4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4Lion9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4Lion9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4MARS4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4MARS9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4MARS9encrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4MGF14maskEPKhmPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZNK5Botan4Pipe14get_message_noERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4Pipe14get_message_noERKSsm@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4Pipe4peekEPhmm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4Pipe4peekEPhmmm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4Pipe4peekERhmm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4Pipe9remainingEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4SEED4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4SEED9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4SEED9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan4XTEA4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan4XTEA9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan4XTEA9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan5CRC244nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan5CRC324nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan5Chain4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan5Tiger4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan6BigInt13get_substringEmm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan6BigInt7byte_atEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan6BigInt7get_bitEm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan6CTR_BE15valid_iv_lengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan6CTR_BE4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan6Comb4P4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan6KASUMI4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan6KASUMI9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan6KASUMI9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan6MISTY14nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan6MISTY19decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan6MISTY19encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan6Square4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan6Square9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan6Square9encrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan6Turing15valid_iv_lengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan6Turing4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7AES_1284nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7AES_1289decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7AES_1289encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan7AES_1924nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7AES_1929decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan7AES_1929encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan7AES_2564nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7AES_2569decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan7AES_2569encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan7Adler324nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7BMW_5124nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7CBC_MAC4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7HAS_1604nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7Noekeon4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7Noekeon9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan7Noekeon9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan7SHA_1604nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7SHA_2244nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7SHA_2564nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7SHA_3844nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7SHA_5124nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan7Salsa2015valid_iv_lengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan7Salsa204nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7Serpent4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7Serpent9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7Serpent9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan7TLS_PRF4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan7TLS_PRF6deriveEmPKhmS2_m@Base 1.10.12
 (arch=sparc64)_ZNK5Botan7Twofish4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7Twofish9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan7Twofish9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan7X509_DN13get_attributeERKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7X509_DN14get_attributesEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan7X509_DN8contentsEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan8Blowfish13generate_sboxERNS_12MemoryRegionIjEERjS4_PKhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan8Blowfish4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8Blowfish9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8Blowfish9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan8CAST_1284nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan8CAST_1289decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8CAST_1289encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan8CAST_2564nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan8CAST_2569decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan8CAST_2569encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan8DL_Group10PEM_encodeENS0_6FormatE@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8EAX_Base15valid_iv_lengthEm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8EAX_Base15valid_keylengthEm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan8EAX_Base4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan8EC_Group10PEM_encodeEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan8HMAC_RNG4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan8Null_RNG4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan8Parallel4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan8Randpool4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan8SAFER_SK4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan8SAFER_SK9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8SAFER_SK9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan8SSL3_MAC4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan8SSL3_PRF4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8SSL3_PRF6deriveEmPKhmS2_m@Base 1.10.12
 (arch=sparc64)_ZNK5Botan8Skipjack4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8Skipjack9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan8Skipjack9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan8X942_PRF4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan8X942_PRF6deriveEmPKhmS2_m@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan9SCAN_Name14arg_as_integerEmm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan9SCAN_Name18algo_name_and_argsEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZNK5Botan9SCAN_Name3argB5cxx11Em@Base 1.10.12
 (arch=sparc64)_ZNK5Botan9SCAN_Name3argEm@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x)_ZNK5Botan9SCAN_Name3argEmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@Base 1.10.12
 (arch=sparc64)_ZNK5Botan9SCAN_Name3argEmRKSs@Base 1.10.10
 (arch=sparc64)_ZNK5Botan9Skein_5124nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan9TripleDES4nameEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan9TripleDES9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan9TripleDES9encrypt_nEPKhPhm@Base 1.10.12
 (arch=sparc64)_ZNK5Botan9Whirlpool4nameEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan9X509_Time15readable_stringEv@Base 1.10.10
 (arch=sparc64)_ZNK5Botan9X509_Time9as_stringEv@Base 1.10.10
 (arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNK5Botan9XTEA_SIMD9decrypt_nEPKhPhm@Base 1.10.12
 (arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNK5Botan9XTEA_SIMD9encrypt_nEPKhPhm@Base 1.10.12
 (optional=templinst|arch=sparc64)_ZNKSt8_Rb_treeIN5Botan3OIDESt4pairIKS1_NS0_11ASN1_StringEESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11equal_rangeERS3_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNKSt8_Rb_treeIN5Botan3OIDESt4pairIKS1_SsESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11equal_rangeERS3_@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x)_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN5Botan9AllocatorEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x)_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE4findERS7_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNKSt8_Rb_treeISsSt4pairIKSsPN5Botan9AllocatorEESt10_Select1stIS5_ESt4lessISsESaIS5_EE4findERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNKSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE11equal_rangeERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNKSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE4findERS1_@Base 1.10.10
 (arch=sparc64)_ZNSt11logic_errorC1ERKS_@Base 1.10.10
 (arch=sparc64)_ZNSt11logic_errorC2ERKS_@Base 1.10.10
 (optional=templinst|arch=mips mipsel powerpc ppc64el s390x)_ZNSt12_Destroy_auxILb0EE9__destroyIPN5Botan12SecureVectorIhEEEEvT_S6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt12_Destroy_auxILb0EE9__destroyIPN5Botan12Unix_ProgramEEEvT_S5_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt12_Destroy_auxILb0EE9__destroyIPN5Botan17EGD_EntropySource10EGD_SocketEEEvT_S6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt12_Destroy_auxILb0EE9__destroyIPN5Botan6BigIntEEEvT_S5_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt12_Destroy_auxILb0EE9__destroyIPSsEEvT_S3_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairImSsEEEvT_S5_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN5Botan16X509_CertificateES4_EET0_T_S6_S5_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIN5Botan16X509_CertificateEPNS3_11Private_KeyEES8_EET0_T_SA_S9_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsPN5Botan11BlockCipherESt4lessISsESaISt4pairIKSsS2_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsPN5Botan12HashFunctionESt4lessISsESaISt4pairIKSsS2_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsPN5Botan12StreamCipherESt4lessISsESaISt4pairIKSsS2_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsPN5Botan25MessageAuthenticationCodeESt4lessISsESaISt4pairIKSsS2_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsPN5Botan5PBKDFESt4lessISsESaISt4pairIKSsS2_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsS_ISsPN5Botan11BlockCipherESt4lessISsESaISt4pairIKSsS2_EEES4_SaIS5_IS6_S9_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsS_ISsPN5Botan12HashFunctionESt4lessISsESaISt4pairIKSsS2_EEES4_SaIS5_IS6_S9_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsS_ISsPN5Botan12StreamCipherESt4lessISsESaISt4pairIKSsS2_EEES4_SaIS5_IS6_S9_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsS_ISsPN5Botan25MessageAuthenticationCodeESt4lessISsESaISt4pairIKSsS2_EEES4_SaIS5_IS6_S9_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsS_ISsPN5Botan5PBKDFESt4lessISsESaISt4pairIKSsS2_EEES4_SaIS5_IS6_S9_EEEixERS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt3mapISsSsSt4lessISsESaISt4pairIKSsSsEEEixERS3_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSsED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSsED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan11BlockCipherESt4lessISsESaIS_IS0_S4_EEEED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan11BlockCipherESt4lessISsESaIS_IS0_S4_EEEED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan12HashFunctionESt4lessISsESaIS_IS0_S4_EEEED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan12HashFunctionESt4lessISsESaIS_IS0_S4_EEEED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan12StreamCipherESt4lessISsESaIS_IS0_S4_EEEED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan12StreamCipherESt4lessISsESaIS_IS0_S4_EEEED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan25MessageAuthenticationCodeESt4lessISsESaIS_IS0_S4_EEEED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan25MessageAuthenticationCodeESt4lessISsESaIS_IS0_S4_EEEED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan5PBKDFESt4lessISsESaIS_IS0_S4_EEEED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairIKSsSt3mapISsPN5Botan5PBKDFESt4lessISsESaIS_IS0_S4_EEEED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairISsSsED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt4pairISsSsED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt5dequeISsSaISsEE16_M_push_back_auxERKSs@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt5dequeISsSaISsEED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt5dequeISsSaISsEED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt6vectorIN5Botan10X509_Store8CRL_DataESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EE@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt6vectorIN5Botan10X509_Store8CRL_DataESaIS2_EE9push_backERKS2_@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNSt6vectorIN5Botan6BigIntESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEmRKS1_@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)_ZNSt6vectorIPN5Botan6FilterESaIS2_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS2_S4_EEmRKS2_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt6vectorISsSaISsEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPSsS1_EERKSs@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt6vectorISsSaISsEED1Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt6vectorISsSaISsEED2Ev@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt6vectorISsSaISsEEaSERKS1_@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNSt6vectorISt4pairIPvmESaIS2_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS2_S4_EERKS2_@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x)_ZNSt6vectorISt4pairImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS7_S9_EERKS7_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt6vectorISt4pairImSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNSt6vectorImSaImEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPmS1_EERKm@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeIN5Botan3OIDESt4pairIKS1_NS0_11ASN1_StringEESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE10_M_insert_EPSt18_Rb_tree_node_baseSD_RKS5_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeIN5Botan3OIDESt4pairIKS1_NS0_11ASN1_StringEESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11equal_rangeERS3_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeIN5Botan3OIDESt4pairIKS1_NS0_11ASN1_StringEESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_M_copyEPKSt13_Rb_tree_nodeIS5_EPSD_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeIN5Botan3OIDESt4pairIKS1_SsESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE10_M_insert_EPSt18_Rb_tree_node_baseSC_RKS4_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeIN5Botan3OIDESt4pairIKS1_SsESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E@Base 1.10.10
 (optional=templinst|arch=amd64 arm64 ppc64el)_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PN5Botan9AllocatorEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS7_@Base 1.10.10
 (optional=templinst|arch=amd64 arm64 ppc64el)_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_@Base 1.10.10
 (optional=templinst|arch=amd64 armel armhf ppc64el)_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St3mapIS5_PN5Botan11BlockCipherESt4lessIS5_ESaIS6_IS7_SB_EEEESt10_Select1stISH_ESD_SaISH_EE4findERS7_@Base 1.10.10
 (optional=templinst|arch=amd64 armel armhf ppc64el)_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St3mapIS5_PN5Botan12HashFunctionESt4lessIS5_ESaIS6_IS7_SB_EEEESt10_Select1stISH_ESD_SaISH_EE4findERS7_@Base 1.10.10
 (optional=templinst|arch=amd64 armel armhf ppc64el)_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St3mapIS5_PN5Botan12StreamCipherESt4lessIS5_ESaIS6_IS7_SB_EEEESt10_Select1stISH_ESD_SaISH_EE4findERS7_@Base 1.10.10
 (optional=templinst|arch=amd64 armel armhf ppc64el)_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St3mapIS5_PN5Botan25MessageAuthenticationCodeESt4lessIS5_ESaIS6_IS7_SB_EEEESt10_Select1stISH_ESD_SaISH_EE4findERS7_@Base 1.10.10
 (optional=templinst|arch=amd64 armel armhf ppc64el)_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St3mapIS5_PN5Botan5PBKDFESt4lessIS5_ESaIS6_IS7_SB_EEEESt10_Select1stISH_ESD_SaISH_EE4findERS7_@Base 1.10.10
 (optional=templinst|arch=amd64 arm64 ppc64el)_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_dESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_@Base 1.10.10
 (optional=templinst|arch=amd64 arm64 ppc64el sparc64)_ZNSt8_Rb_treeIPvSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_@Base 1.10.10
 (optional=templinst|arch=alpha amd64 arm64 ppc64el s390x sparc64)_ZNSt8_Rb_treeIPvSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan11BlockCipherEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan11BlockCipherEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan11BlockCipherEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_M_copyEPKSt13_Rb_tree_nodeIS5_EPSD_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan11BlockCipherEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan12HashFunctionEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan12HashFunctionEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan12HashFunctionEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_M_copyEPKSt13_Rb_tree_nodeIS5_EPSD_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan12HashFunctionEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan12StreamCipherEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan12StreamCipherEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan12StreamCipherEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_M_copyEPKSt13_Rb_tree_nodeIS5_EPSD_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan12StreamCipherEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan25MessageAuthenticationCodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan25MessageAuthenticationCodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan25MessageAuthenticationCodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_M_copyEPKSt13_Rb_tree_nodeIS5_EPSD_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan25MessageAuthenticationCodeEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan5PBKDFEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan5PBKDFEESt10_Select1stIS5_ESt4lessISsESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan5PBKDFEESt10_Select1stIS5_ESt4lessISsESaIS5_EE7_M_copyEPKSt13_Rb_tree_nodeIS5_EPSD_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan5PBKDFEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan9AllocatorEESt10_Select1stIS5_ESt4lessISsESaIS5_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS5_ERKS5_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan9AllocatorEESt10_Select1stIS5_ESt4lessISsESaIS5_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsPN5Botan9AllocatorEESt10_Select1stIS5_ESt4lessISsESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE10_M_insert_EPSt18_Rb_tree_node_baseSA_RKS2_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE11equal_rangeERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE4findERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE7_M_copyEPKSt13_Rb_tree_nodeIS2_EPSA_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSsESt10_Select1stIS2_ESt4lessISsESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan11BlockCipherESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISB_ERKSB_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan11BlockCipherESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan11BlockCipherESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE4findERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan11BlockCipherESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan12HashFunctionESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISB_ERKSB_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan12HashFunctionESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan12HashFunctionESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE4findERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan12HashFunctionESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan12StreamCipherESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISB_ERKSB_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan12StreamCipherESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan12StreamCipherESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE4findERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan12StreamCipherESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan25MessageAuthenticationCodeESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISB_ERKSB_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan25MessageAuthenticationCodeESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan25MessageAuthenticationCodeESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE4findERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan25MessageAuthenticationCodeESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan5PBKDFESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISB_ERKSB_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan5PBKDFESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan5PBKDFESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE4findERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsSt3mapISsPN5Botan5PBKDFESt4lessISsESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsbESt10_Select1stIS2_ESt4lessISsESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsbESt10_Select1stIS2_ESt4lessISsESaIS2_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsbESt10_Select1stIS2_ESt4lessISsESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsdESt10_Select1stIS2_ESt4lessISsESaIS2_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS2_ERKS2_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsdESt10_Select1stIS2_ESt4lessISsESaIS2_EE24_M_get_insert_unique_posERS1_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZNSt8_Rb_treeISsSt4pairIKSsdESt10_Select1stIS2_ESt4lessISsESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZSt4swapIN5Botan10X509_Store8CRL_DataEEvRT_S4_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_@Base 1.10.10
 (optional=templinst|arch=sparc64)_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan10DataSourceE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan11BlockCipherE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan12HashFunctionE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan12PK_DecryptorE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan12PK_EncryptorE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan13EntropySourceE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan14TLS_ConnectionE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan17Certificate_StoreE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan18SymmetricAlgorithmE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan20Buffered_ComputationE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan21Certificate_ExtensionE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan21Modular_ExponentiatorE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan21RandomNumberGeneratorE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan3EMEE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan3KDFE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan3MGFE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan4EMSAE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan5PBKDFE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan6PK_Ops10DecryptionE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan6PK_Ops10EncryptionE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan6PK_Ops12VerificationE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan6PK_Ops13Key_AgreementE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan6PK_Ops9SignatureE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan9AlgorithmE@Base 1.10.10
 (arch=sparc64)_ZTVN5Botan9AllocatorE@Base 1.10.10
 (arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)botan_md4_x86_32_compress@Base 1.10.10
 (arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)botan_md5_x86_32_compress@Base 1.10.10
 (arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)botan_serpent_x86_32_decrypt@Base 1.10.10
 (arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)botan_serpent_x86_32_encrypt@Base 1.10.10
 (arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)botan_serpent_x86_32_key_schedule@Base 1.10.10
 (arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)botan_sha160_x86_32_compress@Base 1.10.10
 (arch=amd64 kfreebsd-amd64)botan_sha160_x86_64_compress@Base 1.10.10
 (c++)"non-virtual thunk to Botan::ANSI_X919_MAC::clear()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::ANSI_X919_MAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::ANSI_X919_MAC::key_schedule(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::ANSI_X919_MAC::key_spec() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::ANSI_X919_MAC::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::ANSI_X919_MAC::~ANSI_X919_MAC()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Adler32::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Adler32::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Adler32::~Adler32()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::BMW_512::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::BMW_512::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::BMW_512::~BMW_512()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::CBC_Decryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::CBC_Decryption::buffered_block(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::CBC_Decryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::CBC_Decryption::buffered_final(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CBC_Decryption::~CBC_Decryption()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::CBC_Encryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::CBC_Encryption::buffered_block(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::CBC_Encryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::CBC_Encryption::buffered_final(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CBC_Encryption::~CBC_Encryption()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CBC_MAC::clear()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::CBC_MAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::CBC_MAC::key_schedule(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CBC_MAC::key_spec() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CBC_MAC::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CBC_MAC::~CBC_MAC()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CMAC::clear()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::CMAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::CMAC::key_schedule(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CMAC::key_spec() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CMAC::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CMAC::~CMAC()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CRC24::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CRC24::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CRC24::~CRC24()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CRC32::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CRC32::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::CRC32::~CRC32()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Comb4P::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Comb4P::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Comb4P::~Comb4P()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::DH_PrivateKey::public_value() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::DH_PrivateKey::~DH_PrivateKey()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::ECB_Decryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::ECB_Decryption::buffered_block(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::ECB_Decryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::ECB_Decryption::buffered_final(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::ECB_Decryption::~ECB_Decryption()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::ECB_Encryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::ECB_Encryption::buffered_block(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::ECB_Encryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::ECB_Encryption::buffered_final(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::ECB_Encryption::~ECB_Encryption()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::ECDH_PrivateKey::public_value() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::ECDH_PrivateKey::~ECDH_PrivateKey()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::ECDSA_PrivateKey::~ECDSA_PrivateKey()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::GOST_3410_PrivateKey::~GOST_3410_PrivateKey()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::GOST_34_11::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::GOST_34_11::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::GOST_34_11::~GOST_34_11()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::HAS_160::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::HAS_160::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::HAS_160::~HAS_160()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::HMAC::clear()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::HMAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::HMAC::key_schedule(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::HMAC::key_spec() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::HMAC::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::HMAC::~HMAC()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Keccak_1600::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Keccak_1600::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Keccak_1600::~Keccak_1600()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD2::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD2::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD2::~MD2()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD4::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD4::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD4::~MD4()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::MD4_X86_32::~MD4_X86_32()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD5::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD5::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MD5::~MD5()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::MD5_X86_32::~MD5_X86_32()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::MDx_HashFunction::clear()@Base" 1.10.10
 (c++|arch=mips mipsel powerpc ppc64el s390x sparc64)"non-virtual thunk to Botan::MDx_HashFunction::~MDx_HashFunction()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Parallel::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Parallel::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Parallel::~Parallel()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RIPEMD_128::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RIPEMD_128::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RIPEMD_128::~RIPEMD_128()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RIPEMD_160::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RIPEMD_160::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RIPEMD_160::~RIPEMD_160()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RSA_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RSA_PrivateKey::~RSA_PrivateKey()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::RSA_Private_Operation::decrypt(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::RSA_Private_Operation::decrypt(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RSA_Private_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RSA_Private_Operation::~RSA_Private_Operation()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::RSA_Public_Operation::encrypt(unsigned char const*, unsigned int, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::RSA_Public_Operation::encrypt(unsigned char const*, unsigned long, Botan::RandomNumberGenerator&)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RSA_Public_Operation::max_input_bits() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RSA_Public_Operation::~RSA_Public_Operation()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RW_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::RW_PrivateKey::~RW_PrivateKey()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_160::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_160::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_160::~SHA_160()@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"non-virtual thunk to Botan::SHA_160_SSE2::~SHA_160_SSE2()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::SHA_160_X86_32::~SHA_160_X86_32()@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"non-virtual thunk to Botan::SHA_160_X86_64::~SHA_160_X86_64()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_224::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_224::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_224::~SHA_224()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_256::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_256::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_256::~SHA_256()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_384::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_384::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_384::~SHA_384()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_512::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_512::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SHA_512::~SHA_512()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SSL3_MAC::clear()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::SSL3_MAC::key_schedule(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::SSL3_MAC::key_schedule(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SSL3_MAC::key_spec() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SSL3_MAC::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SSL3_MAC::~SSL3_MAC()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::SecureQueue::check_available(unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::SecureQueue::check_available(unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SecureQueue::end_of_data() const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::SecureQueue::peek(unsigned char*, unsigned int, unsigned int) const@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::SecureQueue::peek(unsigned char*, unsigned long, unsigned long) const@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::SecureQueue::read(unsigned char*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::SecureQueue::read(unsigned char*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::SecureQueue::~SecureQueue()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Skein_512::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Skein_512::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Skein_512::~Skein_512()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Tiger::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Tiger::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Tiger::~Tiger()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Whirlpool::clear()@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Whirlpool::name() const@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::Whirlpool::~Whirlpool()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::XTS_Decryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::XTS_Decryption::buffered_block(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::XTS_Decryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::XTS_Decryption::buffered_final(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::XTS_Decryption::~XTS_Decryption()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::XTS_Encryption::buffered_block(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::XTS_Encryption::buffered_block(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"non-virtual thunk to Botan::XTS_Encryption::buffered_final(unsigned char const*, unsigned int)@Base" 1.10.10
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 ppc64el s390x sparc64)"non-virtual thunk to Botan::XTS_Encryption::buffered_final(unsigned char const*, unsigned long)@Base" 1.10.10
 (c++)"non-virtual thunk to Botan::XTS_Encryption::~XTS_Encryption()@Base" 1.10.10
 (c++)"std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > >::_M_erase(std::_Rb_tree_node<std::pair<Botan::OID const, Botan::ASN1_String> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > >::operator=(std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<Botan::OID const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_erase(std::_Rb_tree_node<std::pair<Botan::OID const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::Allocator*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::Allocator*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::Allocator*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::Allocator*> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::Allocator*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::Allocator*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::Allocator*> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_insert_equal(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator=(std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > > > >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > > > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > > > >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > > > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > > > >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > > > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > > > >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > > > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > > > >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > > > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"std::_Rb_tree<void*, std::pair<void* const, unsigned int>, std::_Select1st<std::pair<void* const, unsigned int> >, std::less<void*>, std::allocator<std::pair<void* const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<void* const, unsigned int> >*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<Botan::OID const, Botan::ASN1_String> >* std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > >::_M_copy<std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<Botan::OID const, Botan::ASN1_String> > const*, std::_Rb_tree_node<std::pair<Botan::OID const, Botan::ASN1_String> >*, std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > >::_Alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<Botan::OID const, Botan::ASN1_String> >* std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > >::_M_copy<std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<Botan::OID const, Botan::ASN1_String> > const*, std::_Rb_tree_node<std::pair<Botan::OID const, Botan::ASN1_String> >*, std::_Rb_tree<Botan::OID, std::pair<Botan::OID const, Botan::ASN1_String>, std::_Select1st<std::pair<Botan::OID const, Botan::ASN1_String> >, std::less<Botan::OID>, std::allocator<std::pair<Botan::OID const, Botan::ASN1_String> > >::_Reuse_or_alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > const*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> >*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > >::_Alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > const*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> >*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > >::_Alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > const*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> >*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > >::_Alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > const*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> >*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > >::_Alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > const*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> >*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > >::_Alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_Alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_Reuse_or_alloc_node&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)@Base" 1.10.10
 (c++|arch=!sparc64)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_copy<false>::__uninit_copy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)@Base" 1.10.10
 (c++)"std::auto_ptr<Botan::PK_Signer>::~auto_ptr()@Base" 1.10.10
 (c++)"std::ctype<char>::do_widen(char) const@Base" 1.10.10
 (c++|arch=!sparc64)"std::deque<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_push_back_aux(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::deque<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~deque()@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::BlockCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::BlockCipher*> > > > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::HashFunction*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::HashFunction*> > > > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::MessageAuthenticationCode*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::MessageAuthenticationCode*> > > > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::PBKDF*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::PBKDF*> > > > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Botan::StreamCipher*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, Botan::StreamCipher*> > > > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~pair()@Base" 1.10.10
 (c++)"std::tr1::bad_function_call::~bad_function_call()@Base" 1.10.10
 (c++)"std::vector<Botan::Allocator*, std::allocator<Botan::Allocator*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::Allocator**, std::vector<Botan::Allocator*, std::allocator<Botan::Allocator*> > >, Botan::Allocator* const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"std::vector<Botan::BigInt, std::allocator<Botan::BigInt> >::_M_fill_insert(__gnu_cxx::__normal_iterator<Botan::BigInt*, std::vector<Botan::BigInt, std::allocator<Botan::BigInt> > >, unsigned int, Botan::BigInt const&)@Base" 1.10.10
 (c++)"std::vector<Botan::BigInt, std::allocator<Botan::BigInt> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::BigInt*, std::vector<Botan::BigInt, std::allocator<Botan::BigInt> > >, Botan::BigInt const&)@Base" 1.10.10
 (c++)"std::vector<Botan::BigInt, std::allocator<Botan::BigInt> >::~vector()@Base" 1.10.10
 (c++)"std::vector<Botan::CRL_Entry, std::allocator<Botan::CRL_Entry> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::CRL_Entry*, std::vector<Botan::CRL_Entry, std::allocator<Botan::CRL_Entry> > >, Botan::CRL_Entry const&)@Base" 1.10.10
 (c++)"std::vector<Botan::CRL_Entry, std::allocator<Botan::CRL_Entry> >::operator=(std::vector<Botan::CRL_Entry, std::allocator<Botan::CRL_Entry> > const&)@Base" 1.10.10
 (c++)"std::vector<Botan::CRL_Entry, std::allocator<Botan::CRL_Entry> >::~vector()@Base" 1.10.10
 (c++)"std::vector<Botan::Certificate_Store*, std::allocator<Botan::Certificate_Store*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::Certificate_Store**, std::vector<Botan::Certificate_Store*, std::allocator<Botan::Certificate_Store*> > >, Botan::Certificate_Store* const&)@Base" 1.10.10
 (c++)"std::vector<Botan::Certificate_Type, std::allocator<Botan::Certificate_Type> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::Certificate_Type*, std::vector<Botan::Certificate_Type, std::allocator<Botan::Certificate_Type> > >, Botan::Certificate_Type const&)@Base" 1.10.10
 (c++)"std::vector<Botan::DER_Encoder::DER_Sequence, std::allocator<Botan::DER_Encoder::DER_Sequence> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::DER_Encoder::DER_Sequence*, std::vector<Botan::DER_Encoder::DER_Sequence, std::allocator<Botan::DER_Encoder::DER_Sequence> > >, Botan::DER_Encoder::DER_Sequence const&)@Base" 1.10.10
 (c++)"std::vector<Botan::EntropySource*, std::allocator<Botan::EntropySource*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::EntropySource**, std::vector<Botan::EntropySource*, std::allocator<Botan::EntropySource*> > >, Botan::EntropySource* const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"std::vector<Botan::Filter*, std::allocator<Botan::Filter*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<Botan::Filter**, std::vector<Botan::Filter*, std::allocator<Botan::Filter*> > >, unsigned int, Botan::Filter* const&)@Base" 1.10.10
 (c++)"std::vector<Botan::HashFunction const*, std::allocator<Botan::HashFunction const*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::HashFunction const**, std::vector<Botan::HashFunction const*, std::allocator<Botan::HashFunction const*> > >, Botan::HashFunction const* const&)@Base" 1.10.10
 (c++)"std::vector<Botan::HashFunction*, std::allocator<Botan::HashFunction*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::HashFunction**, std::vector<Botan::HashFunction*, std::allocator<Botan::HashFunction*> > >, Botan::HashFunction* const&)@Base" 1.10.10
 (c++)"std::vector<Botan::OID, std::allocator<Botan::OID> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::OID*, std::vector<Botan::OID, std::allocator<Botan::OID> > >, Botan::OID const&)@Base" 1.10.10
 (c++)"std::vector<Botan::PointGFp, std::allocator<Botan::PointGFp> >::~vector()@Base" 1.10.10
 (c++)"std::vector<Botan::RTSS_Share, std::allocator<Botan::RTSS_Share> >::~vector()@Base" 1.10.10
 (c++)"std::vector<Botan::X509_CRL, std::allocator<Botan::X509_CRL> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::X509_CRL*, std::vector<Botan::X509_CRL, std::allocator<Botan::X509_CRL> > >, Botan::X509_CRL const&)@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Certificate, std::allocator<Botan::X509_Certificate> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::X509_Certificate*, std::vector<Botan::X509_Certificate, std::allocator<Botan::X509_Certificate> > >, Botan::X509_Certificate const&)@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Certificate, std::allocator<Botan::X509_Certificate> >::operator=(std::vector<Botan::X509_Certificate, std::allocator<Botan::X509_Certificate> > const&)@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Certificate, std::allocator<Botan::X509_Certificate> >::~vector()@Base" 1.10.10
 (c++)"std::vector<Botan::X509_DN, std::allocator<Botan::X509_DN> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::X509_DN*, std::vector<Botan::X509_DN, std::allocator<Botan::X509_DN> > >, Botan::X509_DN const&)@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Store::CRL_Data, std::allocator<Botan::X509_Store::CRL_Data> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::X509_Store::CRL_Data*, std::vector<Botan::X509_Store::CRL_Data, std::allocator<Botan::X509_Store::CRL_Data> > >, Botan::X509_Store::CRL_Data const&)@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Store::CRL_Data, std::allocator<Botan::X509_Store::CRL_Data> >::operator=(std::vector<Botan::X509_Store::CRL_Data, std::allocator<Botan::X509_Store::CRL_Data> > const&)@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Store::CRL_Data, std::allocator<Botan::X509_Store::CRL_Data> >::~vector()@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Store::Cert_Info, std::allocator<Botan::X509_Store::Cert_Info> >::_M_insert_aux(__gnu_cxx::__normal_iterator<Botan::X509_Store::Cert_Info*, std::vector<Botan::X509_Store::Cert_Info, std::allocator<Botan::X509_Store::Cert_Info> > >, Botan::X509_Store::Cert_Info const&)@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Store::Cert_Info, std::allocator<Botan::X509_Store::Cert_Info> >::operator=(std::vector<Botan::X509_Store::Cert_Info, std::allocator<Botan::X509_Store::Cert_Info> > const&)@Base" 1.10.10
 (c++)"std::vector<Botan::X509_Store::Cert_Info, std::allocator<Botan::X509_Store::Cert_Info> >::~vector()@Base" 1.10.10
 (c++)"std::vector<char, std::allocator<char> >::_M_insert_aux(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, char const&)@Base" 1.10.10
 (c++)"std::vector<int, std::allocator<int> >::_M_insert_aux(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator=(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 1.10.10
 (c++|arch=!sparc64)"std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()@Base" 1.10.10
 (c++)"std::vector<std::pair<Botan::Certificate_Extension*, bool>, std::allocator<std::pair<Botan::Certificate_Extension*, bool> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<Botan::Certificate_Extension*, bool>*, std::vector<std::pair<Botan::Certificate_Extension*, bool>, std::allocator<std::pair<Botan::Certificate_Extension*, bool> > > >, std::pair<Botan::Certificate_Extension*, bool> const&)@Base" 1.10.10
 (c++)"std::vector<std::pair<Botan::X509_Certificate, Botan::Private_Key*>, std::allocator<std::pair<Botan::X509_Certificate, Botan::Private_Key*> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<Botan::X509_Certificate, Botan::Private_Key*>*, std::vector<std::pair<Botan::X509_Certificate, Botan::Private_Key*>, std::allocator<std::pair<Botan::X509_Certificate, Botan::Private_Key*> > > >, std::pair<Botan::X509_Certificate, Botan::Private_Key*> const&)@Base" 1.10.10
 (c++)"std::vector<std::pair<Botan::X509_Certificate, Botan::Private_Key*>, std::allocator<std::pair<Botan::X509_Certificate, Botan::Private_Key*> > >::~vector()@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"std::vector<std::pair<unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*, std::vector<std::pair<unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::pair<unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !kfreebsd-amd64 !ppc64el !s390x !sparc64)"std::vector<std::pair<void*, unsigned int>, std::allocator<std::pair<void*, unsigned int> > >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::pair<void*, unsigned int>*, std::vector<std::pair<void*, unsigned int>, std::allocator<std::pair<void*, unsigned int> > > >, std::pair<void*, unsigned int> const&)@Base" 1.10.10
 (c++)"std::vector<unsigned char, std::allocator<unsigned char> >::operator=(std::vector<unsigned char, std::allocator<unsigned char> > const&)@Base" 1.10.10
 (c++)"std::vector<unsigned int, std::allocator<unsigned int> >::_M_insert_aux(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)@Base" 1.10.10
 (c++)"std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 1.10.10
 (c++)"std::vector<unsigned short, std::allocator<unsigned short> >::_M_insert_aux(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned short const&)@Base" 1.10.10
 (c++)"std::vector<unsigned short, std::allocator<unsigned short> >::operator=(std::vector<unsigned short, std::allocator<unsigned short> > const&)@Base" 1.10.10
 (c++)"typeinfo for Botan::AES_128@Base" 1.10.10
 (c++)"typeinfo for Botan::AES_192@Base" 1.10.10
 (c++)"typeinfo for Botan::AES_256@Base" 1.10.10
 (c++)"typeinfo for Botan::ANSI_X919_MAC@Base" 1.10.10
 (c++)"typeinfo for Botan::ANSI_X923_Padding@Base" 1.10.10
 (c++)"typeinfo for Botan::ANSI_X931_RNG@Base" 1.10.10
 (c++)"typeinfo for Botan::ARC4@Base" 1.10.10
 (c++)"typeinfo for Botan::ASN1_Object@Base" 1.10.10
 (c++)"typeinfo for Botan::ASN1_String@Base" 1.10.10
 (c++)"typeinfo for Botan::Adler32@Base" 1.10.10
 (c++)"typeinfo for Botan::Algorithm@Base" 1.10.10
 (c++)"typeinfo for Botan::AlgorithmIdentifier@Base" 1.10.10
 (c++)"typeinfo for Botan::Algorithm_Not_Found@Base" 1.10.10
 (c++)"typeinfo for Botan::Allocator@Base" 1.10.10
 (c++)"typeinfo for Botan::AlternativeName@Base" 1.10.10
 (c++)"typeinfo for Botan::Attribute@Base" 1.10.10
 (c++)"typeinfo for Botan::AutoSeeded_RNG@Base" 1.10.10
 (c++)"typeinfo for Botan::BER_Bad_Tag@Base" 1.10.10
 (c++)"typeinfo for Botan::BER_Decoding_Error@Base" 1.10.10
 (c++)"typeinfo for Botan::BMW_512@Base" 1.10.10
 (c++)"typeinfo for Botan::Base64_Decoder@Base" 1.10.10
 (c++)"typeinfo for Botan::Base64_Encoder@Base" 1.10.10
 (c++)"typeinfo for Botan::BigInt::DivideByZero@Base" 1.10.10
 (c++)"typeinfo for Botan::BlockCipher@Base" 1.10.10
 (c++)"typeinfo for Botan::BlockCipherModePaddingMethod@Base" 1.10.10
 (c++)"typeinfo for Botan::Blowfish@Base" 1.10.10
 (c++)"typeinfo for Botan::Buffered_Computation@Base" 1.10.10
 (c++)"typeinfo for Botan::Buffered_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::Bzip_Compression@Base" 1.10.10
 (c++)"typeinfo for Botan::Bzip_Decompression@Base" 1.10.10
 (c++)"typeinfo for Botan::CAST_128@Base" 1.10.10
 (c++)"typeinfo for Botan::CAST_256@Base" 1.10.10
 (c++)"typeinfo for Botan::CBC_Decryption@Base" 1.10.10
 (c++)"typeinfo for Botan::CBC_Encryption@Base" 1.10.10
 (c++)"typeinfo for Botan::CBC_MAC@Base" 1.10.10
 (c++)"typeinfo for Botan::CFB_Decryption@Base" 1.10.10
 (c++)"typeinfo for Botan::CFB_Encryption@Base" 1.10.10
 (c++)"typeinfo for Botan::CMAC@Base" 1.10.10
 (c++)"typeinfo for Botan::CRC24@Base" 1.10.10
 (c++)"typeinfo for Botan::CRC32@Base" 1.10.10
 (c++)"typeinfo for Botan::CRL_Entry@Base" 1.10.10
 (c++)"typeinfo for Botan::CTR_BE@Base" 1.10.10
 (c++)"typeinfo for Botan::CTS_Decryption@Base" 1.10.10
 (c++)"typeinfo for Botan::CTS_Encryption@Base" 1.10.10
 (c++)"typeinfo for Botan::Camellia_128@Base" 1.10.10
 (c++)"typeinfo for Botan::Camellia_192@Base" 1.10.10
 (c++)"typeinfo for Botan::Camellia_256@Base" 1.10.10
 (c++)"typeinfo for Botan::Cascade_Cipher@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Alternative_Name@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Authority_Key_ID@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Basic_Constraints@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::CRL_Number@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::CRL_ReasonCode@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Certificate_Policies@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Extended_Key_Usage@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Issuer_Alternative_Name@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Key_Usage@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Subject_Alternative_Name@Base" 1.10.10
 (c++)"typeinfo for Botan::Cert_Extension::Subject_Key_ID@Base" 1.10.10
 (c++)"typeinfo for Botan::Certificate_Extension@Base" 1.10.10
 (c++)"typeinfo for Botan::Certificate_Store@Base" 1.10.10
 (c++)"typeinfo for Botan::Certificate_Store_Memory@Base" 1.10.10
 (c++)"typeinfo for Botan::Chain@Base" 1.10.10
 (c++)"typeinfo for Botan::Comb4P@Base" 1.10.10
 (c++)"typeinfo for Botan::DES@Base" 1.10.10
 (c++)"typeinfo for Botan::DESX@Base" 1.10.10
 (c++)"typeinfo for Botan::DH_KA_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::DH_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::DH_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::DLIES_Decryptor@Base" 1.10.10
 (c++)"typeinfo for Botan::DLIES_Encryptor@Base" 1.10.10
 (c++)"typeinfo for Botan::DL_Scheme_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::DL_Scheme_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::DSA_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::DSA_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::DSA_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::DSA_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::DataSink@Base" 1.10.10
 (c++)"typeinfo for Botan::DataSink_Stream@Base" 1.10.10
 (c++)"typeinfo for Botan::DataSource@Base" 1.10.10
 (c++)"typeinfo for Botan::DataSource_Memory@Base" 1.10.10
 (c++)"typeinfo for Botan::DataSource_Stream@Base" 1.10.10
 (c++)"typeinfo for Botan::Data_Store::Matcher@Base" 1.10.10
 (c++)"typeinfo for Botan::Decoding_Error@Base" 1.10.10
 (c++)"typeinfo for Botan::Dynamically_Loaded_Engine@Base" 1.10.10
 (c++)"typeinfo for Botan::EAX_Base@Base" 1.10.10
 (c++)"typeinfo for Botan::EAX_Decryption@Base" 1.10.10
 (c++)"typeinfo for Botan::EAX_Encryption@Base" 1.10.10
 (c++)"typeinfo for Botan::ECB_Decryption@Base" 1.10.10
 (c++)"typeinfo for Botan::ECB_Encryption@Base" 1.10.10
 (c++)"typeinfo for Botan::ECDH_KA_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::ECDH_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::ECDH_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::ECDSA_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::ECDSA_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::ECDSA_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::ECDSA_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::EC_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::EC_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::EME1@Base" 1.10.10
 (c++)"typeinfo for Botan::EME@Base" 1.10.10
 (c++)"typeinfo for Botan::EME_PKCS1v15@Base" 1.10.10
 (c++)"typeinfo for Botan::EMSA1@Base" 1.10.10
 (c++)"typeinfo for Botan::EMSA1_BSI@Base" 1.10.10
 (c++)"typeinfo for Botan::EMSA2@Base" 1.10.10
 (c++)"typeinfo for Botan::EMSA3@Base" 1.10.10
 (c++)"typeinfo for Botan::EMSA3_Raw@Base" 1.10.10
 (c++)"typeinfo for Botan::EMSA4@Base" 1.10.10
 (c++)"typeinfo for Botan::EMSA@Base" 1.10.10
 (c++)"typeinfo for Botan::EMSA_Raw@Base" 1.10.10
 (c++)"typeinfo for Botan::ElGamal_Decryption_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::ElGamal_Encryption_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::ElGamal_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::ElGamal_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::Encoding_Error@Base" 1.10.10
 (c++)"typeinfo for Botan::Engine@Base" 1.10.10
 (c++)"typeinfo for Botan::EntropySource@Base" 1.10.10
 (c++)"typeinfo for Botan::Entropy_Accumulator@Base" 1.10.10
 (c++)"typeinfo for Botan::Entropy_Accumulator_BufferedComputation@Base" 1.10.10
 (c++)"typeinfo for Botan::Extensions@Base" 1.10.10
 (c++)"typeinfo for Botan::Fanout_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::Fixed_Base_Power_Mod@Base" 1.10.10
 (c++)"typeinfo for Botan::Fixed_Exponent_Power_Mod@Base" 1.10.10
 (c++)"typeinfo for Botan::Fork@Base" 1.10.10
 (c++)"typeinfo for Botan::GOST_28147_89@Base" 1.10.10
 (c++)"typeinfo for Botan::GOST_3410_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::GOST_3410_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::GOST_3410_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::GOST_3410_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::GOST_34_11@Base" 1.10.10
 (c++)"typeinfo for Botan::HAS_160@Base" 1.10.10
 (c++)"typeinfo for Botan::HMAC@Base" 1.10.10
 (c++)"typeinfo for Botan::HMAC_RNG@Base" 1.10.10
 (c++)"typeinfo for Botan::HashFunction@Base" 1.10.10
 (c++)"typeinfo for Botan::Hash_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::Hex_Decoder@Base" 1.10.10
 (c++)"typeinfo for Botan::Hex_Encoder@Base" 1.10.10
 (c++)"typeinfo for Botan::IDEA@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"typeinfo for Botan::IDEA_SSE2@Base" 1.10.10
 (c++)"typeinfo for Botan::IF_Scheme_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::IF_Scheme_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::Illegal_Point@Base" 1.10.10
 (c++)"typeinfo for Botan::Illegal_Transformation@Base" 1.10.10
 (c++)"typeinfo for Botan::Integrity_Failure@Base" 1.10.10
 (c++)"typeinfo for Botan::Internal_Error@Base" 1.10.10
 (c++)"typeinfo for Botan::Invalid_Algorithm_Name@Base" 1.10.10
 (c++)"typeinfo for Botan::Invalid_Block_Size@Base" 1.10.10
 (c++)"typeinfo for Botan::Invalid_IV_Length@Base" 1.10.10
 (c++)"typeinfo for Botan::Invalid_Key_Length@Base" 1.10.10
 (c++)"typeinfo for Botan::Invalid_OID@Base" 1.10.10
 (c++)"typeinfo for Botan::Invalid_State@Base" 1.10.10
 (c++)"typeinfo for Botan::KASUMI@Base" 1.10.10
 (c++)"typeinfo for Botan::KDF1@Base" 1.10.10
 (c++)"typeinfo for Botan::KDF2@Base" 1.10.10
 (c++)"typeinfo for Botan::KDF@Base" 1.10.10
 (c++)"typeinfo for Botan::Keccak_1600@Base" 1.10.10
 (c++)"typeinfo for Botan::Keyed_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::Lion@Base" 1.10.10
 (c++)"typeinfo for Botan::Lookup_Error@Base" 1.10.10
 (c++)"typeinfo for Botan::LubyRackoff@Base" 1.10.10
 (c++)"typeinfo for Botan::MAC_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::MARS@Base" 1.10.10
 (c++)"typeinfo for Botan::MD2@Base" 1.10.10
 (c++)"typeinfo for Botan::MD4@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"typeinfo for Botan::MD4_X86_32@Base" 1.10.10
 (c++)"typeinfo for Botan::MD5@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"typeinfo for Botan::MD5_X86_32@Base" 1.10.10
 (c++)"typeinfo for Botan::MDx_HashFunction@Base" 1.10.10
 (c++)"typeinfo for Botan::MGF1@Base" 1.10.10
 (c++)"typeinfo for Botan::MGF@Base" 1.10.10
 (c++)"typeinfo for Botan::MISTY1@Base" 1.10.10
 (c++)"typeinfo for Botan::Memory_Exhaustion@Base" 1.10.10
 (c++)"typeinfo for Botan::MessageAuthenticationCode@Base" 1.10.10
 (c++)"typeinfo for Botan::Modular_Exponentiator@Base" 1.10.10
 (c++)"typeinfo for Botan::NR_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::NR_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::NR_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::NR_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::Noekeon@Base" 1.10.10
 (c++)"typeinfo for Botan::Noekeon_SIMD@Base" 1.10.10
 (c++)"typeinfo for Botan::Null_Padding@Base" 1.10.10
 (c++)"typeinfo for Botan::Null_RNG@Base" 1.10.10
 (c++)"typeinfo for Botan::OFB@Base" 1.10.10
 (c++)"typeinfo for Botan::OID@Base" 1.10.10
 (c++)"typeinfo for Botan::OneAndZeros_Padding@Base" 1.10.10
 (c++)"typeinfo for Botan::OpenPGP_S2K@Base" 1.10.10
 (c++)"typeinfo for Botan::PBE@Base" 1.10.10
 (c++)"typeinfo for Botan::PBE_PKCS5v15@Base" 1.10.10
 (c++)"typeinfo for Botan::PBE_PKCS5v20@Base" 1.10.10
 (c++)"typeinfo for Botan::PBKDF@Base" 1.10.10
 (c++)"typeinfo for Botan::PKCS10_Request@Base" 1.10.10
 (c++)"typeinfo for Botan::PKCS5_PBKDF1@Base" 1.10.10
 (c++)"typeinfo for Botan::PKCS5_PBKDF2@Base" 1.10.10
 (c++)"typeinfo for Botan::PKCS7_Padding@Base" 1.10.10
 (c++)"typeinfo for Botan::PKCS8_Exception@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Decryptor@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Decryptor_EME@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Decryptor_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Encryptor@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Encryptor_EME@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Encryptor_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Key_Agreement_Key@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Ops::Decryption@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Ops::Encryption@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Ops::Key_Agreement@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Ops::Signature@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Ops::Verification@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Signer_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::PK_Verifier_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::PRNG_Unseeded@Base" 1.10.10
 (c++)"typeinfo for Botan::Parallel@Base" 1.10.10
 (c++)"typeinfo for Botan::Pipe::Invalid_Message_Number@Base" 1.10.10
 (c++)"typeinfo for Botan::Pipe@Base" 1.10.10
 (c++)"typeinfo for Botan::Power_Mod@Base" 1.10.10
 (c++)"typeinfo for Botan::Private_Key@Base" 1.10.10
 (c++)"typeinfo for Botan::Public_Key@Base" 1.10.10
 (c++)"typeinfo for Botan::RC2@Base" 1.10.10
 (c++)"typeinfo for Botan::RC5@Base" 1.10.10
 (c++)"typeinfo for Botan::RC6@Base" 1.10.10
 (c++)"typeinfo for Botan::RIPEMD_128@Base" 1.10.10
 (c++)"typeinfo for Botan::RIPEMD_160@Base" 1.10.10
 (c++)"typeinfo for Botan::RSA_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::RSA_Private_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::RSA_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::RSA_Public_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::RW_PrivateKey@Base" 1.10.10
 (c++)"typeinfo for Botan::RW_PublicKey@Base" 1.10.10
 (c++)"typeinfo for Botan::RW_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::RW_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo for Botan::RandomNumberGenerator@Base" 1.10.10
 (c++)"typeinfo for Botan::Randpool@Base" 1.10.10
 (c++)"typeinfo for Botan::SAFER_SK@Base" 1.10.10
 (c++)"typeinfo for Botan::SEED@Base" 1.10.10
 (c++)"typeinfo for Botan::SHA_160@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"typeinfo for Botan::SHA_160_SSE2@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"typeinfo for Botan::SHA_160_X86_32@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"typeinfo for Botan::SHA_160_X86_64@Base" 1.10.10
 (c++)"typeinfo for Botan::SHA_224@Base" 1.10.10
 (c++)"typeinfo for Botan::SHA_256@Base" 1.10.10
 (c++)"typeinfo for Botan::SHA_384@Base" 1.10.10
 (c++)"typeinfo for Botan::SHA_512@Base" 1.10.10
 (c++)"typeinfo for Botan::SSL3_MAC@Base" 1.10.10
 (c++)"typeinfo for Botan::SSL3_PRF@Base" 1.10.10
 (c++)"typeinfo for Botan::Salsa20@Base" 1.10.10
 (c++)"typeinfo for Botan::SecureQueue@Base" 1.10.10
 (c++)"typeinfo for Botan::Self_Test_Failure@Base" 1.10.10
 (c++)"typeinfo for Botan::Serpent@Base" 1.10.10
 (c++)"typeinfo for Botan::Serpent_SIMD@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"typeinfo for Botan::Serpent_X86_32@Base" 1.10.10
 (c++)"typeinfo for Botan::Skein_512@Base" 1.10.10
 (c++)"typeinfo for Botan::Skipjack@Base" 1.10.10
 (c++)"typeinfo for Botan::Square@Base" 1.10.10
 (c++)"typeinfo for Botan::StreamCipher@Base" 1.10.10
 (c++)"typeinfo for Botan::StreamCipher_Filter@Base" 1.10.10
 (c++)"typeinfo for Botan::Stream_IO_Error@Base" 1.10.10
 (c++)"typeinfo for Botan::SymmetricAlgorithm@Base" 1.10.10
 (c++)"typeinfo for Botan::TEA@Base" 1.10.10
 (c++)"typeinfo for Botan::TLS_12_PRF@Base" 1.10.10
 (c++)"typeinfo for Botan::TLS_Client@Base" 1.10.10
 (c++)"typeinfo for Botan::TLS_Connection@Base" 1.10.10
 (c++)"typeinfo for Botan::TLS_Exception@Base" 1.10.10
 (c++)"typeinfo for Botan::TLS_PRF@Base" 1.10.10
 (c++)"typeinfo for Botan::TLS_Policy@Base" 1.10.10
 (c++)"typeinfo for Botan::TLS_Server@Base" 1.10.10
 (c++)"typeinfo for Botan::Tiger@Base" 1.10.10
 (c++)"typeinfo for Botan::TripleDES@Base" 1.10.10
 (c++)"typeinfo for Botan::Turing@Base" 1.10.10
 (c++)"typeinfo for Botan::Twofish@Base" 1.10.10
 (c++)"typeinfo for Botan::Unexpected_Message@Base" 1.10.10
 (c++)"typeinfo for Botan::User_Interface@Base" 1.10.10
 (c++)"typeinfo for Botan::Whirlpool@Base" 1.10.10
 (c++)"typeinfo for Botan::WiderWake_41_BE@Base" 1.10.10
 (c++)"typeinfo for Botan::X509_CRL::X509_CRL_Error@Base" 1.10.10
 (c++)"typeinfo for Botan::X509_CRL@Base" 1.10.10
 (c++)"typeinfo for Botan::X509_Certificate@Base" 1.10.10
 (c++)"typeinfo for Botan::X509_DN@Base" 1.10.10
 (c++)"typeinfo for Botan::X509_Object@Base" 1.10.10
 (c++)"typeinfo for Botan::X509_Time@Base" 1.10.10
 (c++)"typeinfo for Botan::X942_PRF@Base" 1.10.10
 (c++)"typeinfo for Botan::XTEA@Base" 1.10.10
 (c++)"typeinfo for Botan::XTEA_SIMD@Base" 1.10.10
 (c++)"typeinfo for Botan::XTS_Decryption@Base" 1.10.10
 (c++)"typeinfo for Botan::XTS_Encryption@Base" 1.10.10
 (c++)"typeinfo for Botan::Zlib_Compression@Base" 1.10.10
 (c++)"typeinfo for Botan::Zlib_Decompression@Base" 1.10.10
 (c++)"typeinfo for std::tr1::bad_function_call@Base" 1.10.10
 (c++)"typeinfo name for Botan::AES_128@Base" 1.10.10
 (c++)"typeinfo name for Botan::AES_192@Base" 1.10.10
 (c++)"typeinfo name for Botan::AES_256@Base" 1.10.10
 (c++)"typeinfo name for Botan::ANSI_X919_MAC@Base" 1.10.10
 (c++)"typeinfo name for Botan::ANSI_X923_Padding@Base" 1.10.10
 (c++)"typeinfo name for Botan::ANSI_X931_RNG@Base" 1.10.10
 (c++)"typeinfo name for Botan::ARC4@Base" 1.10.10
 (c++)"typeinfo name for Botan::ASN1_Object@Base" 1.10.10
 (c++)"typeinfo name for Botan::ASN1_String@Base" 1.10.10
 (c++)"typeinfo name for Botan::Adler32@Base" 1.10.10
 (c++)"typeinfo name for Botan::Algorithm@Base" 1.10.10
 (c++)"typeinfo name for Botan::AlgorithmIdentifier@Base" 1.10.10
 (c++)"typeinfo name for Botan::Algorithm_Not_Found@Base" 1.10.10
 (c++)"typeinfo name for Botan::Allocator@Base" 1.10.10
 (c++)"typeinfo name for Botan::AlternativeName@Base" 1.10.10
 (c++)"typeinfo name for Botan::Attribute@Base" 1.10.10
 (c++)"typeinfo name for Botan::AutoSeeded_RNG@Base" 1.10.10
 (c++)"typeinfo name for Botan::BER_Bad_Tag@Base" 1.10.10
 (c++)"typeinfo name for Botan::BER_Decoding_Error@Base" 1.10.10
 (c++)"typeinfo name for Botan::BMW_512@Base" 1.10.10
 (c++)"typeinfo name for Botan::Base64_Decoder@Base" 1.10.10
 (c++)"typeinfo name for Botan::Base64_Encoder@Base" 1.10.10
 (c++)"typeinfo name for Botan::BigInt::DivideByZero@Base" 1.10.10
 (c++)"typeinfo name for Botan::BlockCipher@Base" 1.10.10
 (c++)"typeinfo name for Botan::BlockCipherModePaddingMethod@Base" 1.10.10
 (c++)"typeinfo name for Botan::Blowfish@Base" 1.10.10
 (c++)"typeinfo name for Botan::Buffered_Computation@Base" 1.10.10
 (c++)"typeinfo name for Botan::Buffered_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::Bzip_Compression@Base" 1.10.10
 (c++)"typeinfo name for Botan::Bzip_Decompression@Base" 1.10.10
 (c++)"typeinfo name for Botan::CAST_128@Base" 1.10.10
 (c++)"typeinfo name for Botan::CAST_256@Base" 1.10.10
 (c++)"typeinfo name for Botan::CBC_Decryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::CBC_Encryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::CBC_MAC@Base" 1.10.10
 (c++)"typeinfo name for Botan::CFB_Decryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::CFB_Encryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::CMAC@Base" 1.10.10
 (c++)"typeinfo name for Botan::CRC24@Base" 1.10.10
 (c++)"typeinfo name for Botan::CRC32@Base" 1.10.10
 (c++)"typeinfo name for Botan::CRL_Entry@Base" 1.10.10
 (c++)"typeinfo name for Botan::CTR_BE@Base" 1.10.10
 (c++)"typeinfo name for Botan::CTS_Decryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::CTS_Encryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::Camellia_128@Base" 1.10.10
 (c++)"typeinfo name for Botan::Camellia_192@Base" 1.10.10
 (c++)"typeinfo name for Botan::Camellia_256@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cascade_Cipher@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Alternative_Name@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Authority_Key_ID@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Basic_Constraints@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::CRL_Number@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::CRL_ReasonCode@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Certificate_Policies@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Extended_Key_Usage@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Issuer_Alternative_Name@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Key_Usage@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Subject_Alternative_Name@Base" 1.10.10
 (c++)"typeinfo name for Botan::Cert_Extension::Subject_Key_ID@Base" 1.10.10
 (c++)"typeinfo name for Botan::Certificate_Extension@Base" 1.10.10
 (c++)"typeinfo name for Botan::Certificate_Store@Base" 1.10.10
 (c++)"typeinfo name for Botan::Certificate_Store_Memory@Base" 1.10.10
 (c++)"typeinfo name for Botan::Chain@Base" 1.10.10
 (c++)"typeinfo name for Botan::Comb4P@Base" 1.10.10
 (c++)"typeinfo name for Botan::DES@Base" 1.10.10
 (c++)"typeinfo name for Botan::DESX@Base" 1.10.10
 (c++)"typeinfo name for Botan::DH_KA_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::DH_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::DH_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::DLIES_Decryptor@Base" 1.10.10
 (c++)"typeinfo name for Botan::DLIES_Encryptor@Base" 1.10.10
 (c++)"typeinfo name for Botan::DL_Scheme_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::DL_Scheme_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::DSA_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::DSA_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::DSA_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::DSA_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::DataSink@Base" 1.10.10
 (c++)"typeinfo name for Botan::DataSink_Stream@Base" 1.10.10
 (c++)"typeinfo name for Botan::DataSource@Base" 1.10.10
 (c++)"typeinfo name for Botan::DataSource_Memory@Base" 1.10.10
 (c++)"typeinfo name for Botan::DataSource_Stream@Base" 1.10.10
 (c++)"typeinfo name for Botan::Data_Store::Matcher@Base" 1.10.10
 (c++)"typeinfo name for Botan::Decoding_Error@Base" 1.10.10
 (c++)"typeinfo name for Botan::Dynamically_Loaded_Engine@Base" 1.10.10
 (c++)"typeinfo name for Botan::EAX_Base@Base" 1.10.10
 (c++)"typeinfo name for Botan::EAX_Decryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::EAX_Encryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECB_Decryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECB_Encryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECDH_KA_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECDH_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECDH_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECDSA_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECDSA_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECDSA_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::ECDSA_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::EC_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::EC_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::EME1@Base" 1.10.10
 (c++)"typeinfo name for Botan::EME@Base" 1.10.10
 (c++)"typeinfo name for Botan::EME_PKCS1v15@Base" 1.10.10
 (c++)"typeinfo name for Botan::EMSA1@Base" 1.10.10
 (c++)"typeinfo name for Botan::EMSA1_BSI@Base" 1.10.10
 (c++)"typeinfo name for Botan::EMSA2@Base" 1.10.10
 (c++)"typeinfo name for Botan::EMSA3@Base" 1.10.10
 (c++)"typeinfo name for Botan::EMSA3_Raw@Base" 1.10.10
 (c++)"typeinfo name for Botan::EMSA4@Base" 1.10.10
 (c++)"typeinfo name for Botan::EMSA@Base" 1.10.10
 (c++)"typeinfo name for Botan::EMSA_Raw@Base" 1.10.10
 (c++)"typeinfo name for Botan::ElGamal_Decryption_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::ElGamal_Encryption_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::ElGamal_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::ElGamal_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::Encoding_Error@Base" 1.10.10
 (c++)"typeinfo name for Botan::Engine@Base" 1.10.10
 (c++)"typeinfo name for Botan::EntropySource@Base" 1.10.10
 (c++)"typeinfo name for Botan::Entropy_Accumulator@Base" 1.10.10
 (c++)"typeinfo name for Botan::Entropy_Accumulator_BufferedComputation@Base" 1.10.10
 (c++)"typeinfo name for Botan::Extensions@Base" 1.10.10
 (c++)"typeinfo name for Botan::Fanout_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::Fixed_Base_Power_Mod@Base" 1.10.10
 (c++)"typeinfo name for Botan::Fixed_Exponent_Power_Mod@Base" 1.10.10
 (c++)"typeinfo name for Botan::Fork@Base" 1.10.10
 (c++)"typeinfo name for Botan::GOST_28147_89@Base" 1.10.10
 (c++)"typeinfo name for Botan::GOST_3410_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::GOST_3410_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::GOST_3410_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::GOST_3410_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::GOST_34_11@Base" 1.10.10
 (c++)"typeinfo name for Botan::HAS_160@Base" 1.10.10
 (c++)"typeinfo name for Botan::HMAC@Base" 1.10.10
 (c++)"typeinfo name for Botan::HMAC_RNG@Base" 1.10.10
 (c++)"typeinfo name for Botan::HashFunction@Base" 1.10.10
 (c++)"typeinfo name for Botan::Hash_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::Hex_Decoder@Base" 1.10.10
 (c++)"typeinfo name for Botan::Hex_Encoder@Base" 1.10.10
 (c++)"typeinfo name for Botan::IDEA@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"typeinfo name for Botan::IDEA_SSE2@Base" 1.10.10
 (c++)"typeinfo name for Botan::IF_Scheme_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::IF_Scheme_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::Illegal_Point@Base" 1.10.10
 (c++)"typeinfo name for Botan::Illegal_Transformation@Base" 1.10.10
 (c++)"typeinfo name for Botan::Integrity_Failure@Base" 1.10.10
 (c++)"typeinfo name for Botan::Internal_Error@Base" 1.10.10
 (c++)"typeinfo name for Botan::Invalid_Algorithm_Name@Base" 1.10.10
 (c++)"typeinfo name for Botan::Invalid_Block_Size@Base" 1.10.10
 (c++)"typeinfo name for Botan::Invalid_IV_Length@Base" 1.10.10
 (c++)"typeinfo name for Botan::Invalid_Key_Length@Base" 1.10.10
 (c++)"typeinfo name for Botan::Invalid_OID@Base" 1.10.10
 (c++)"typeinfo name for Botan::Invalid_State@Base" 1.10.10
 (c++)"typeinfo name for Botan::KASUMI@Base" 1.10.10
 (c++)"typeinfo name for Botan::KDF1@Base" 1.10.10
 (c++)"typeinfo name for Botan::KDF2@Base" 1.10.10
 (c++)"typeinfo name for Botan::KDF@Base" 1.10.10
 (c++)"typeinfo name for Botan::Keccak_1600@Base" 1.10.10
 (c++)"typeinfo name for Botan::Keyed_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::Lion@Base" 1.10.10
 (c++)"typeinfo name for Botan::Lookup_Error@Base" 1.10.10
 (c++)"typeinfo name for Botan::LubyRackoff@Base" 1.10.10
 (c++)"typeinfo name for Botan::MAC_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::MARS@Base" 1.10.10
 (c++)"typeinfo name for Botan::MD2@Base" 1.10.10
 (c++)"typeinfo name for Botan::MD4@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"typeinfo name for Botan::MD4_X86_32@Base" 1.10.10
 (c++)"typeinfo name for Botan::MD5@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"typeinfo name for Botan::MD5_X86_32@Base" 1.10.10
 (c++)"typeinfo name for Botan::MDx_HashFunction@Base" 1.10.10
 (c++)"typeinfo name for Botan::MGF1@Base" 1.10.10
 (c++)"typeinfo name for Botan::MGF@Base" 1.10.10
 (c++)"typeinfo name for Botan::MISTY1@Base" 1.10.10
 (c++)"typeinfo name for Botan::Memory_Exhaustion@Base" 1.10.10
 (c++)"typeinfo name for Botan::MessageAuthenticationCode@Base" 1.10.10
 (c++)"typeinfo name for Botan::Modular_Exponentiator@Base" 1.10.10
 (c++)"typeinfo name for Botan::NR_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::NR_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::NR_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::NR_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::Noekeon@Base" 1.10.10
 (c++)"typeinfo name for Botan::Noekeon_SIMD@Base" 1.10.10
 (c++)"typeinfo name for Botan::Null_Padding@Base" 1.10.10
 (c++)"typeinfo name for Botan::Null_RNG@Base" 1.10.10
 (c++)"typeinfo name for Botan::OFB@Base" 1.10.10
 (c++)"typeinfo name for Botan::OID@Base" 1.10.10
 (c++)"typeinfo name for Botan::OneAndZeros_Padding@Base" 1.10.10
 (c++)"typeinfo name for Botan::OpenPGP_S2K@Base" 1.10.10
 (c++)"typeinfo name for Botan::PBE@Base" 1.10.10
 (c++)"typeinfo name for Botan::PBE_PKCS5v15@Base" 1.10.10
 (c++)"typeinfo name for Botan::PBE_PKCS5v20@Base" 1.10.10
 (c++)"typeinfo name for Botan::PBKDF@Base" 1.10.10
 (c++)"typeinfo name for Botan::PKCS10_Request@Base" 1.10.10
 (c++)"typeinfo name for Botan::PKCS5_PBKDF1@Base" 1.10.10
 (c++)"typeinfo name for Botan::PKCS5_PBKDF2@Base" 1.10.10
 (c++)"typeinfo name for Botan::PKCS7_Padding@Base" 1.10.10
 (c++)"typeinfo name for Botan::PKCS8_Exception@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Decryptor@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Decryptor_EME@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Decryptor_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Encryptor@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Encryptor_EME@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Encryptor_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Key_Agreement_Key@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Ops::Decryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Ops::Encryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Ops::Key_Agreement@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Ops::Signature@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Ops::Verification@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Signer_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::PK_Verifier_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::PRNG_Unseeded@Base" 1.10.10
 (c++)"typeinfo name for Botan::Parallel@Base" 1.10.10
 (c++)"typeinfo name for Botan::Pipe::Invalid_Message_Number@Base" 1.10.10
 (c++)"typeinfo name for Botan::Pipe@Base" 1.10.10
 (c++)"typeinfo name for Botan::Power_Mod@Base" 1.10.10
 (c++)"typeinfo name for Botan::Private_Key@Base" 1.10.10
 (c++)"typeinfo name for Botan::Public_Key@Base" 1.10.10
 (c++)"typeinfo name for Botan::RC2@Base" 1.10.10
 (c++)"typeinfo name for Botan::RC5@Base" 1.10.10
 (c++)"typeinfo name for Botan::RC6@Base" 1.10.10
 (c++)"typeinfo name for Botan::RIPEMD_128@Base" 1.10.10
 (c++)"typeinfo name for Botan::RIPEMD_160@Base" 1.10.10
 (c++)"typeinfo name for Botan::RSA_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::RSA_Private_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::RSA_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::RSA_Public_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::RW_PrivateKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::RW_PublicKey@Base" 1.10.10
 (c++)"typeinfo name for Botan::RW_Signature_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::RW_Verification_Operation@Base" 1.10.10
 (c++)"typeinfo name for Botan::RandomNumberGenerator@Base" 1.10.10
 (c++)"typeinfo name for Botan::Randpool@Base" 1.10.10
 (c++)"typeinfo name for Botan::SAFER_SK@Base" 1.10.10
 (c++)"typeinfo name for Botan::SEED@Base" 1.10.10
 (c++)"typeinfo name for Botan::SHA_160@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"typeinfo name for Botan::SHA_160_SSE2@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"typeinfo name for Botan::SHA_160_X86_32@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"typeinfo name for Botan::SHA_160_X86_64@Base" 1.10.10
 (c++)"typeinfo name for Botan::SHA_224@Base" 1.10.10
 (c++)"typeinfo name for Botan::SHA_256@Base" 1.10.10
 (c++)"typeinfo name for Botan::SHA_384@Base" 1.10.10
 (c++)"typeinfo name for Botan::SHA_512@Base" 1.10.10
 (c++)"typeinfo name for Botan::SSL3_MAC@Base" 1.10.10
 (c++)"typeinfo name for Botan::SSL3_PRF@Base" 1.10.10
 (c++)"typeinfo name for Botan::Salsa20@Base" 1.10.10
 (c++)"typeinfo name for Botan::SecureQueue@Base" 1.10.10
 (c++)"typeinfo name for Botan::Self_Test_Failure@Base" 1.10.10
 (c++)"typeinfo name for Botan::Serpent@Base" 1.10.10
 (c++)"typeinfo name for Botan::Serpent_SIMD@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"typeinfo name for Botan::Serpent_X86_32@Base" 1.10.10
 (c++)"typeinfo name for Botan::Skein_512@Base" 1.10.10
 (c++)"typeinfo name for Botan::Skipjack@Base" 1.10.10
 (c++)"typeinfo name for Botan::Square@Base" 1.10.10
 (c++)"typeinfo name for Botan::StreamCipher@Base" 1.10.10
 (c++)"typeinfo name for Botan::StreamCipher_Filter@Base" 1.10.10
 (c++)"typeinfo name for Botan::Stream_IO_Error@Base" 1.10.10
 (c++)"typeinfo name for Botan::SymmetricAlgorithm@Base" 1.10.10
 (c++)"typeinfo name for Botan::TEA@Base" 1.10.10
 (c++)"typeinfo name for Botan::TLS_12_PRF@Base" 1.10.10
 (c++)"typeinfo name for Botan::TLS_Client@Base" 1.10.10
 (c++)"typeinfo name for Botan::TLS_Connection@Base" 1.10.10
 (c++)"typeinfo name for Botan::TLS_Exception@Base" 1.10.10
 (c++)"typeinfo name for Botan::TLS_PRF@Base" 1.10.10
 (c++)"typeinfo name for Botan::TLS_Policy@Base" 1.10.10
 (c++)"typeinfo name for Botan::TLS_Server@Base" 1.10.10
 (c++)"typeinfo name for Botan::Tiger@Base" 1.10.10
 (c++)"typeinfo name for Botan::TripleDES@Base" 1.10.10
 (c++)"typeinfo name for Botan::Turing@Base" 1.10.10
 (c++)"typeinfo name for Botan::Twofish@Base" 1.10.10
 (c++)"typeinfo name for Botan::Unexpected_Message@Base" 1.10.10
 (c++)"typeinfo name for Botan::User_Interface@Base" 1.10.10
 (c++)"typeinfo name for Botan::Whirlpool@Base" 1.10.10
 (c++)"typeinfo name for Botan::WiderWake_41_BE@Base" 1.10.10
 (c++)"typeinfo name for Botan::X509_CRL::X509_CRL_Error@Base" 1.10.10
 (c++)"typeinfo name for Botan::X509_CRL@Base" 1.10.10
 (c++)"typeinfo name for Botan::X509_Certificate@Base" 1.10.10
 (c++)"typeinfo name for Botan::X509_DN@Base" 1.10.10
 (c++)"typeinfo name for Botan::X509_Object@Base" 1.10.10
 (c++)"typeinfo name for Botan::X509_Time@Base" 1.10.10
 (c++)"typeinfo name for Botan::X942_PRF@Base" 1.10.10
 (c++)"typeinfo name for Botan::XTEA@Base" 1.10.10
 (c++)"typeinfo name for Botan::XTEA_SIMD@Base" 1.10.10
 (c++)"typeinfo name for Botan::XTS_Decryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::XTS_Encryption@Base" 1.10.10
 (c++)"typeinfo name for Botan::Zlib_Compression@Base" 1.10.10
 (c++)"typeinfo name for Botan::Zlib_Decompression@Base" 1.10.10
 (c++)"typeinfo name for std::tr1::bad_function_call@Base" 1.10.10
 (c++)"virtual thunk to Botan::DH_PrivateKey::~DH_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::DH_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DH_PublicKey::group_format() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DH_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DH_PublicKey::~DH_PublicKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::DL_Scheme_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DL_Scheme_PrivateKey::pkcs8_private_key() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DL_Scheme_PublicKey::algorithm_identifier() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DL_Scheme_PublicKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DL_Scheme_PublicKey::x509_subject_public_key() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DSA_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DSA_PrivateKey::~DSA_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::DSA_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DSA_PublicKey::group_format() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DSA_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DSA_PublicKey::message_part_size() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DSA_PublicKey::message_parts() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::DSA_PublicKey::~DSA_PublicKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDH_PrivateKey::~ECDH_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDH_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDH_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDH_PublicKey::~ECDH_PublicKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDSA_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDSA_PrivateKey::~ECDSA_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDSA_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDSA_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDSA_PublicKey::message_part_size() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDSA_PublicKey::message_parts() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ECDSA_PublicKey::~ECDSA_PublicKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::EC_PrivateKey::pkcs8_private_key() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::EC_PublicKey::algorithm_identifier() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::EC_PublicKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::EC_PublicKey::x509_subject_public_key() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ElGamal_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ElGamal_PrivateKey::~ElGamal_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::ElGamal_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ElGamal_PublicKey::group_format() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ElGamal_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::ElGamal_PublicKey::~ElGamal_PublicKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PrivateKey::pkcs8_algorithm_identifier() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PrivateKey::~GOST_3410_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PublicKey::algorithm_identifier() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PublicKey::message_part_size() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PublicKey::message_parts() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PublicKey::x509_subject_public_key() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::GOST_3410_PublicKey::~GOST_3410_PublicKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::IF_Scheme_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::IF_Scheme_PrivateKey::pkcs8_private_key() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::IF_Scheme_PublicKey::algorithm_identifier() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::IF_Scheme_PublicKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::IF_Scheme_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::IF_Scheme_PublicKey::x509_subject_public_key() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::NR_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::NR_PrivateKey::~NR_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::NR_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::NR_PublicKey::group_format() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::NR_PublicKey::max_input_bits() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::NR_PublicKey::message_part_size() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::NR_PublicKey::message_parts() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::NR_PublicKey::~NR_PublicKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::Private_Key::load_check(Botan::RandomNumberGenerator&) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::RSA_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::RSA_PrivateKey::~RSA_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::RSA_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::RSA_PublicKey::~RSA_PublicKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::RW_PrivateKey::check_key(Botan::RandomNumberGenerator&, bool) const@Base" 1.10.10
 (c++)"virtual thunk to Botan::RW_PrivateKey::~RW_PrivateKey()@Base" 1.10.10
 (c++)"virtual thunk to Botan::RW_PublicKey::algo_name() const@Base" 1.10.10
 (c++)"virtual thunk to Botan::RW_PublicKey::~RW_PublicKey()@Base" 1.10.10
 (c++)"void std::vector<Botan::Filter*, std::allocator<Botan::Filter*> >::_M_assign_aux<Botan::Filter**>(Botan::Filter**, Botan::Filter**, std::forward_iterator_tag)@Base" 1.10.10
 (c++)"vtable for Botan::AES_128@Base" 1.10.10
 (c++)"vtable for Botan::AES_192@Base" 1.10.10
 (c++)"vtable for Botan::AES_256@Base" 1.10.10
 (c++)"vtable for Botan::ANSI_X919_MAC@Base" 1.10.10
 (c++)"vtable for Botan::ANSI_X923_Padding@Base" 1.10.10
 (c++)"vtable for Botan::ANSI_X931_RNG@Base" 1.10.10
 (c++)"vtable for Botan::ARC4@Base" 1.10.10
 (c++)"vtable for Botan::ASN1_Object@Base" 1.10.10
 (c++)"vtable for Botan::ASN1_String@Base" 1.10.10
 (c++)"vtable for Botan::Adler32@Base" 1.10.10
 (c++)"vtable for Botan::AlgorithmIdentifier@Base" 1.10.10
 (c++)"vtable for Botan::Algorithm_Not_Found@Base" 1.10.10
 (c++)"vtable for Botan::AlternativeName@Base" 1.10.10
 (c++)"vtable for Botan::Attribute@Base" 1.10.10
 (c++)"vtable for Botan::AutoSeeded_RNG@Base" 1.10.10
 (c++)"vtable for Botan::BER_Bad_Tag@Base" 1.10.10
 (c++)"vtable for Botan::BER_Decoding_Error@Base" 1.10.10
 (c++)"vtable for Botan::BMW_512@Base" 1.10.10
 (c++)"vtable for Botan::Base64_Decoder@Base" 1.10.10
 (c++)"vtable for Botan::Base64_Encoder@Base" 1.10.10
 (c++)"vtable for Botan::BigInt::DivideByZero@Base" 1.10.10
 (c++)"vtable for Botan::BlockCipherModePaddingMethod@Base" 1.10.10
 (c++)"vtable for Botan::Blowfish@Base" 1.10.10
 (c++)"vtable for Botan::Buffered_Filter@Base" 1.10.10
 (c++)"vtable for Botan::Bzip_Compression@Base" 1.10.10
 (c++)"vtable for Botan::Bzip_Decompression@Base" 1.10.10
 (c++)"vtable for Botan::CAST_128@Base" 1.10.10
 (c++)"vtable for Botan::CAST_256@Base" 1.10.10
 (c++)"vtable for Botan::CBC_Decryption@Base" 1.10.10
 (c++)"vtable for Botan::CBC_Encryption@Base" 1.10.10
 (c++)"vtable for Botan::CBC_MAC@Base" 1.10.10
 (c++)"vtable for Botan::CFB_Decryption@Base" 1.10.10
 (c++)"vtable for Botan::CFB_Encryption@Base" 1.10.10
 (c++)"vtable for Botan::CMAC@Base" 1.10.10
 (c++)"vtable for Botan::CRC24@Base" 1.10.10
 (c++)"vtable for Botan::CRC32@Base" 1.10.10
 (c++)"vtable for Botan::CRL_Entry@Base" 1.10.10
 (c++)"vtable for Botan::CTR_BE@Base" 1.10.10
 (c++)"vtable for Botan::CTS_Decryption@Base" 1.10.10
 (c++)"vtable for Botan::CTS_Encryption@Base" 1.10.10
 (c++)"vtable for Botan::Camellia_128@Base" 1.10.10
 (c++)"vtable for Botan::Camellia_192@Base" 1.10.10
 (c++)"vtable for Botan::Camellia_256@Base" 1.10.10
 (c++)"vtable for Botan::Cascade_Cipher@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Alternative_Name@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Authority_Key_ID@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Basic_Constraints@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::CRL_Number@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::CRL_ReasonCode@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Certificate_Policies@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Extended_Key_Usage@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Issuer_Alternative_Name@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Key_Usage@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Subject_Alternative_Name@Base" 1.10.10
 (c++)"vtable for Botan::Cert_Extension::Subject_Key_ID@Base" 1.10.10
 (c++)"vtable for Botan::Certificate_Store_Memory@Base" 1.10.10
 (c++)"vtable for Botan::Chain@Base" 1.10.10
 (c++)"vtable for Botan::Comb4P@Base" 1.10.10
 (c++)"vtable for Botan::DES@Base" 1.10.10
 (c++)"vtable for Botan::DESX@Base" 1.10.10
 (c++)"vtable for Botan::DH_KA_Operation@Base" 1.10.10
 (c++)"vtable for Botan::DH_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::DH_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::DLIES_Decryptor@Base" 1.10.10
 (c++)"vtable for Botan::DLIES_Encryptor@Base" 1.10.10
 (c++)"vtable for Botan::DL_Scheme_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::DL_Scheme_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::DSA_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::DSA_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::DSA_Signature_Operation@Base" 1.10.10
 (c++)"vtable for Botan::DSA_Verification_Operation@Base" 1.10.10
 (c++)"vtable for Botan::DataSink@Base" 1.10.10
 (c++)"vtable for Botan::DataSink_Stream@Base" 1.10.10
 (c++)"vtable for Botan::DataSource_Memory@Base" 1.10.10
 (c++)"vtable for Botan::DataSource_Stream@Base" 1.10.10
 (c++)"vtable for Botan::Data_Store::Matcher@Base" 1.10.10
 (c++)"vtable for Botan::Decoding_Error@Base" 1.10.10
 (c++)"vtable for Botan::Dynamically_Loaded_Engine@Base" 1.10.10
 (c++)"vtable for Botan::EAX_Base@Base" 1.10.10
 (c++)"vtable for Botan::EAX_Decryption@Base" 1.10.10
 (c++)"vtable for Botan::EAX_Encryption@Base" 1.10.10
 (c++)"vtable for Botan::ECB_Decryption@Base" 1.10.10
 (c++)"vtable for Botan::ECB_Encryption@Base" 1.10.10
 (c++)"vtable for Botan::ECDH_KA_Operation@Base" 1.10.10
 (c++)"vtable for Botan::ECDH_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::ECDH_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::ECDSA_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::ECDSA_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::ECDSA_Signature_Operation@Base" 1.10.10
 (c++)"vtable for Botan::ECDSA_Verification_Operation@Base" 1.10.10
 (c++)"vtable for Botan::EC_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::EC_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::EME1@Base" 1.10.10
 (c++)"vtable for Botan::EME_PKCS1v15@Base" 1.10.10
 (c++)"vtable for Botan::EMSA1@Base" 1.10.10
 (c++)"vtable for Botan::EMSA1_BSI@Base" 1.10.10
 (c++)"vtable for Botan::EMSA2@Base" 1.10.10
 (c++)"vtable for Botan::EMSA3@Base" 1.10.10
 (c++)"vtable for Botan::EMSA3_Raw@Base" 1.10.10
 (c++)"vtable for Botan::EMSA4@Base" 1.10.10
 (c++)"vtable for Botan::EMSA_Raw@Base" 1.10.10
 (c++)"vtable for Botan::ElGamal_Decryption_Operation@Base" 1.10.10
 (c++)"vtable for Botan::ElGamal_Encryption_Operation@Base" 1.10.10
 (c++)"vtable for Botan::ElGamal_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::ElGamal_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::Encoding_Error@Base" 1.10.10
 (c++)"vtable for Botan::Engine@Base" 1.10.10
 (c++)"vtable for Botan::Entropy_Accumulator@Base" 1.10.10
 (c++)"vtable for Botan::Entropy_Accumulator_BufferedComputation@Base" 1.10.10
 (c++)"vtable for Botan::Extensions@Base" 1.10.10
 (c++)"vtable for Botan::Fanout_Filter@Base" 1.10.10
 (c++)"vtable for Botan::Filter@Base" 1.10.10
 (c++)"vtable for Botan::Fixed_Base_Power_Mod@Base" 1.10.10
 (c++)"vtable for Botan::Fixed_Exponent_Power_Mod@Base" 1.10.10
 (c++)"vtable for Botan::Fork@Base" 1.10.10
 (c++)"vtable for Botan::GOST_28147_89@Base" 1.10.10
 (c++)"vtable for Botan::GOST_3410_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::GOST_3410_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::GOST_3410_Signature_Operation@Base" 1.10.10
 (c++)"vtable for Botan::GOST_3410_Verification_Operation@Base" 1.10.10
 (c++)"vtable for Botan::GOST_34_11@Base" 1.10.10
 (c++)"vtable for Botan::HAS_160@Base" 1.10.10
 (c++)"vtable for Botan::HMAC@Base" 1.10.10
 (c++)"vtable for Botan::HMAC_RNG@Base" 1.10.10
 (c++)"vtable for Botan::Hash_Filter@Base" 1.10.10
 (c++)"vtable for Botan::Hex_Decoder@Base" 1.10.10
 (c++)"vtable for Botan::Hex_Encoder@Base" 1.10.10
 (c++)"vtable for Botan::IDEA@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"vtable for Botan::IDEA_SSE2@Base" 1.10.10
 (c++)"vtable for Botan::IF_Scheme_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::IF_Scheme_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::Illegal_Point@Base" 1.10.10
 (c++)"vtable for Botan::Illegal_Transformation@Base" 1.10.10
 (c++)"vtable for Botan::Integrity_Failure@Base" 1.10.10
 (c++)"vtable for Botan::Internal_Error@Base" 1.10.10
 (c++)"vtable for Botan::Invalid_Algorithm_Name@Base" 1.10.10
 (c++)"vtable for Botan::Invalid_Block_Size@Base" 1.10.10
 (c++)"vtable for Botan::Invalid_IV_Length@Base" 1.10.10
 (c++)"vtable for Botan::Invalid_Key_Length@Base" 1.10.10
 (c++)"vtable for Botan::Invalid_OID@Base" 1.10.10
 (c++)"vtable for Botan::Invalid_State@Base" 1.10.10
 (c++)"vtable for Botan::KASUMI@Base" 1.10.10
 (c++)"vtable for Botan::KDF1@Base" 1.10.10
 (c++)"vtable for Botan::KDF2@Base" 1.10.10
 (c++)"vtable for Botan::Keccak_1600@Base" 1.10.10
 (c++)"vtable for Botan::Keyed_Filter@Base" 1.10.10
 (c++)"vtable for Botan::Lion@Base" 1.10.10
 (c++)"vtable for Botan::Lookup_Error@Base" 1.10.10
 (c++)"vtable for Botan::LubyRackoff@Base" 1.10.10
 (c++)"vtable for Botan::MAC_Filter@Base" 1.10.10
 (c++)"vtable for Botan::MARS@Base" 1.10.10
 (c++)"vtable for Botan::MD2@Base" 1.10.10
 (c++)"vtable for Botan::MD4@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"vtable for Botan::MD4_X86_32@Base" 1.10.10
 (c++)"vtable for Botan::MD5@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"vtable for Botan::MD5_X86_32@Base" 1.10.10
 (c++)"vtable for Botan::MDx_HashFunction@Base" 1.10.10
 (c++)"vtable for Botan::MGF1@Base" 1.10.10
 (c++)"vtable for Botan::MISTY1@Base" 1.10.10
 (c++)"vtable for Botan::Memory_Exhaustion@Base" 1.10.10
 (c++)"vtable for Botan::MessageAuthenticationCode@Base" 1.10.10
 (c++)"vtable for Botan::NR_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::NR_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::NR_Signature_Operation@Base" 1.10.10
 (c++)"vtable for Botan::NR_Verification_Operation@Base" 1.10.10
 (c++)"vtable for Botan::Noekeon@Base" 1.10.10
 (c++)"vtable for Botan::Noekeon_SIMD@Base" 1.10.10
 (c++)"vtable for Botan::Null_Padding@Base" 1.10.10
 (c++)"vtable for Botan::Null_RNG@Base" 1.10.10
 (c++)"vtable for Botan::OFB@Base" 1.10.10
 (c++)"vtable for Botan::OID@Base" 1.10.10
 (c++)"vtable for Botan::OneAndZeros_Padding@Base" 1.10.10
 (c++)"vtable for Botan::OpenPGP_S2K@Base" 1.10.10
 (c++)"vtable for Botan::PBE@Base" 1.10.10
 (c++)"vtable for Botan::PBE_PKCS5v15@Base" 1.10.10
 (c++)"vtable for Botan::PBE_PKCS5v20@Base" 1.10.10
 (c++)"vtable for Botan::PKCS10_Request@Base" 1.10.10
 (c++)"vtable for Botan::PKCS5_PBKDF1@Base" 1.10.10
 (c++)"vtable for Botan::PKCS5_PBKDF2@Base" 1.10.10
 (c++)"vtable for Botan::PKCS7_Padding@Base" 1.10.10
 (c++)"vtable for Botan::PKCS8_Exception@Base" 1.10.10
 (c++)"vtable for Botan::PK_Decryptor_EME@Base" 1.10.10
 (c++)"vtable for Botan::PK_Decryptor_Filter@Base" 1.10.10
 (c++)"vtable for Botan::PK_Encryptor_EME@Base" 1.10.10
 (c++)"vtable for Botan::PK_Encryptor_Filter@Base" 1.10.10
 (c++)"vtable for Botan::PK_Signer_Filter@Base" 1.10.10
 (c++)"vtable for Botan::PK_Verifier_Filter@Base" 1.10.10
 (c++)"vtable for Botan::PRNG_Unseeded@Base" 1.10.10
 (c++)"vtable for Botan::Parallel@Base" 1.10.10
 (c++)"vtable for Botan::Pipe::Invalid_Message_Number@Base" 1.10.10
 (c++)"vtable for Botan::Pipe@Base" 1.10.10
 (c++)"vtable for Botan::Power_Mod@Base" 1.10.10
 (c++)"vtable for Botan::Private_Key@Base" 1.10.10
 (c++)"vtable for Botan::Public_Key@Base" 1.10.10
 (c++)"vtable for Botan::RC2@Base" 1.10.10
 (c++)"vtable for Botan::RC5@Base" 1.10.10
 (c++)"vtable for Botan::RC6@Base" 1.10.10
 (c++)"vtable for Botan::RIPEMD_128@Base" 1.10.10
 (c++)"vtable for Botan::RIPEMD_160@Base" 1.10.10
 (c++)"vtable for Botan::RSA_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::RSA_Private_Operation@Base" 1.10.10
 (c++)"vtable for Botan::RSA_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::RSA_Public_Operation@Base" 1.10.10
 (c++)"vtable for Botan::RW_PrivateKey@Base" 1.10.10
 (c++)"vtable for Botan::RW_PublicKey@Base" 1.10.10
 (c++)"vtable for Botan::RW_Signature_Operation@Base" 1.10.10
 (c++)"vtable for Botan::RW_Verification_Operation@Base" 1.10.10
 (c++)"vtable for Botan::Randpool@Base" 1.10.10
 (c++)"vtable for Botan::SAFER_SK@Base" 1.10.10
 (c++)"vtable for Botan::SEED@Base" 1.10.10
 (c++)"vtable for Botan::SHA_160@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"vtable for Botan::SHA_160_SSE2@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"vtable for Botan::SHA_160_X86_32@Base" 1.10.10
 (c++|arch=amd64 kfreebsd-amd64)"vtable for Botan::SHA_160_X86_64@Base" 1.10.10
 (c++)"vtable for Botan::SHA_224@Base" 1.10.10
 (c++)"vtable for Botan::SHA_256@Base" 1.10.10
 (c++)"vtable for Botan::SHA_384@Base" 1.10.10
 (c++)"vtable for Botan::SHA_512@Base" 1.10.10
 (c++)"vtable for Botan::SSL3_MAC@Base" 1.10.10
 (c++)"vtable for Botan::SSL3_PRF@Base" 1.10.10
 (c++)"vtable for Botan::Salsa20@Base" 1.10.10
 (c++)"vtable for Botan::SecureQueue@Base" 1.10.10
 (c++)"vtable for Botan::Self_Test_Failure@Base" 1.10.10
 (c++)"vtable for Botan::Serpent@Base" 1.10.10
 (c++)"vtable for Botan::Serpent_SIMD@Base" 1.10.10
 (c++|arch=!alpha !amd64 !arm64 !armel !armhf !kfreebsd-amd64 !mips !mipsel !powerpc !ppc64el !s390x !sparc64)"vtable for Botan::Serpent_X86_32@Base" 1.10.10
 (c++)"vtable for Botan::Skein_512@Base" 1.10.10
 (c++)"vtable for Botan::Skipjack@Base" 1.10.10
 (c++)"vtable for Botan::Square@Base" 1.10.10
 (c++)"vtable for Botan::StreamCipher@Base" 1.10.10
 (c++)"vtable for Botan::StreamCipher_Filter@Base" 1.10.10
 (c++)"vtable for Botan::Stream_IO_Error@Base" 1.10.10
 (c++)"vtable for Botan::TEA@Base" 1.10.10
 (c++)"vtable for Botan::TLS_12_PRF@Base" 1.10.10
 (c++)"vtable for Botan::TLS_Client@Base" 1.10.10
 (c++)"vtable for Botan::TLS_Exception@Base" 1.10.10
 (c++)"vtable for Botan::TLS_PRF@Base" 1.10.10
 (c++)"vtable for Botan::TLS_Policy@Base" 1.10.10
 (c++)"vtable for Botan::TLS_Server@Base" 1.10.10
 (c++)"vtable for Botan::Tiger@Base" 1.10.10
 (c++)"vtable for Botan::TripleDES@Base" 1.10.10
 (c++)"vtable for Botan::Turing@Base" 1.10.10
 (c++)"vtable for Botan::Twofish@Base" 1.10.10
 (c++)"vtable for Botan::Unexpected_Message@Base" 1.10.10
 (c++)"vtable for Botan::User_Interface@Base" 1.10.10
 (c++)"vtable for Botan::Whirlpool@Base" 1.10.10
 (c++)"vtable for Botan::WiderWake_41_BE@Base" 1.10.10
 (c++)"vtable for Botan::X509_CRL::X509_CRL_Error@Base" 1.10.10
 (c++)"vtable for Botan::X509_CRL@Base" 1.10.10
 (c++)"vtable for Botan::X509_Certificate@Base" 1.10.10
 (c++)"vtable for Botan::X509_DN@Base" 1.10.10
 (c++)"vtable for Botan::X509_Object@Base" 1.10.10
 (c++)"vtable for Botan::X509_Time@Base" 1.10.10
 (c++)"vtable for Botan::X942_PRF@Base" 1.10.10
 (c++)"vtable for Botan::XTEA@Base" 1.10.10
 (c++)"vtable for Botan::XTEA_SIMD@Base" 1.10.10
 (c++)"vtable for Botan::XTS_Decryption@Base" 1.10.10
 (c++)"vtable for Botan::XTS_Encryption@Base" 1.10.10
 (c++)"vtable for Botan::Zlib_Compression@Base" 1.10.10
 (c++)"vtable for Botan::Zlib_Decompression@Base" 1.10.10
 (c++)"vtable for std::tr1::bad_function_call@Base" 1.10.10
